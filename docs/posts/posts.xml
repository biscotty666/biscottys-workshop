<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>biscotty&#39;s Workshop</title>
<link>https://biscotty.online/posts/posts.html</link>
<atom:link href="https://biscotty.online/posts/posts.xml" rel="self" type="application/rss+xml"/>
<description>For the love of learning</description>
<generator>quarto-1.6.42</generator>
<lastBuildDate>Sun, 30 Mar 2025 06:00:00 GMT</lastBuildDate>
<item>
  <title>GPS Mapping with R</title>
  <link>https://biscotty.online/posts/data-science/trail-mapping-with-r/</link>
  <description><![CDATA[ 





<p>I recently published a series of articles on analyzing GPS data from personal sport tracking software using Python. I’ve started using R again lately and, while I like Python, I really like R. R is not a general-purpose language like Python, and is therefore far less commonly studied. It was mission-built for this type of work, and, as is often the case with custom-built tools, it is powerful, comfortable, and, frankly, fun to work with. I thought it might be interesting to compare the process in Python described in the <a href="../../../posts/data-science/python-gpx-mapping/gpx-gps-data/index.html">previous articles</a> with the process in R.</p>
<section id="libraries" class="level2">
<h2 class="anchored" data-anchor-id="libraries">Libraries</h2>
<p>Python data frames are built on the <code>pandas</code> and <code>numpy</code> libraries, with <code>matplotlib</code> as the primary plotting tool. Data frames and vector processing are native to R. The <code>dplyr</code> library provides convenience functions for manipulating data. The amazing <code>gplot2</code> provides the functionality of <code>matplotlib</code> and <code>seaborn</code> and more, with simple syntax. The <code>sf</code> package, which stands for <em>Simple Features</em>, provides the geometry and geospatial functionality which <code>geopandas</code> and <code>shapely</code> do in Python. I’ll use <code>ggspatial</code> here for basemap tiles where I used <code>contextily</code> in Python, and I’ll add <code>patchwork</code> for convenient side-by-side display.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(gpx)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(sf)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggspatial)</span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(patchwork)</span></code></pre></div>
</div>
</section>
<section id="syntax" class="level2">
<h2 class="anchored" data-anchor-id="syntax">Syntax</h2>
<p>A few notes about syntax to start off: R uses the <code>&lt;-</code> arrow for assignment, but accepts <code>=</code> as well. Data frame slicing uses the same <code>[row,column]</code> approach with explicit or boolean values. Unlike <code>pandas</code>, which distinguishes between <code>df.loc</code> and <code>df.iloc</code>, in R you can slice using numeric indices or strings without distinction. On a similar topic, R uses one-indexing, but is inclusive of the end, so <code>df[1:2]</code> in R is equivalent to Python’s <code>df.iloc[:2]</code>, or more explicitly <code>df.iloc[0:2]</code>, and the second element is directly accessed with <code>df[2]</code> instead of <code>df.iloc[1]</code>.</p>
<p>There’s an important twist to this which will catch you multiple times. Even though the syntax is <code>[row,column]</code>, if you supply only one numeric index, without a comma, it will be interpreted as a column index. So <code>df[1]</code> gets the first column, while <code>df[1, ]</code> gets the first row.</p>
<p>The main syntactical difference is R’s extensive use of piping, using the pipe operator <code>|&gt;</code>, sometimes written as <code>%&gt;%</code>. This looks similar to accessing a series of an object’s methods through a chain of <code>.</code>s in Python, but it isn’t. The pipe in R works like the pipe in a Linux shell, simply passing the output of one function to the next function as its first argument. This is one of my personal favorite aspects of working in R, since it allows for natural expression of a series of steps which constitue a workflow. <code>ggplot2</code> takes a similar <em>syntactical</em> approach, layering elements of the plot by chaining using the <code>+</code> operator.</p>
</section>
<section id="loading-the-data" class="level2">
<h2 class="anchored" data-anchor-id="loading-the-data">Loading the data</h2>
<p>Let’s get started. With Python, we needed to parse the raw <code>gpx</code> data, which is in an XML format, to a CSV formatted file, which could then be imported into a <code>pandas</code> data frame, and then turned that into a <code>geopandas</code> data frame. I used <code>beautifulsoup</code> to do so. R, fortunately, has a <code>gpx</code> library that allows us to go straight from <code>gpx</code> into a data frame. Let’s see what that looks like. The <code>str()</code> command will let us know what’s inside.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">trek_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_gpx</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data/b3/Workout-2024-09-06-16-29-37.gpx"</span>)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(trek_data)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>List of 3
 $ routes   :List of 1
  ..$ :'data.frame':    0 obs. of  4 variables:
  .. ..$ Elevation: logi(0) 
  .. ..$ Time     : logi(0) 
  .. ..$ Latitude : logi(0) 
  .. ..$ Longitude: logi(0) 
 $ tracks   :List of 1
  ..$ River Vale:'data.frame':  137 obs. of  6 variables:
  .. ..$ Elevation : num [1:137] -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 ...
  .. ..$ Time      : POSIXct[1:137], format: "2024-09-06 16:29:37" "2024-09-06 16:29:37" ...
  .. ..$ Latitude  : num [1:137] 41 41 41 41 41 ...
  .. ..$ Longitude : num [1:137] -74 -74 -74 -74 -74 ...
  .. ..$ extensions: logi [1:137] NA NA NA NA NA NA ...
  .. ..$ Segment ID: int [1:137] 1 1 1 1 1 1 1 1 1 1 ...
 $ waypoints:List of 1
  ..$ :'data.frame':    0 obs. of  4 variables:
  .. ..$ Elevation: logi(0) 
  .. ..$ Time     : logi(0) 
  .. ..$ Latitude : logi(0) 
  .. ..$ Longitude: logi(0) </code></pre>
</div>
</div>
<p>The result is not a data frame, but a list of lists. The second one, called tracks, is the only one with observations, so we can start with that. Don’t forget that R does not zero-index lists, so we use <code>2</code> not <code>1</code>, and extract it with double square brackets.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">trek_tracks <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> trek_data[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]]</span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(trek_tracks)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>List of 1
 $ River Vale:'data.frame': 137 obs. of  6 variables:
  ..$ Elevation : num [1:137] -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 ...
  ..$ Time      : POSIXct[1:137], format: "2024-09-06 16:29:37" "2024-09-06 16:29:37" ...
  ..$ Latitude  : num [1:137] 41 41 41 41 41 ...
  ..$ Longitude : num [1:137] -74 -74 -74 -74 -74 ...
  ..$ extensions: logi [1:137] NA NA NA NA NA NA ...
  ..$ Segment ID: int [1:137] 1 1 1 1 1 1 1 1 1 1 ...</code></pre>
</div>
</div>
<p>This gets us closer, now we have list of one. Let’s pull that out and display the first two rows.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">trek <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> trek_tracks[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb6-2">trek[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  Elevation                Time Latitude Longitude extensions Segment ID
1        -4 2024-09-06 16:29:37 41.01128  -74.0101         NA          1
2        -4 2024-09-06 16:29:37 41.01128  -74.0101         NA          1</code></pre>
</div>
</div>
<p>Note the comma, which is very important. If only one value is supplied, it chooses columns instead of rows.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(trek[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  Elevation                Time
1        -4 2024-09-06 16:29:37
2        -4 2024-09-06 16:29:37</code></pre>
</div>
</div>
<p>And the final frame looks like:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(trek)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>'data.frame':   137 obs. of  6 variables:
 $ Elevation : num  -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 ...
 $ Time      : POSIXct, format: "2024-09-06 16:29:37" "2024-09-06 16:29:37" ...
 $ Latitude  : num  41 41 41 41 41 ...
 $ Longitude : num  -74 -74 -74 -74 -74 ...
 $ extensions: logi  NA NA NA NA NA NA ...
 $ Segment ID: int  1 1 1 1 1 1 1 1 1 1 ...</code></pre>
</div>
</div>
</section>
<section id="importing-a-collection-of-treks" class="level2">
<h2 class="anchored" data-anchor-id="importing-a-collection-of-treks">Importing a collection of treks</h2>
<p>Now that I know “where” the information is, I can go ahead and import a series of files and combine them into a single data frame. As I did with Python, I will assign a unique identifier to each trek, and then combine them. The R equivalent of <code>df.append</code> in <code>pandas</code> is the aptly-named <code>bind_rows()</code> from the <code>dplyr</code> library.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">files <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list.files</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">path =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data/b3/"</span>, </span>
<span id="cb12-2">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.gpx$"</span>,</span>
<span id="cb12-3">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">full.names =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb12-4">data_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>()</span>
<span id="cb12-5">i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb12-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (file <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> files) {</span>
<span id="cb12-7">  data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_gpx</span>(file)[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]][[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb12-8">  data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>id <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> i</span>
<span id="cb12-9">  i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb12-10">  data_list[[file]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data</span>
<span id="cb12-11">}</span>
<span id="cb12-12">tracks_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>(data_list)</span>
<span id="cb12-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(tracks_df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>'data.frame':   3044 obs. of  7 variables:
 $ Elevation : num  79 79 77 76 75 74 72 71 70 70 ...
 $ Time      : POSIXct, format: "2024-09-05 15:25:13" "2024-09-05 15:25:13" ...
 $ Latitude  : num  41 41 41 41 41 ...
 $ Longitude : num  -74.1 -74.1 -74.1 -74.1 -74.1 ...
 $ extensions: logi  NA NA NA NA NA NA ...
 $ Segment ID: int  1 1 1 1 1 1 1 1 1 1 ...
 $ id        : num  1 1 1 1 1 1 1 1 1 1 ...</code></pre>
</div>
</div>
<p>Note the use of <code>$</code> to access the columns. An alternate syntax, <code>data['id']</code> is available for column names with spaces. This is like <code>pandas</code> use of the <code>.</code> operator.</p>
</section>
<section id="data-frame-to-geo-data" class="level2">
<h2 class="anchored" data-anchor-id="data-frame-to-geo-data">Data frame to geo-data</h2>
<p>In Python, we turned this into a geo-enabled data frame with:</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb14-1"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```{python}</span></span>
<span id="cb14-2"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">trek_gdf = gpd.GeoDataFrame( </span></span>
<span id="cb14-3"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    trek_df, </span></span>
<span id="cb14-4"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    geometry=gpd.points_from_xy(x=trek_df.Lon, y=trek_df.Lat)</span></span>
<span id="cb14-5"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">).set_crs(4269)</span></span>
<span id="cb14-6"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">trek_gdf.info()</span></span>
<span id="cb14-7"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```</span></span></code></pre></div>
<p>R uses the <code>sf::st_as_sf()</code> for this purpose, with much less verbose syntax.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">treks <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tracks_df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb15-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">st_as_sf</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">coords =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Longitude"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Latitude"</span>),</span>
<span id="cb15-3">           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">crs =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4326</span>)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(treks)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Classes 'sf' and 'data.frame':  3044 obs. of  6 variables:
 $ Elevation : num  79 79 77 76 75 74 72 71 70 70 ...
 $ Time      : POSIXct, format: "2024-09-05 15:25:13" "2024-09-05 15:25:13" ...
 $ extensions: logi  NA NA NA NA NA NA ...
 $ Segment ID: int  1 1 1 1 1 1 1 1 1 1 ...
 $ id        : num  1 1 1 1 1 1 1 1 1 1 ...
 $ geometry  :sfc_POINT of length 3044; first list element:  'XY' num  -74.1 41
 - attr(*, "sf_column")= chr "geometry"
 - attr(*, "agr")= Factor w/ 3 levels "constant","aggregate",..: NA NA NA NA NA
  ..- attr(*, "names")= chr [1:5] "Elevation" "Time" "extensions" "Segment ID" ...</code></pre>
</div>
</div>
<p>As you can see, we now have a <code>geometry</code> column and the <code>Time</code> column was assigned the appropriate type, which we had to do as an additional step in Python. I’ll grab the first trek, then plot it with <code>ggplot</code>. Using <code>ggplot</code> entails adding elements one by one.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">trek <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> treks[treks<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>id <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,]</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> trek) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb19-2">  ggspatial<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">annotation_map_tile</span>(      </span>
<span id="cb19-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"osm"</span>,</span>
<span id="cb19-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cachedir =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"maps/"</span>,</span>
<span id="cb19-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">zoomin =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb19-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_sf</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> Elevation)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb19-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_color_viridis_c</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb19-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb19-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb19-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Elevation Profile: Park Ridge"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(trek[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Time)),</span>
<span id="cb19-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">caption =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tiles © OpenStreetMap (ODBL license)"</span></span>
<span id="cb19-12">  )</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://biscotty.online/posts/data-science/trail-mapping-with-r/index_files/figure-html/unnamed-chunk-11-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>In this case, we pass the data frame (actually an <code>sf</code> object) to <code>ggplot</code>, then layer on the basemap and the actual points using <code>geom_sf</code>, passing it the column we want to color using the <code>aes()</code> funtion. “aes” is short for aesthetics, and it is where you specify columns to be used for that element. The details of this vary depending on the geometry. <code>theme_void()</code> removes axis ticks, and the rest should be self-explanatory.</p>
<p>We still must change the coordinate system to get appropriate distances. In R, this is</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">trek_proj <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> trek <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">st_transform</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">crs =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32113</span>)</span></code></pre></div>
</div>
<p>In Python, we did</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb21-1"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```{python}</span></span>
<span id="cb21-2"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">trek_proj = trek_gdf.to_crs(32111)</span></span>
<span id="cb21-3"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```</span></span></code></pre></div>
<p>While the syntax looks similar, Python is accessing a method of the <code>trek</code> object, while R is simply passing the output of one function to another.</p>
</section>
<section id="elevations" class="level2">
<h2 class="anchored" data-anchor-id="elevations">Elevations</h2>
<p>I won’t move beyond points until the next article, but in the first Python one I did calculate the distance, so to be fair I will do so here. I’ll explain the code later, but it is a good example of piping in R.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">distance <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> trek <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb22-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">st_transform</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">crs =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32113</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb22-3">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">do_union =</span> F) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb22-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">st_cast</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"LINESTRING"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb22-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">st_length</span>()</span>
<span id="cb22-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Total distance"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(distance<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">digits =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"kilometers"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Total distance 7.7 kilometers"</code></pre>
</div>
</div>
<p>Let’s see the other basic information. I will put it in a data frame for a nice printout.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb24-2">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Elevation"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Maximum"</span>,</span>
<span id="cb24-3">             <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Minimum"</span>,</span>
<span id="cb24-4">             <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Average"</span>,</span>
<span id="cb24-5">             <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Initial"</span>,</span>
<span id="cb24-6">             <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Final"</span>),</span>
<span id="cb24-7">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Meters"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(trek<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Elevation),</span>
<span id="cb24-8">               <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(trek<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Elevation),</span>
<span id="cb24-9">               <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(trek<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Elevation)),</span>
<span id="cb24-10">               trek[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Elevation,</span>
<span id="cb24-11">               trek[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(trek),]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Elevation)</span>
<span id="cb24-12">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  Elevation Meters
1   Maximum     81
2   Minimum     11
3   Average     45
4   Initial     79
5     Final     74</code></pre>
</div>
</div>
<p>The <code>c()</code> function is used to create a vector (not a list), so I specify each column name and assign it a vector with data, ensuring that each vector has the same length, of course. Note how I access the last row of <code>trek</code>. There are multiple ways of doing this in R, but sadly negative indexing is not one. This is the most efficient. I will say that I miss Python’s f-string, especially with literals (<code>f""" """</code>).</p>
<p>Now we can use <code>ggplot</code> for a line chart of the elevation.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(trek, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> Time, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> Elevation)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb26-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb26-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggtitle</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Elevation Profile for Park Ridge Walk on"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(trek[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Time)))</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://biscotty.online/posts/data-science/trail-mapping-with-r/index_files/figure-html/unnamed-chunk-15-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>And here are the smoothed profiles using two different methods, and display them side by side with the <code>patchwork</code> library.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(patchwork)</span>
<span id="cb27-2">gam_plot <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(trek, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> Time, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> Elevation)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb27-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb27-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_smooth</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gam"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb27-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggtitle</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NJ (gam smoothing)"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(trek[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Time)))</span>
<span id="cb27-6"></span>
<span id="cb27-7">loess_plot <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(trek, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> Time, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> Elevation)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb27-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb27-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_smooth</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"loess"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb27-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggtitle</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NJ (loess smoothing)"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(trek[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Time)))</span>
<span id="cb27-11"></span>
<span id="cb27-12">gam_plot <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> loess_plot</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://biscotty.online/posts/data-science/trail-mapping-with-r/index_files/figure-html/unnamed-chunk-16-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p><code>ggplot2</code>’s approach of adding layers makes code clear and easy to write, and does not have the odd <code>fig, ax</code> mechanism which can be confusing. I’ll use the <code>ggspatial</code> library this time to get a basemap.</p>
</section>
<section id="next-steps" class="level2">
<h2 class="anchored" data-anchor-id="next-steps">Next steps</h2>
<p>I hope you enjoyed this exercise, no pun intended. The code for this is on my websites <a href="https://github/biscotty666/biscottys-workshop">GitHub repository</a>. I’ll come out with part 2 soon. Happy coding!</p>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>GIS</category>
  <category>R</category>
  <category>Python</category>
  <category>Data Science</category>
  <guid>https://biscotty.online/posts/data-science/trail-mapping-with-r/</guid>
  <pubDate>Sun, 30 Mar 2025 06:00:00 GMT</pubDate>
</item>
<item>
  <title>Obsidian and Jupyter Notebooks</title>
  <dc:creator>Brian Carey</dc:creator>
  <link>https://biscotty.online/posts/obsidian/obsidian-jupyter/</link>
  <description><![CDATA[ 





<section id="obsidian-and-jupyter-notebooks" class="level1">
<h1>Obsidian and Jupyter Notebooks</h1>
<blockquote class="blockquote">
<p>Personal Knowledge Management for Data Science</p>
</blockquote>
<section id="motivation" class="level2">
<h2 class="anchored" data-anchor-id="motivation">Motivation</h2>
<p>Jupyter notebooks, or more properly iPython notebooks, are fantastic tools for data exploration and modeling. You can run bits of code, interspersed with blocks of markdown, allowing you to easily work with data and present analyses and forecasts in a visual and interactive format. Notebooks can be easily shared via GitHub, or run on-line with Colab.</p>
<p>The problem with iPython notebooks, from a Personal Knowledge Management perspective, is they end up being “books on the shelf”. For Obsidian users and PKM practitioners, the whole point is to get away from keeping information in notebooks, with all the uselessness that that implies. One could, as you will see, just do data exploration directly in Obsidian instead of in a standard iPython notebook. But Obsidian is not an IDE. The ecosystem around the interactive Python notebook IDEs, be it Jupyter Lab itself, or VS Code, etc, is so useful, that working in Obsidian while exploring data and creating models would be unacceptably tedious. Using fit-for-purpose tools is very important for efficiency.</p>
<p>We need a painless way to capture all this information in our vault, making <em>notes</em> out of the notebooks. How can we easily make this information future-useful, without repeating/duplicating our efforts or doing a ton of copy/paste? In this article, I’ll explain the solution that works well for me, ensuring Obsidian-speed access to any bits of information I have in my notebooks, as well as making review and study activities so much more pleasant. And, of course, my canvases have all gotten richer as well.</p>
</section>
<section id="setting-up-obsidian" class="level2">
<h2 class="anchored" data-anchor-id="setting-up-obsidian">Setting up Obsidian</h2>
<p>The community plugin needed to accomplish this is called <a href="https://github.com/twibiral/obsidian-execute-code">Execute Code</a>, written by Tim Wibiral together with Jupyter and a library called <code>nbconvert</code>. The latter will convert the notebooks to markdown, and the plugin allows you to execute the code directly within a note. To get started, create a virtual environment for Obsidian to use. If you aren’t using virtual environments, please start now! It’s simple, and you will avoid future problems. From the command line, do:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-p</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$HOME</span>/.config/venvs <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$_</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> venv obsidian_venv</span>
<span id="cb1-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">source</span> obsidian_venv/bin/activate</span>
<span id="cb1-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--upgrade</span> pip</span>
<span id="cb1-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install jupyterlab nbconvert </span></code></pre></div>
<p>You can install other libraries like Pandas and Matplotlib as well into the virtual environment with pip install. Jupyter lab and nbconvert will be necessary to convert the notebooks to markdown. At this point, you could launch <code>jupyter lab</code>, but there is no need to. After installing packages, you can exit the virtual environment with <code>deactivate</code>. Should you need to install more packages later, you can type <code>source $HOME/.config/venvs/obsidian_venv/bin/activate</code> to re-enter the virtual environment and <code>pip install</code> other packages.</p>
<p>In Obsidian, install the Execute Code plugin. After installing the plugin you must point it to the version of Python you want to use, in this case the one we made in the virtual environment above. In the settings for the plugin, under the language-specific settings, choose Python from the drop down list. For <em>Python Path</em>, enter <code>/home/directory/.config/venvs/obsidian_venv/bin/python</code>.</p>
<p>With that done, any code block with the keyword <code>python</code> added directly after the opening back ticks of the block can be run in the Note. In Read view, a <em>Run</em> button will appear by each code block, allowing you to execute the code in the block. After execution, there will be a <em>Clear</em> button to clear up output that you want removed from the note. Code can also be executed from Edit view by using the keyword <code>run-python</code> rather than simply <code>python</code>. The plugin offers a command to run all the code in the note, as well as a command to view and kill any active runtimes.</p>
</section>
<section id="processing-a-notebook" class="level2">
<h2 class="anchored" data-anchor-id="processing-a-notebook">Processing a notebook</h2>
<p>Jupyter Lab can export an <code>ipynb</code> file directly to markdown! As of writing, VS Code can only export to <code>py</code>, <code>pdf</code> or <code>html</code>. From the file menu, select <em>Export</em> and choose <em>Markdown</em>. This will generate a zipped archive containing a markdown page, along with any image files in the notebook. The problem with this approach is that you will find all of the image files named <code>output</code> something, and so after exporting a few notebooks, there will be name conflicts in your vault.</p>
<p>Using the command line avoids this problem, and is in any case much more efficient. You will need to activate your virtual environment with <code>source</code> as described above. Then type</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">jupyter</span> nbconvert <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--to</span> Markdown your_notebook.ipynb</span></code></pre></div>
<p>This will generate an <code>md</code> file which can be copied into your vault. If there are images from generated by the output, like graphs and other visuals, these will be put in a directory created by the above command. If you copy this directory, with all the image files into the vault directory that you use for attachments, the new <code>md</code> file will find them. (It is important to copy the directory itself and not just the files, since the new note will expect to find them there.)</p>
<p>Once in Obsidian you can process your Notebooks as any other file, breaking them into bite-size chunks of information. I rely heavily on “Extract this heading”, available with a right-click on any heading in a note. This replaces the section with a link to a newly-created note containing the section’s content. I find it useful to use a template that loads common libraries, since they will need to be added them at the top of the new files.</p>
<p>When converting your notebooks to notes, be aware that different notes do not share the same runtime. Be sure to include all the variables/calculations necessary for the part of the code you extracted in the new file, as this will not be available from another file’s state. Also, any images that you link to in the markdown sections of the original notebook will need to be manually copied into the vault, as only images generated from code in the file will be exported. ## Closing Thoughts</p>
<p>I first started using Obsidian for the specific purpose of studying data science. My use of Obsidian broadened considerably and quickly once I first began with it. However, after some time I realized that, because of the nature of iPython notebooks, and the necessity, or really the pleasure, of using them, I found myself many months later in the very position I was trying to avoid vis-a-vis my notes: information I needed was somewhere in my piles of notebooks, and I turned to Google more often than searching through my notebooks.</p>
<p>Now I can immerse myself in the Python project or study I am focusing on, knowing that after I’m finished, generating proper atomic notes from the work I’m doing will be a breeze. I hope that you may find this information useful. Happy coding!</p>


</section>
</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>Obsidian</category>
  <category>Python</category>
  <category>Data Science</category>
  <guid>https://biscotty.online/posts/obsidian/obsidian-jupyter/</guid>
  <pubDate>Wed, 20 Mar 2024 06:00:00 GMT</pubDate>
  <media:content url="https://biscotty.online/posts/obsidian/obsidian-jupyter/Jupyter-Obsidian.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>Obsidian and Jupyter Notebooks</title>
  <dc:creator>Brian Carey</dc:creator>
  <link>https://biscotty.online/posts/data-science/obsidian-jupyter/</link>
  <description><![CDATA[ 





<section id="obsidian-and-jupyter-notebooks" class="level1">
<h1>Obsidian and Jupyter Notebooks</h1>
<blockquote class="blockquote">
<p>Personal Knowledge Management for Data Science</p>
</blockquote>
<section id="motivation" class="level2">
<h2 class="anchored" data-anchor-id="motivation">Motivation</h2>
<p>Jupyter notebooks, or more properly iPython notebooks, are fantastic tools for data exploration and modeling. You can run bits of code, interspersed with blocks of markdown, allowing you to easily work with data and present analyses and forecasts in a visual and interactive format. Notebooks can be easily shared via GitHub, or run on-line with Colab.</p>
<p>The problem with iPython notebooks, from a Personal Knowledge Management perspective, is they end up being “books on the shelf”. For Obsidian users and PKM practitioners, the whole point is to get away from keeping information in notebooks, with all the uselessness that that implies. One could, as you will see, just do data exploration directly in Obsidian instead of in a standard iPython notebook. But Obsidian is not an IDE. The ecosystem around the interactive Python notebook IDEs, be it Jupyter Lab itself, or VS Code, etc, is so useful, that working in Obsidian while exploring data and creating models would be unacceptably tedious. Using fit-for-purpose tools is very important for efficiency.</p>
<p>We need a painless way to capture all this information in our vault, making <em>notes</em> out of the notebooks. How can we easily make this information future-useful, without repeating/duplicating our efforts or doing a ton of copy/paste? In this article, I’ll explain the solution that works well for me, ensuring Obsidian-speed access to any bits of information I have in my notebooks, as well as making review and study activities so much more pleasant. And, of course, my canvases have all gotten richer as well.</p>
</section>
<section id="setting-up-obsidian" class="level2">
<h2 class="anchored" data-anchor-id="setting-up-obsidian">Setting up Obsidian</h2>
<p>The community plugin needed to accomplish this is called <a href="https://github.com/twibiral/obsidian-execute-code">Execute Code</a>, written by Tim Wibiral together with Jupyter and a library called <code>nbconvert</code>. The latter will convert the notebooks to markdown, and the plugin allows you to execute the code directly within a note. To get started, create a virtual environment for Obsidian to use. If you aren’t using virtual environments, please start now! It’s simple, and you will avoid future problems. From the command line, do:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-p</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$HOME</span>/.config/venvs <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$_</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> venv obsidian_venv</span>
<span id="cb1-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">source</span> obsidian_venv/bin/activate</span>
<span id="cb1-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--upgrade</span> pip</span>
<span id="cb1-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install jupyterlab nbconvert </span></code></pre></div>
<p>You can install other libraries like Pandas and Matplotlib as well into the virtual environment with pip install. Jupyter lab and nbconvert will be necessary to convert the notebooks to markdown. At this point, you could launch <code>jupyter lab</code>, but there is no need to. After installing packages, you can exit the virtual environment with <code>deactivate</code>. Should you need to install more packages later, you can type <code>source $HOME/.config/venvs/obsidian_venv/bin/activate</code> to re-enter the virtual environment and <code>pip install</code> other packages.</p>
<p>In Obsidian, install the Execute Code plugin. After installing the plugin you must point it to the version of Python you want to use, in this case the one we made in the virtual environment above. In the settings for the plugin, under the language-specific settings, choose Python from the drop down list. For <em>Python Path</em>, enter <code>/home/directory/.config/venvs/obsidian_venv/bin/python</code>.</p>
<p>With that done, any code block with the keyword <code>python</code> added directly after the opening back ticks of the block can be run in the Note. In Read view, a <em>Run</em> button will appear by each code block, allowing you to execute the code in the block. After execution, there will be a <em>Clear</em> button to clear up output that you want removed from the note. Code can also be executed from Edit view by using the keyword <code>run-python</code> rather than simply <code>python</code>. The plugin offers a command to run all the code in the note, as well as a command to view and kill any active runtimes.</p>
</section>
<section id="processing-a-notebook" class="level2">
<h2 class="anchored" data-anchor-id="processing-a-notebook">Processing a notebook</h2>
<p>Jupyter Lab can export an <code>ipynb</code> file directly to markdown! As of writing, VS Code can only export to <code>py</code>, <code>pdf</code> or <code>html</code>. From the file menu, select <em>Export</em> and choose <em>Markdown</em>. This will generate a zipped archive containing a markdown page, along with any image files in the notebook. The problem with this approach is that you will find all of the image files named <code>output</code> something, and so after exporting a few notebooks, there will be name conflicts in your vault.</p>
<p>Using the command line avoids this problem, and is in any case much more efficient. You will need to activate your virtual environment with <code>source</code> as described above. Then type</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">jupyter</span> nbconvert <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--to</span> Markdown your_notebook.ipynb</span></code></pre></div>
<p>This will generate an <code>md</code> file which can be copied into your vault. If there are images from generated by the output, like graphs and other visuals, these will be put in a directory created by the above command. If you copy this directory, with all the image files into the vault directory that you use for attachments, the new <code>md</code> file will find them. (It is important to copy the directory itself and not just the files, since the new note will expect to find them there.)</p>
<p>Once in Obsidian you can process your Notebooks as any other file, breaking them into bite-size chunks of information. I rely heavily on “Extract this heading”, available with a right-click on any heading in a note. This replaces the section with a link to a newly-created note containing the section’s content. I find it useful to use a template that loads common libraries, since they will need to be added them at the top of the new files.</p>
<p>When converting your notebooks to notes, be aware that different notes do not share the same runtime. Be sure to include all the variables/calculations necessary for the part of the code you extracted in the new file, as this will not be available from another file’s state. Also, any images that you link to in the markdown sections of the original notebook will need to be manually copied into the vault, as only images generated from code in the file will be exported. ## Closing Thoughts</p>
<p>I first started using Obsidian for the specific purpose of studying data science. My use of Obsidian broadened considerably and quickly once I first began with it. However, after some time I realized that, because of the nature of iPython notebooks, and the necessity, or really the pleasure, of using them, I found myself many months later in the very position I was trying to avoid vis-a-vis my notes: information I needed was somewhere in my piles of notebooks, and I turned to Google more often than searching through my notebooks.</p>
<p>Now I can immerse myself in the Python project or study I am focusing on, knowing that after I’m finished, generating proper atomic notes from the work I’m doing will be a breeze. I hope that you may find this information useful. Happy coding!</p>


</section>
</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>Obsidian</category>
  <category>Python</category>
  <category>Data Science</category>
  <guid>https://biscotty.online/posts/data-science/obsidian-jupyter/</guid>
  <pubDate>Wed, 20 Mar 2024 06:00:00 GMT</pubDate>
  <media:content url="https://biscotty.online/posts/data-science/obsidian-jupyter/Jupyter-Obsidian.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>Obsidian Canvas Work Spaces</title>
  <dc:creator>Brian Carey</dc:creator>
  <link>https://biscotty.online/posts/obsidian/obsidian-whiteboards/</link>
  <description><![CDATA[ 





<section id="obsidian-canvas-work-spaces" class="level1">
<h1>Obsidian Canvas Work Spaces</h1>
<blockquote class="blockquote">
<p>Visual MOCery <img src="https://biscotty.online/posts/obsidian/obsidian-whiteboards/VMocery.png" class="img-fluid"></p>
</blockquote>
<section id="organization-and-productivity" class="level2">
<h2 class="anchored" data-anchor-id="organization-and-productivity">Organization and Productivity</h2>
<p>My <a href="http://biscotty.online/blogs/freeing-your-thinking-part-1">Freeing Your Thinking</a> series of articles has had a primary theme: focus on information, not files. My first articles explained how time spent organizing files into folders and naming fleeting notes is essentially wasted time. Worse, maintaining such a system is a daily drain on productivity. Even worse, you will probably decide one day that a different structure is better and, to re-arrange everything, you need to invest yet more time. And what if you want a different structure, but still maintain the current structure at the same time? You can’t do that with folders, but you can with bookmarks. With bookmarks you can build a tree of the <em>information</em>, regardless of files and file locations. Specific information is not limited to one location.</p>
<p>The point of this system is to be as productive as possible. Organization is a tool, not a goal, and should only be used if it adds value (increases productivity). I want to avoid the loss of focus and efficiency entailed in opening files and switching between notes. Time spent organizing and working with files is inefficient given the many options available in Obsidian. Time spent organizing and working with information, on the other hand, is what it’s all about.</p>
<p>In this article I’ll look at the popular Map of Content and consider it’s virtues with respect to productivity. At least as I have seen it described, I find it an unwieldy tool for working with the information in my vault. It is inefficient, steals focus, and does not promote creativity. I will propose an approach based on Canvas. With Canvas, I can construct a rich work environment for developing my knowledge on a subject, with information displayed and structured visually. From my canvas I have direct access to all of the files implicated, and don’t need to leave the canvas to review or edit them. Tasks, goals, questions, even the narrative, are on the canvas. I will post a link at the end to my repository with this example vault.</p>
</section>
<section id="maps-of-content" class="level2">
<h2 class="anchored" data-anchor-id="maps-of-content">Maps of Content</h2>
<p>The map of content is a common way of organizing notes in an Obsidian vault. The concept is flexible, and can be applied to many sorts of notes, the simplest being a note with an index-like list of links to all of the notes relating to a topic of interest. If you have been working with Freeing Your Thinking, you might have noticed the red flag in this concept: the note itself. Creating a document consisting solely or primarily of links to other documents is file-based thinking. In fact, in this system, you get such a list for free, without effort, as you will see below. Actually, there are three ways to find and access all information on the topic of interest, without creating such a list. And I do not mean with a Dataview query in a note. So making such a note is a waste of time.</p>
<p>All of my notes have a <code>topic</code> property. This takes one or more links. The <code>topic</code> does not need to exist when assigned to a note. I have notes with a type of <code>moc</code>, but they are empty of content, only containing metadata, a topic and a type. In a NoSQL database, such documents containing only metadata are merely nodes which tie the data together. Their purpose is not to hold information per se. As a result, when I finally create the actual file, I get an index for free (three actually), with the ability to inspect all of the information without opening the files.</p>
<p>Specifically, in the right sidebar I have all of the links, as well as a graph. On the left, a simple filter gives me the same information. And I rarely need to open any of these files, since I can view and edit them directly with Hover Editor.</p>
<iframe src="https://streamable.com/e/eu4pfl?autoplay=1" width="560" height="315" frameborder="0" allowfullscreen="" allow="autoplay">
</iframe>
<p>From a simple index, the next step is often to give structure to the notes, typically in a table of contents format. This process usually involves opening and reading, perhaps editing, the notes and placing them in an appropriate “location” in the MOC note. Again, this is file-based thinking. As explained before, bookmarks provide this type of organization more effectively, flexibly, and efficiently.</p>
</section>
<section id="work-spaces" class="level2">
<h2 class="anchored" data-anchor-id="work-spaces">Work Spaces</h2>
<p>Creating a traditional Map of Content does not really get you much closer to your information. The notes may be well organized, but they remain essentially closed books. And, in the format of a note, assimilation of the larger picture of a topic is difficult, and relationships are hard to visualize. Using Canvas, on the other hand, I can create a work space for each topic I’m interested in. As mentioned, the work space contains all of the reference material side by side with questions, ideas, tasks and a working document. And the canvas contains a white board where all of the information is exposed and organized.</p>
<p>This canvas-based approach to content mapping well satisfies my two criteria for evaluating a process. It maximizes my ability to focus on the information without distraction, and it is efficient as I rarely if ever, need to leave the canvas. No opening and closing of files, or remembering file names and locations.</p>
<section id="desk-area" class="level3">
<h3 class="anchored" data-anchor-id="desk-area">Desk Area</h3>
<p>At the top of the work space I have my desk area. Here I put my goals for the topic and guiding questions, as well as any tasks related to the topic. This is also where I have my developing narrative on the topic. This long form document describes the topic and may result in an essay or article…the result of my efforts pursuing the subject and a statement of my understanding.</p>
<p>The tasks are all in a file accessible in The Stacks, which I will show in a minute. Questions and goals are actually tasks, too. At the top are queries of the form</p>
<pre><code>filename includes Occitan Tasks
filter by function task.status.symbol === '!'</code></pre>
<p>Tasks may be edited directly from the queries without opening the containing file.</p>
<p>Removing extraneous information allows the eyes to focus with less effort on the meaningful information, so I have used CSS to hide the links that would normally be displayed next to the task description. This brief video shows the features of the desk area.</p>
<iframe src="https://streamable.com/e/wmvemo?autoplay=1" width="560" height="315" frameborder="0" allowfullscreen="" allow="autoplay">
</iframe>
</section>
<section id="the-stacks" class="level3">
<h3 class="anchored" data-anchor-id="the-stacks">The Stacks</h3>
<p>On the left is my reference area. Here I have various queries allowing me to process files directly from the workspace. Canvas is nice, because I can “roll up” these views and only expand them when I need them. All notes on the topic of Occitan are grouped into fleeting notes, processed notes, and actionable notes (I have an <code>action</code> property.) They are primarily used to discover information to add to the canvas.</p>
<p>This, for example, is the “Fleeting Notes” query:</p>
<pre class="dataview"><code>list
where contains(topic, [[Occitan]]) &amp; contains(type, "fleeting")</code></pre>
<p>Here is also found the Task Master, which is the note containing the tasks related to the topic. The questions, goals and tasks displayed at the top come from this note. Once a task has been added, any further editing is done directly from the views at the top of the canvas.</p>
<p>In addition, I have queries which list all of the <strong>content</strong> of all of the notes on the Occitan topic which I can scroll through. This is a very fast way to browse all my information. Most interesting, perhaps, is the view of the content of all notes which mention Occitan but are NOT linked to the MOC.</p>
<p>The query to produce this is more involved than the others. However, if you have followed along with the DataviewJS articles, most of this should be familiar. We do have a few new functions. <code>dv.io.load()</code> returns the full contents of each file. <code>split(\n\n)</code> then divides the content into blocks. (<code>\n</code> refers to a new line, and since paragraphs are separated by blank lines that gives two <code>\n</code>s.) Then <code>filter()</code> returns only the paragraphs containing the word Occitan. Taken step by step the code should be clear.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode javascript code-with-copy"><code class="sourceCode javascript"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> pagesWithTopic <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">await</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Promise</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all</span>(</span>
<span id="cb3-2">    dv</span>
<span id="cb3-3">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-[[Occitan]]"</span>)</span>
<span id="cb3-4">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span>(t <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Occitan Unlinked References"</span>)</span>
<span id="cb3-5">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span>(t <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Occitan Tasks"</span>)</span>
<span id="cb3-6">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(n <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">new</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Promise</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">async</span> (resolve<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> reject) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> {</span>
<span id="cb3-7">        <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> content <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">await</span> dv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">io</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">load</span>(n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">path</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-8">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">resolve</span>({</span>
<span id="cb3-9">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">link</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">link</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-10">            content</span>
<span id="cb3-11">        })<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-12">    }))</span>
<span id="cb3-13">)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-14"></span>
<span id="cb3-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> blocksWithTopic <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pagesWithTopic<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(({</span>
<span id="cb3-16">    link<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-17">    content</span>
<span id="cb3-18">}) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> ({</span>
<span id="cb3-19">    link<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-20">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">content</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> content</span>
<span id="cb3-21">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">split</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb3-22">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(content <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> content<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">includes</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Occitan'</span>))</span>
<span id="cb3-23">}))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-24"></span>
<span id="cb3-25">blocksWithTopic<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">forEach</span>(</span>
<span id="cb3-26">    page <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span></span>
<span id="cb3-27">    page<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">content</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">forEach</span>(</span>
<span id="cb3-28">        n <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> dv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paragraph</span>(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">`(</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>page<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">link</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">)</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n\n</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>n<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;"> `</span>)</span>
<span id="cb3-29">    )</span>
<span id="cb3-30">)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<iframe src="https://streamable.com/e/j3zzlg?autoplay=1" width="560" height="315" frameborder="0" allowfullscreen="" allow="autoplay">
</iframe>
</section>
<section id="whiteboard" class="level3">
<h3 class="anchored" data-anchor-id="whiteboard">Whiteboard</h3>
<p>At some point in every crime procedural television show they wheel out the white boards and start pinning up information, making annotations and drawing links. Items of interest are removed from their file and put up in plain site, with the information clearly exposed. There are all of the photographs, news clippings, maps and highlighted sections of documents, supplemented with commentary and lines connecting the information. The important thing here is that relevant information is clearly displayed, and no effort is needed to view it. Information is grouped visually with connections between specific information indicated by the lines.</p>
<p>The investigators make these boards because they provide a useful way to explore a subject, ask and answer questions, identify gaps in knowledge, and ultimately construct a narrative around the information. Obsidian’s Canvas allows me to do exactly the same thing, exposing my information and allowing me to arrange and re-arrange it as I work through it in my mind. As I add to the canvas, I can easily add the views to my information tree as well, giving logical structure to the visual structure.</p>
<p>Here is an overview of my workspace for the topic of the Occitan language, one I am only starting to explore.</p>
<iframe src="https://streamable.com/e/9eytfl?autoplay=1" width="560" height="315" frameborder="0" allowfullscreen="" allow="autoplay">
</iframe>
</section>
</section>
<section id="final-thoughts" class="level2">
<h2 class="anchored" data-anchor-id="final-thoughts">Final Thoughts</h2>
<p>Obsidian is a powerful tool, but the functionality it offers is often overlooked and/or underused. Rather than treating it as essentially a file editor and approaching it the way one would a word processor, think of it as both an information repository and a collection of tools to access and develop the information. Views on a canvas are much more intellectually stimulating than links, or even embeds, in a file.</p>
<p>The contents used for this article are available for download from my <a href="https://github.com/biscotty666/Obsidian-Canvas-Workspaces">GitHub</a>. If you find this content useful, please consider <a href="https://www.paypal.com/donate/?business=3Y2MGAU7LYQBJ&amp;no_recurring=0&amp;item_name=I+you+have+found+my+content+useful+please+consider+a+donation+to+support+future+work.&amp;currency_code=USD">making a donation</a> to support future work.</p>


</section>
</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>Obsidian</category>
  <guid>https://biscotty.online/posts/obsidian/obsidian-whiteboards/</guid>
  <pubDate>Sat, 20 Jan 2024 07:00:00 GMT</pubDate>
  <media:content url="https://biscotty.online/posts/obsidian/obsidian-whiteboards/VMocery.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>Git and GitHub for Obsidian Users</title>
  <dc:creator>Brian Carey</dc:creator>
  <link>https://biscotty.online/posts/obsidian/git-github-obsidian/</link>
  <description><![CDATA[ 





<section id="git-and-github-for-obsidian-users" class="level1">
<h1>Git and GitHub for Obsidian Users</h1>
<p>I’ve been doing some repair work around my house recently and have been reflecting on how important the choice of tools are in making a project go quickly and smoothly. More specifically, I’ve been thinking about how important it is to choose a tool designed for a specific purpose rather than a general purpose one. For example, while you can screw a nut on a bolt with vise grips, you’re much better off using ratchet wrench which is designed for that specific purpose. It is faster, easier, and less likely to do damage to the nut.</p>
<p>I’ve been seeing quite a few articles about git and GitHub in the context of backups and synchronization. In this article I would like to explain exactly what they are and why they are not good tools to use for backing up or synchronizing an Obsidian vault. I will then propose best-of-class solutions for these needs. At the end, I will show how git and GitHub can, in fact, be useful for some special purposes. ## Git</p>
<p>Git is a version control system designed for collaborative software development. Using git, developers are able to manage a project’s code base throughout development cycles, allowing multiple authors to contribute code to a single project, everyone keeping up to date with the latest version. It allows for maintaining separate branches for production and development, branches for features, and branches for each developer. The various branches can be <em>merged</em> as they are completed, and thereby update the production or main development branch.</p>
<p>If you are wondering how any of this relates to Obsidian, which is not a software development project and does not typically have multiple contributors, well, it doesn’t, which is kind of my point. It’s a vice grips solution for Obsidian.</p>
<p>Its design is clever, though, and worth taking a moment to understand. The information generated by git is stored in a <em>repository</em>. A repository is simply a hidden directory created in the main directory of your project, or in this case, your vault. The repository itself keeps track of <em>commits</em>. A commit is a file which describes exactly what files have been added, removed, or edited since the last commit. In the case of edits, it keeps track of the specific changes made to each file by tracking changes to each line. The changes are combined with information such as the author of the change and a description of what was changed, and this becomes a new commit. The granularity allows for identifying specific lines which introduced bugs. They can then “re-set” the project to the prior, bug-free state while someone fixes the bug, or to a point where a deleted file still existed.</p>
<p>Before moving on, I will just point out that the git repository has nothing to do with GitHub. It’s just a hidden directory on your local file system.</p>
<section id="github" class="level2">
<h2 class="anchored" data-anchor-id="github">GitHub</h2>
<p>At it’s core, GitHub is service like Dropbox which provides cloud storage. But there are important differences. It was specifically created to promote sharing of code and collaboration among software developers. As such, you can have as many free <strong>public</strong> repositories as you want, but need to pay for private ones. A limitation of GitHub is file size. There is a maximum size of 100 MB per file. This is not a problem for most people, but should you have any videos in your vault, for example, you will not be able to use GitHub at all. In any case, unless you need tools provided by GitHub, you might just as well copy your directory, or your local git repository, to Dropbox instead of pushing to GitHub.</p>
<p>In addition to storage, GitHub provides a whole suite of tools which developers can use to design automated workflows and even deploy projects directly from GitHub. None of this really applies to Obsidian either, with potential exceptions which I’ll describe below.</p>
</section>
<section id="synchronization" class="level2">
<h2 class="anchored" data-anchor-id="synchronization">Synchronization</h2>
<p>As we have seen, GitHub is designed for keeping multiple developers and project branches in sync, so it might seem to appropriate for keeping Obsidian vaults in sync. But, since there is only one author and only one branch, it is overkill at the very least. A developer pulls to see what <em>others</em> have done and pushes to share their work…neither relevant for Obsidian.</p>
<p>But my main objection is practical. Using GitHub requires manual interactions be performed every time you switch devices, namely a pull and a push to GitHub. Ideally, synchronization across devices should be automatic, instantaneous and real time. I wrote an article on synchronizing your vault across different devices using a tool called Syncthing. It is a free, fit for purpose tool which uses direct, device-to-device synchronization, requiring no intervention, and changes are immediately reflected across all devices. ## Backups Be honest: do you back up your computer regularly? If you are like the majority of people the answer is no. Given the number of articles I’ve seen on solutions for backing up vaults I can only conclude that many Obsidian users, like others, don’t have a regular backup system, because, if you are backing up your computer, you are backing up your vault. Obsidian is just another directory, and doesn’t need anything special. If you already perform regular backups, and have tested file recovery, then you don’t need to read the next bit…unless you are using GitHub for your backups.</p>
<p>To understand why GitHub should not be used to back up your vault, consider the main features required for a good backup system:</p>
<ul>
<li><p>Ease of recovery - even people who actually do backups often do not test how quickly and easily it is to restore files from the backups. Ideally, you should be able to navigate through backed up files and directories just like ordinary ones, and then simply copy what you want. Recovering lost or old versions of files is possible using git, but the process is much more cumbersome.</p></li>
<li><p>Rotation of daily, weekly, monthly backups - a good backup system will automatically rotate your backups, removing unnecessary versions as they age and new ones are made. That way you can find something from two days, two weeks, two months or two years ago. Git provide no such functionality.</p></li>
<li><p>Speed and Space efficiency - over time, the amount of data you need to back up can be many gigabytes, especially if you have videos or many images. When you do a backup, the tool must check for changes across the entire directory, so it needs to be fast. At any point, you will have dozens of backups each representing a snapshot in time. In order to maintain so many “copies”, the system must be efficient in compressing the information. With git and GitHub there is no compression except for during file transfer.</p></li>
<li><p>Off-site backups - Best practice for backups means storing at least one copy of your backups in a different physical location. This could be a cloud server. A good tool should make off-site backups just as easy as on-site backups. GitHub does fulfill this requirement.</p></li>
</ul>
<p>The best backup system around is called Restic. It is free, open source, cross-platform, and can be easily managed with a few simple commands. Most importantly, it is blazing fast, and creates surprisingly small repositories. This is basically because it breaks up your files into variable-length <em>blobs</em>, or chunks of bytes. I will explain the details in a subsequent article. ## Sharing - use cases for git and GitHub</p>
<p>I have found some very good use cases for git and GitHub. They involve sharing content of my vault. Before describing them, let me point out that sharing of vault content should generally only be one way. Obsidian is not meant to be a collaborative tool. So you, and only you, control what goes into your vault.</p>
<section id="presentation" class="level3">
<h3 class="anchored" data-anchor-id="presentation">Presentation</h3>
<p>Git, and especially GitHub itself, are convenient for creating live, interactive presentations from content in my vault. I can create a formal presentation using the Advanced Slides plugin, or just make a section of my vault with specific content and put that part on GitHub. GitHub allows others to browse the vault or view the presentation on-line. Alternatively, they can download the content, open it locally with Obsidian, or simply copy it into their own vault.</p>
<p>In the context of a presentation, git itself is useful, because a presentation is a product. Like any product, version control is useful. A presentation can change and evolve. Sometimes one wants to see something from a prior iteration of a project, and git makes this simple. In other words, presentations have versions.</p>
<p>I’ll give some tips on the mechanics of how to do this at the end, but it’s simply a matter of collecting all the necessary files, including attachments, in a sub-directory of my vault. I copy this directory to a different location, open it as a vault and enable necessary plugins. GitHub can directly serve HTML files, so I convert the entire new vault to HTML with the Webpage HTML Export plugin. I create a <code>README.md</code> with some sort of linked table of contents or at least a link to enter the html files. With that done, I can just push to GitHub, and everything goes live in minutes on a url GitHub creates for me.</p>
<p>At this point I can make the presentation and the the audience can follow along on their own computers and engage with the content, either on-line or locally by downloading the vault from GitHub. If they happen to be Obsidian users, they could also copy the files into their own vault to further interact with the material.</p>
</section>
<section id="class-management" class="level3">
<h3 class="anchored" data-anchor-id="class-management">Class Management</h3>
<p>As a teacher, it didn’t take long to consider how Obsidian might be used in the classroom. The idea of making and distributing course content which is easily navigable, visually interesting, and incorporates multi-media, graphs and charts, and external resources is very attractive. Sharing of content can be done the same way as the presentation above, and students could get it either “live” or by making their own copy.</p>
<p>But, as I do go on about, Obsidian is a database too, so why not push this a step further, and run the whole course with Obsidian, including design, distribution of materials, receiving assignments from students, applying rubrics if appropriate, grading and evaluations. This sounds like a project, and git and GitHub are perfect for this use. In addition to facilitating the distribution of the course materials, you can update the materials from time to time, and students will always have access to the latest version. I segregate the course into a <code>public/</code> and <code>private/</code> directory, and only push <code>public/</code> to GitHub. All completed work, grades, evaluations, and any identifying material is kept confidential. Students can submit their responses by emailing the single note, which I simply place in the <code>private/</code> directory. The Properties take care of everything else (except the actual grading).</p>
<p>This is obviously a more complex example, involving metadata (properties), Dataview, and various templates to provide the metadata and compile grades. A full description would take too long for this article, but I intend to write a detailed article with a sample vault in the near future.</p>
</section>
</section>
<section id="usage-of-git-and-github" class="level2">
<h2 class="anchored" data-anchor-id="usage-of-git-and-github">Usage of git and GitHub</h2>
<p>This article is already long, so I can’t go into details about using git and GitHub, but I want to show how simple it is for this purpose. You need to install git itself, and I use another program called <em>gh</em> (the GitHub Client), which allows me to manage everything from the command line. With these installed and a free GitHub account, all I need to do is create the repository locally with the command <code>git init</code>. I then create the repository on GitHub itself with</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">gh</span> repo create my-vault-name <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--public</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--source</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>. <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--remote</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>upstream<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">`</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">.</span></span></code></pre></div>
<p>After that, whenever I add, delete or change content, I just do</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> add .</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> commit <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Some message"</span></span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> push</span></code></pre></div>
<p>On the GitHub website, under the Settings menu there is a Pages option. Simply go there and you can deploy your vault (with HTML rendered) with a couple of clicks. It will provide you with a live URL, where the content will be kept up to date every time you <code>push</code>.</p>
<p>That’s all there is to it.</p>


</section>
</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>Obsidian</category>
  <category>Linux</category>
  <guid>https://biscotty.online/posts/obsidian/git-github-obsidian/</guid>
  <pubDate>Fri, 19 Jan 2024 07:00:00 GMT</pubDate>
  <media:content url="https://biscotty.online/posts/obsidian/git-github-obsidian/tn-metadata-menu.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>Summarizing Information with DataviewJS</title>
  <dc:creator>Brian Carey</dc:creator>
  <link>https://biscotty.online/posts/obsidian/dataview/dataviewjs-interactive-dynamic-tables/</link>
  <description><![CDATA[ 





<section id="summarizing-information-with-dataviewjs" class="level1">
<h1>Summarizing Information with DataviewJS</h1>
<p><img src="https://biscotty.online/posts/obsidian/dataview/dataviewjs-interactive-dynamic-tables/djs-db-exc.png" class="img-fluid"></p>
<p>This article follows up on <a href="https://biscotty.online/blogs/gentle-introduction-to-dataviewjs">earlier articles</a> in which I showed how to create interactive tables which are automatically updated and can be edited directly in the table. This article will describe how to create summary statistics for data. The statistics on the dashboard update based on the current day.</p>
<p>As you can see, I’ve done a bit of rearranging since the last article to make things even more readable. The statistics tables have been re-sized and reformatted for a cleaner display, and I’ve added more information. There are still some tweaks I want to do, but this is a very useful dashboard.</p>
<p>A quick comment on canvases: since I started working on canvases it’s hard to go back to the 80 characters wide format of a note. Sure, when I’m writing an article or focusing on a bit of code, that format feels very natural. But when doing pretty much anything else, well, it’s just nice to be able to spread out, and not have to open and close files, or page up and down through documents. Using a canvas is like putting all of your current work on your desk, with everything open to the pages you are interested in. In a future article I will show how a dashboard can be used in place of a Daily Note to manage your day.</p>
<p>Here is the table I will show how to create in this article. As before, you can just skip to the bottom and grab the code if you want. This article explains everything rather thoroughly and introduces some general programming concepts. I think that, if you spend a little time with the material you will find that it is not, as they say, rocket science.</p>
<p><img src="https://biscotty.online/posts/obsidian/dataview/dataviewjs-interactive-dynamic-tables/djs-db-stats.png" class="img-fluid"></p>
<p>That’s 22 numbers to calculate! The process isn’t too complicated, but we need to keep track of a lot of things. To avoid a lot of repetition, we will create some custom functions, and you need to learn how to “push” lists into lists.</p>
<p>Let’s start by writing down what we need to do.</p>
<ul>
<li>Create the data sets
<ul>
<li>Get the logs for current and prior periods</li>
<li>Separate by activity</li>
</ul></li>
<li>Make a variable and calculate each statistic for current and prior periods
<ul>
<li>distance for each activity and total (6 total)</li>
<li>duration for each activity and total (6 total)</li>
<li>speed for each activity (4 total)</li>
<li>counts for each activity (6 total)</li>
</ul></li>
<li>Generate the output
<ul>
<li>Create the tables’ headers</li>
<li>Generate the table rows</li>
<li>Create headers for the with workout totals</li>
<li>Display the tables with header elements</li>
</ul></li>
</ul>
<section id="the-data" class="level2">
<h2 class="anchored" data-anchor-id="the-data">The data</h2>
<p>First, let’s grab the data for the current and prior seven day periods. In the last article I showed how to get the current period. Did you figure out how to get the prior period? One way is to first take the data from the last 14 days, and then remove the most recent 7 days. So we’ll do it like this:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> priorPages <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pages</span>() </span>
<span id="cb1-2">                    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span>(b <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"log"</span>)</span>
<span id="cb1-3">                    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span>(b <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ActivityDate</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">moment</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subtract</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"days"</span>))</span>
<span id="cb1-4">                    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span>(b <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ActivityDate</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">moment</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subtract</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"days"</span>)) </span></code></pre></div>
<p>Create the <code>currentPages</code> data set as well. Then each needs to be separated by walking and biking. You can do it like this:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> currentWalkPages <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> currentPages</span>
<span id="cb2-2">                    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span>(b <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Activity</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"🚶"</span>)</span></code></pre></div>
<p>Go ahead and create the rest of the datasets. You need <code>currentBikePages</code>, <code>priorWalkPages</code> and <code>priorBikePages</code>.</p>
</section>
<section id="calculations" class="level2">
<h2 class="anchored" data-anchor-id="calculations">Calculations</h2>
<p>Good programming involves avoiding repetitive tasks. Whenever you need to do the same thing more than once or twice, the standard practice is to make a function.</p>
<section id="functions" class="level3">
<h3 class="anchored" data-anchor-id="functions">Functions</h3>
<p>Here is an example of a function we can use. It is arguably overkill to make this a function, but it will provide a good example. A function starts with the keyword <code>function</code> followed by the name you want to use. The name is followed by parentheses which are required, but may be empty. They are used to pass arguments to the function. The function itself is then placed in curly braces. After the function does it’s work, it needs to <code>return</code> some value.</p>
<p>I have a bunch of numbers in minutes which I want to convert to hours. This is just a matter of dividing by 60 of course, but I also want to round off to one decimal. There is a function <code>toFixed()</code> which can be used on strings. It takes one argument, the number of decimal places you want to round it to. This is the function:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toHours</span> (time) {</span>
<span id="cb3-2"> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> (time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toFixed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-3">}</span></code></pre></div>
<p>and I use it like this.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> totalCurrentTime <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toHours</span>( <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sumStat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"duration"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> pages) )</span></code></pre></div>
<p>Of course, I haven’t created <code>sumStat()</code> yet. To calculate the sum there is a JavaScript function called <code>reduce()</code>. It is used like this:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reduce</span>(</span>
<span id="cb5-2">    (sum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> b) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> sum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Distance</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-3">     <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb5-4">)</span></code></pre></div>
<p>The syntax looks a little complicated, but it’s not so bad if you break it down. <code>reduce()</code> takes two arguments. The first argument is <code>(sum, b) =&gt; sum + b.Distance</code>, which is itself a function with two arguments. The second argument here is our old friend <code>b</code>. In this case, we also need temporary variable called an <em>accumulator</em>. The name of this variable is arbitrary, like <code>b</code>. <code>reduce()</code> will go through each log, adding the value of the <code>Distance</code> field to the accumulator. The second argument to <code>reduce()</code> is just the initial value for the accumulator, which is almost always 0.</p>
<p>Now I can write the function like this</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sumStat</span> (stat<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> thePages) {</span>
<span id="cb6-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> pageValues <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> thePages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values</span></span>
<span id="cb6-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (stat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"duration"</span>) {</span>
<span id="cb6-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> pageValues</span>
<span id="cb6-5">          <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reduce</span>((sum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> b) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> sum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Duration</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb6-6">    }</span>
<span id="cb6-7">    </span>
<span id="cb6-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (stat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"distance"</span>) {</span>
<span id="cb6-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> pageValues</span>
<span id="cb6-10">          <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reduce</span>((sum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> b) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> sum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Distance</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb6-11">    }</span>
<span id="cb6-12">}</span></code></pre></div>
<p>I didn’t want to write two separate functions for calculating the sums, instead I use a <em>conditional</em> <code>if</code> statement, which works as you might expect. Notice a few things about this. First, <code>pageValues</code> just saves us adding <code>.values</code> to each <code>if</code> statement. <code>if</code> statements require a condition in parentheses. It must be something that evaluates to a <em>boolean</em> value (true or false, remember). Then, as usual, the block of code you want to execute must be in curly braces. Finally, you almost always want to <code>return</code> something. Once you hit a <code>return</code> statement, nothing else gets executed in the function.</p>
</section>
<section id="maths" class="level3">
<h3 class="anchored" data-anchor-id="maths">Maths</h3>
<p>Now we can create all of our time and distance variables like this:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> totalCurrentTime <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toHours</span>( <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sumStat</span>( <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"duration"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> currentPages ) )</span>
<span id="cb7-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> totalCurrentDistance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sumStat</span>( <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"distance"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> currentPages )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toFixed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<p>Speed is just distance over time, so.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> currentWalkSpeed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb8-2">    totalCurrentWalkDistance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> totalCurrentWalkTime</span>
<span id="cb8-3">    )</span>
<span id="cb8-4">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toFixed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<p>Notice that I specified to round to one decimal point. To find the total number of workouts it is necessary merely to count the number of pages in each category, since each represents one workout. <code>pages()</code> is a list, or array. Arrays all have an attribute/property called <code>length</code>. So to count all workouts in the last seven days I can just write <code>const currentCount = currentPages.length</code>.</p>
<p>Everything else is just repetition, since we need 22 values at the end of the day. Any repetitive activity cries out for a new function to encapsulate this repetition, but I’ll leave that for another day. (This is called <em>refactoring</em>.)</p>
</section>
</section>
<section id="generate-the-output" class="level2">
<h2 class="anchored" data-anchor-id="generate-the-output">Generate the output</h2>
<p>The tables from the last article used a <code>dv.pages()</code> object for the table rows. This time I need to create each table row myself. Each table row is itself a list. So I need a list of lists. It is easy to do this with the <code>push()</code> command, which just adds an item to a list. The item being added can be anything, including a list. I will build the table rows like this:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript"><span id="cb9-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> rows <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb9-2">rows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">push</span>([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Miles"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> totalCurrentDistance<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> totalPriorDistance])</span></code></pre></div>
<p>I have to <em>initialize</em> the variable, because I can’t <code>push</code> anything onto a non-existent list. I used <code>let</code> instead of <code>const</code>. The difference is that a <code>const</code> variable cannot change after it has been created, while one declared with <code>var</code> can. (In older code you will see <code>var</code> instead of <code>let</code>. This still works but <code>let</code> is preferred.)</p>
<p>So all that remains is to <code>push</code> each row of the table into the <code>rows</code> variable, create the <code>headers</code> for the table, and use <code>dv.table()</code> to display it. The final code is at the bottom. I strongly suggest, having reached this point, that you try to do this on your own and don’t simply copy and paste my code.</p>
</section>
<section id="final-thoughts" class="level2">
<h2 class="anchored" data-anchor-id="final-thoughts">Final thoughts</h2>
<p>If you read through both articles, congratulations. Give yourself a pat on the back. You are doing object-oriented programming in the most widely-used language on the internet. And you have all of the knowledge you need to create rich, useful dashboards.</p>
<p>Happy coding!</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Create data sets  */</span></span>
<span id="cb10-2"></span>
<span id="cb10-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> currentPages <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pages</span>() </span>
<span id="cb10-4">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span>(b <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"log"</span>)</span>
<span id="cb10-5">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span>(b <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ActivityDate</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">moment</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subtract</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"days"</span>))</span>
<span id="cb10-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> priorPages <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pages</span>() </span>
<span id="cb10-7">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span>(b <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"log"</span>)</span>
<span id="cb10-8">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span>(b <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ActivityDate</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">moment</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subtract</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"days"</span>))</span>
<span id="cb10-9">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span>(b <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ActivityDate</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">moment</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subtract</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"days"</span>)) </span>
<span id="cb10-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> currentWalkPages <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> currentPages</span>
<span id="cb10-11">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span>(b <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Activity</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"🚶"</span>)</span>
<span id="cb10-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> currentBikePages <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> currentPages</span>
<span id="cb10-13">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span>(b <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Activity</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"🚴"</span>)</span>
<span id="cb10-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> priorWalkPages <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> priorPages</span>
<span id="cb10-15">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span>(b <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Activity</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"🚶"</span>)</span>
<span id="cb10-16"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> priorBikePages <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> priorPages</span>
<span id="cb10-17">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span>(b <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Activity</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"🚴"</span>)</span>
<span id="cb10-18"></span>
<span id="cb10-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Function to sum the distances, duration */</span></span>
<span id="cb10-20"></span>
<span id="cb10-21"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sumStat</span> (stat<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> thePages) {</span>
<span id="cb10-22">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> pageValues <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> thePages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values</span></span>
<span id="cb10-23">    </span>
<span id="cb10-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (stat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"duration"</span>) {</span>
<span id="cb10-25">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> pageValues</span>
<span id="cb10-26">          <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reduce</span>((sum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> b) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> sum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Duration</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb10-27">    }</span>
<span id="cb10-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (stat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"distance"</span>) {</span>
<span id="cb10-29">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> pageValues</span>
<span id="cb10-30">          <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reduce</span>((sum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> b) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> sum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Distance</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb10-31">    }</span>
<span id="cb10-32">}</span>
<span id="cb10-33"></span>
<span id="cb10-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Function to convert minutes to hours */</span></span>
<span id="cb10-35"></span>
<span id="cb10-36"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toHours</span> (time) {</span>
<span id="cb10-37"> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> (time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toFixed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb10-38">}</span>
<span id="cb10-39"></span>
<span id="cb10-40"></span>
<span id="cb10-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Calculate the distances (6 values) */</span></span>
<span id="cb10-42"></span>
<span id="cb10-43"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> totalCurrentDistance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sumStat</span>( <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"distance"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> currentPages )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toFixed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb10-44"></span>
<span id="cb10-45"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> totalCurrentWalkDistance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sumStat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"distance"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>currentWalkPages)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toFixed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb10-46"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> totalCurrentBikeDistance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sumStat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"distance"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> currentBikePages)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toFixed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb10-47"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> totalPriorDistance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sumStat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"distance"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>priorPages)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toFixed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb10-48"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> totalPriorWalkDistance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sumStat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"distance"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>priorWalkPages)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toFixed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb10-49"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> totalPriorBikeDistance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sumStat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"distance"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>priorBikePages)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toFixed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb10-50"></span>
<span id="cb10-51"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Calculate the durations (6 values) */</span></span>
<span id="cb10-52"></span>
<span id="cb10-53"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> totalCurrentTime <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toHours</span>( <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sumStat</span>( <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"duration"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> currentPages ) )</span>
<span id="cb10-54"></span>
<span id="cb10-55"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> totalCurrentWalkTime <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toHours</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sumStat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"duration"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>currentWalkPages))</span>
<span id="cb10-56"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> totalCurrentBikeTime <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toHours</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sumStat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"duration"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>currentBikePages))</span>
<span id="cb10-57"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> totalPriorTime <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toHours</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sumStat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"duration"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>priorPages))</span>
<span id="cb10-58"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> totalPriorWalkTime <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toHours</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sumStat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"duration"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>priorWalkPages))</span>
<span id="cb10-59"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> totalPriorBikeTime <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toHours</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sumStat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"duration"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>priorBikePages))</span>
<span id="cb10-60"></span>
<span id="cb10-61"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Calculate the speed (4 values) */</span></span>
<span id="cb10-62"></span>
<span id="cb10-63"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> currentWalkSpeed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (totalCurrentWalkDistance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> totalCurrentWalkTime)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toFixed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb10-64"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> priorWalkSpeed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (totalPriorWalkDistance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> totalPriorWalkTime)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toFixed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb10-65"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> currentBikeSpeed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (totalCurrentBikeDistance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> totalCurrentBikeTime)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toFixed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb10-66"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> priorBikeSpeed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (totalPriorBikeDistance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> totalPriorBikeTime)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toFixed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb10-67"></span>
<span id="cb10-68"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Count the workouts */</span></span>
<span id="cb10-69"></span>
<span id="cb10-70"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> currentCount <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> currentPages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length</span></span>
<span id="cb10-71"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> priorCount <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> priorPages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length</span></span>
<span id="cb10-72"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> currentBikeCount <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> currentBikePages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length</span></span>
<span id="cb10-73"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> priorBikeCount <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> priorBikePages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length</span></span>
<span id="cb10-74"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> currentWalkCount <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> currentWalkPages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length</span></span>
<span id="cb10-75"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> priorWalkCount <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> priorWalkPages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length</span></span>
<span id="cb10-76"></span>
<span id="cb10-77"></span>
<span id="cb10-78"></span>
<span id="cb10-79"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Create an array (list) and add the table rows</span></span>
<span id="cb10-80"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">   The first table displays the distance and duration */</span></span>
<span id="cb10-81">   </span>
<span id="cb10-82"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> rows <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb10-83">rows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">push</span>([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Miles"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> totalCurrentDistance<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> totalPriorDistance])</span>
<span id="cb10-84">rows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">push</span>([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"🚶"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> totalCurrentWalkDistance<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> totalPriorWalkDistance])</span>
<span id="cb10-85">rows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">push</span>([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"🚴"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> totalCurrentBikeDistance<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> totalPriorBikeDistance])</span>
<span id="cb10-86">rows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">push</span>([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>])</span>
<span id="cb10-87">rows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">push</span>([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hours"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> totalCurrentTime<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> totalPriorTime])</span>
<span id="cb10-88">rows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">push</span>([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"🚶"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> totalCurrentWalkTime<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> totalPriorWalkTime])</span>
<span id="cb10-89">rows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">push</span>([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"🚴"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> totalCurrentBikeTime<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> totalPriorBikeTime])</span>
<span id="cb10-90">rows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">push</span>([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>])</span>
<span id="cb10-91">rows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">push</span>([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Speed (m/h)"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>])</span>
<span id="cb10-92">rows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">push</span>([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"🚶"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> currentWalkSpeed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> priorWalkSpeed])</span>
<span id="cb10-93">rows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">push</span>([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"🚴"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> currentBikeSpeed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> priorBikeSpeed])</span>
<span id="cb10-94">rows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">push</span>([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>])</span>
<span id="cb10-95">rows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">push</span>([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Workouts"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> currentCount<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> priorCount])</span>
<span id="cb10-96">rows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">push</span>([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"🚶"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> currentWalkCount<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> priorWalkCount])</span>
<span id="cb10-97">rows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">push</span>([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"🚴"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> currentBikeCount<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> priorBikeCount])</span>
<span id="cb10-98"></span>
<span id="cb10-99"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Create the table header */</span></span>
<span id="cb10-100"></span>
<span id="cb10-101"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> tableHeader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Current"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Prior"</span>]</span>
<span id="cb10-102"></span>
<span id="cb10-103"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Display the table */</span></span>
<span id="cb10-104"></span>
<span id="cb10-105">dv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">header</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"7 Day Stats"</span>)</span>
<span id="cb10-106">dv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">table</span>(tableHeader<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> rows)</span></code></pre></div>


</section>
</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>Javascript</category>
  <category>Obsidian</category>
  <category>PKM</category>
  <category>DataviewJS</category>
  <guid>https://biscotty.online/posts/obsidian/dataview/dataviewjs-interactive-dynamic-tables/</guid>
  <pubDate>Mon, 16 Oct 2023 06:00:00 GMT</pubDate>
  <media:content url="https://biscotty.online/posts/obsidian/dataview/dataviewjs-interactive-dynamic-tables/djs-db-exc.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>Interactive Tables with DataviewJS</title>
  <dc:creator>Brian Carey</dc:creator>
  <link>https://biscotty.online/posts/obsidian/dataview/dataviewjs-summaries-statistics/</link>
  <description><![CDATA[ 





<section id="interactive-tables-with-dataviewjs" class="level1">
<h1>Interactive Tables with DataviewJS</h1>
<p><img src="https://biscotty.online/posts/obsidian/dataview/dataviewjs-summaries-statistics/djs-exercise-dashboard.png" class="img-fluid"></p>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>This article is a follow-up to my <a href="http://biscotty.online/blogs/obsidian/dataview/gentle-introduction-to-dataviewjs">Gentle Introduction to DataviewJS</a> articles, and assumes that you have read them. It is written for anglers, but if you just want the fish you can Tldr; your way to the bottom an just grab the code. Even if you are here to learn how to fish, depending on your learning style, you may want to take a look at the complete code first before this walk-through.</p>
<p>We are now ready to start building a fully dynamic and interactive dashboard to manage the exercise logs. In this case, I’m tracking the following:</p>
<ul>
<li>type of activity</li>
<li>distance</li>
<li>duration</li>
<li>date of activity</li>
<li>route</li>
</ul>
<p>I have optional fields for notes and, as you can see, for images. Summary tables are generated using calculated values. The entire canvas updates automatically to the current day.</p>
<p>This example could easily be extended for tracking anything which includes numerical data and images. Imagine a research project, for example, where observations are taken combining numerical data, textual observations, and photos. Actually creating the log entries, thanks to Metadata Menu and Unique Notes, takes almost no time. You can read about how to do this here.</p>
<p>In this article, I’ll focus on creating this dynamic table.</p>
<p><img src="https://biscotty.online/posts/obsidian/dataview/dataviewjs-summaries-statistics/djs-d-cv.png" class="img-fluid"></p>
<p>Appropriate widgets are provided allowing for direct editing or the use of popup modals for multi-select fields and dates. The list will display all logs over the last 7 days, so different logs will appear depending on the day.</p>
<p>To do this, we will use the excellent JavaScript functionality provided by Metadata Menu. It would be more interesting were you to create a bunch of logs (notes) covering a date range of at least three months and follow along. They should all contain the following fields:</p>
<ul>
<li>topic</li>
<li>type</li>
<li>Route</li>
<li>Activity</li>
<li>Duration</li>
<li>Distance</li>
<li>Note</li>
<li>Image</li>
<li>Link</li>
</ul>
</section>
<section id="time-math" class="level2">
<h2 class="anchored" data-anchor-id="time-math">Time Math</h2>
<p>Throughout this dashboard I work with time. It is natural to want to look at time periods of weeks and months, and to compare current periods to prior periods of the same length. We, just as naturally, compare a week starting Monday or Sunday to a prior week starting on the same day. And we compare February to January. This is often a good thing, because it fits the way people naturally think.</p>
<p>But if you are really looking at the numbers, you quickly see the flaw in comparing time periods this way. You can’t compare a <strong>complete</strong> week to the prior week until the end of the week. To get around this, people use week-to-date, or quite commonly month-to-date. For months the problem is worse, as in the case of Feb/Jan comparison that’s 28 days compared to 31 days. That’s more than a 10% difference in days, and therefor in data!</p>
<p>A simple way around this, and one which provides better analysis, is to use rolling windows of time. Any seven day period contains every day of the week, and so comparing two of any such periods valid (and complete) week-to-week comparisons. For months, you can compare any 30 (or 28) day period to the prior period of equal length, so you get a full, month-long picture with apples-to-apples data (that’s a technical term😉).</p>
<p>In the first article I introduced <code>moment()</code>, an object provided by Dataview (by MomentJS actually). This makes time math easy. <code>moment()</code> itself means today, now, this very second. If you want the date/time two days ago, you can subtract two days with <code>moment().subtract(2, "days")</code>. I’ll leave it as an exercise to the reader to figure out how to find the date two months ago.</p>
<p>In order to use <code>moment()</code> for any date other than now, you need to write, eg., <code>moment(new Date("2023-10-20")</code>. We will do this so that we can format the date differently using the <code>format()</code> function in <code>moment()</code>. <code>format()</code> wants an argument, a date format string. I don’t need to see the year, and a 2-digit month is fine and shorter. On the other hand, seeing the day of the week would be useful. The format string to produce “10/10 Tue” is “MM/DD ddd”. ### Challenge As an exercise, you might pause here and think about how to display “two days ago” in the format “10/10 Tue”. You have all the knowledge you need. Think about chaining commands together with the period. ### Solution</p>
<p>Here is a solution:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> dateFormat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MM/DD ddd"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> twoDaysAgo <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">moment</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subtract</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"days"</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">format</span>(dateFormat)</span>
<span id="cb1-3"></span>
<span id="cb1-4">dv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paragraph</span>(twoDaysAgo)</span></code></pre></div>
<p>When writing, and especially reading, code, formatting is important. I could have written</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> twoDaysAgo <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">moment</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subtract</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"days"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">format</span>(dateFormat)</span></code></pre></div>
<p>but it is much less clear what is going on. If you are trying to understand a piece of code, start by reformatting. ## Asynchronous Functions</p>
<p>Most computer programs execute line by line, with each line completing before moving on to the next line. Normally this is what you want. However, as the quantity of data commonly worked with increases geometrically, and the fact that it is often distributed widely across the internet, applications which require <em>fetching</em> data can easily grind to a halt due to a slow internet connection, slow servers, large quantities, etc. To overcome this problems, some functions are executed <em>asynchronously</em>. When an asynchronous function is executed, it doesn’t return the actual data. Instead, it returns what is called a <em>promise</em>. That allows the program to continue executing while the data is being fetched. It will continue execution until the data is actually required, at which point it will wait (not freeze).</p>
<p>In practice this is quite easy, involving the use of two new key words: <code>async</code> and <code>await</code>. The first, <code>async</code>, is added to the function definition, and the second, <code>await</code>, is added before any data fetching. That’s all you need to know so that you will understand the words when you see them.</p>
</section>
<section id="metadata-menu" class="level2">
<h2 class="anchored" data-anchor-id="metadata-menu">Metadata Menu</h2>
<p>Metadata Menu provides an asynchronous function for making the tables interactive. To use the function, you must import it with</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode fs code-with-copy"><code class="sourceCode fsharp"><span id="cb3-1">const <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>fieldModifier: f<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> = this.app.plugins.plugins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"metadata-menu"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>.api</span></code></pre></div>
<p>Using the curly braces like this is called deconstructing a variable or function. This means that somewhere there is a function called <code>fieldModifier</code>. The <code>: f</code> is just an alias, so that every time you use the function you don’t need to write out <code>fieldModifier</code>, you can just write <code>f</code>.</p>
<p>The other part is interesting. Take it step by step. <code>this</code> is the root directory of your vault. <code>app</code> is the hidden <code>obsidian</code> directory, inside of which there is, you guessed it, a <code>plugins</code> directory with an entry called <code>metadata-menu</code>. The rest, <code>plugins["metadata-menu"].api</code> says to look in the <code>metadata-menu</code> directory for something called <code>api</code>. This object will contain a function called <code>fieldModifier</code>, which we can now refer to simply as <code>f</code>.</p>
<p><code>fieldModifier()</code>, which is <code>f()</code> to us now, is used in <code>map()</code> and takes three arguments: the <code>dv</code> object, whatever temporary variable you are using in <code>map()</code> (we have been using <code>b</code>), and the name of the field we want. Were it a normal function you would write</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript"><span id="cb4-1">dataviewjs dv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pages</span>()     </span>
<span id="cb4-2">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(b<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span>[p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ActivityDate</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> </span>
<span id="cb4-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>(dv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Activity"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb4-4">  ]</span></code></pre></div>
<p>Since this fetching of date is asynchronous, you have to use the key words <code>async/await</code> here, so</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript"><span id="cb5-1">dataviewjs dv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pages</span>()     </span>
<span id="cb5-2">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">async</span> b<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span>[</span>
<span id="cb5-3">    p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ActivityDate</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">await</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>(dv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Activity"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-5">    ]</span></code></pre></div>
<p>The entire section containing <code>pages().map</code> needs to be wrapped in an asynchronous function called <code>Promise.all()</code>, which must be (a)waited for and returns, unsurprisingly, a promise.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript"><span id="cb6-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">await</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Promise</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all</span>(dv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pages</span>()</span>
<span id="cb6-2">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">async</span> b<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span>[</span>
<span id="cb6-3">    p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ActivityDate</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">await</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>(dv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Activity"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-5">    ])</span></code></pre></div>
</section>
<section id="the-table" class="level2">
<h2 class="anchored" data-anchor-id="the-table">The Table</h2>
<p>Now, lets finally take a look at the entire code that creates the dashboard. Take some time to read through it. Everything should be understandable at this point.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> {<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">fieldModifier</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> f} <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb7-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">app</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">plugins</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">plugins</span>\[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"metadata-menu"</span>\]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">api</span></span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> dateFormat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MM/DD ddd"</span></span>
<span id="cb7-5"></span>
<span id="cb7-6">dv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">header</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"7 Day Details"</span>)</span>
<span id="cb7-7"></span>
<span id="cb7-8">dv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">table</span>(\[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"🗓️"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"🚶🚴"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"📓"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"⏱️"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"🗺️"</span>\]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb7-9"></span>
<span id="cb7-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">await</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Promise</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all</span>(dv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pages</span>()</span>
<span id="cb7-11">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span>(b <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"log"</span>)</span>
<span id="cb7-12">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span>(b <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ActivityDate</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">moment</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subtract</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"days"</span>))</span>
<span id="cb7-13">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sort</span>(p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ActivityDate</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"desc"</span>)</span>
<span id="cb7-14">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">async</span> b<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span>[</span>
<span id="cb7-15">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">moment</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">new</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Date</span>(b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ActivityDate</span>))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">format</span>(dateFormat)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb7-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">await</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>(dv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Activity"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> </span>
<span id="cb7-17">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">await</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>(dv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Distance"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> </span>
<span id="cb7-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">await</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>(dv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Duration"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> </span>
<span id="cb7-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">await</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>(dv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Route"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb7-20">    ]</span>
<span id="cb7-21">  )</span>
<span id="cb7-22">)</span></code></pre></div>
</section>
<section id="next-steps" class="level2">
<h2 class="anchored" data-anchor-id="next-steps">Next Steps</h2>
<p>In the <a href="https://biscotty.online/blogs/obsidian/dataview/dataviewjs-summaries-statistics/">next article</a> I will explain how to generate summary information like totals and averages for display on the dashboard. In the mean time I strongly suggest that you do two things:</p>
<ol type="1">
<li>Add images to some of your logs and create the table for the Gallery section of the dashboard</li>
<li>Turn some of your existing Dataview tables into DataviewJS tables. Or, at least, make some new ones from your own information</li>
<li>Spend some time working with date ranges. In this example, we selected the past seven days. How can you select the seven days prior to that? (Hint: you need to chain together two <code>where()</code> clauses.)</li>
<li>Can you create a month-to-date view? There are various ways to do it, but it’s helpful to know that you can do <code>moment().startOf('month')</code> to grab the first day of the month. Check out the <a href="https://momentjs.com/docs/#/manipulating/">documentation</a> for more possibilities.</li>
</ol>
<p>Happy coding!</p>


</section>
</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>Javascript</category>
  <category>Obsidian</category>
  <category>DataviewJS</category>
  <guid>https://biscotty.online/posts/obsidian/dataview/dataviewjs-summaries-statistics/</guid>
  <pubDate>Sat, 14 Oct 2023 06:00:00 GMT</pubDate>
  <media:content url="https://biscotty.online/posts/obsidian/dataview/dataviewjs-summaries-statistics/djs-exercise-dashboard.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>DataviewJS: A Gentle Introduction</title>
  <dc:creator>Brian Carey</dc:creator>
  <link>https://biscotty.online/posts/obsidian/dataview/gentle-introduction-to-dataviewjs/</link>
  <description><![CDATA[ 





<section id="dataviewjs-a-gentle-introduction" class="level1">
<h1>DataviewJS: A Gentle Introduction</h1>
<p>This article is intended for people who are new to programming, but can serve as a jumping off point for experienced programmers new to JavaScript in general or DataviewJS in particular. The documentation can be found <a href="https://blacksmithgu.github.io/obsidian-dataview/">here</a>.</p>
<p>You may be asking yourself, “Why learn JavaScript since I have Dataview queries to make lists and tables with my data”? You need JavaScript if, for example, you want interactive tables which allow you to edit data directly from the table without opening the associated note (very important in an <a href="http://biscotty.online/blogs/obsidian/freeing-your-thinking/freeing-your-thinking-part-1/">information-first, NoSQL style</a>). Or if you want to work with relative dates, eg. “last week”, without needing to update your queries every week. JavaScript allows you to show things like totals, counts and averages together with your tables. And since you are writing JavaScript anyway, you can fully customize the way everything is displayed.</p>
<p>JavaScript may seem intimidating, but it’s really not too complex or complicated for what we need to do in Obsidian. The basic examples I start with here won’t display any tables, but will get you comfortable with some of the basic concepts and how to write simple JavaScript code. It is very important that you do these examples yourself in your own vault. Like any language, the only way to learn it is to use it (and make mistakes).</p>
<section id="javascript" class="level2">
<h2 class="anchored" data-anchor-id="javascript">JavaScript</h2>
<p>JavaScript is a general purpose programming language not unlike Python, but quite different from the confusingly-named Java programming language to which it bears no relation. It is responsible for most of the dynamic content on the internet. As happens with human languages spoken widely, JavaScript has evolved a variety of “regional dialects”, sharing a common grammar and basic lexicon, but adding words and idioms to work in specific environments. DataviewJS is one such dialect, one which provides a vocabulary specifically tailored for Obsidian. It does this by giving us a <em>Dataview object</em>, but more on that later.</p>
<p>This will be a learn-by-example sort of thing, but it’s worth mentioning a few things up front for those totally new to this. In JavaScript, spaces, tabs and line breaks don’t matter. You could write your script on one line, but that would be silly. I suggest that you use spaces and line breaks liberally, because it will make your code much easier to write, read and quickly understand when you look back at it later. You will also see some people using semi-colons at the end of lines. This, too, is optional. Finally, variables can be named however you like, but the convention for multi-word variables is to capitalize the first letter of every word except the first, like <code>theVariableName</code>.</p>
<p>(Fun fact: this naming convention is called “camel case”, with the capital letters seen as humps protruding from the back of a camel. Two humps can be seen in one form, <code>CamelCase</code>. The form used in JavaScript, <code>camelCase</code> is specifically called “dromedary case” for apparent reasons.)</p>
<p>One thing about JavaScript which took me a while to get used to at first was all of the curly braces (<code>{}</code>). All that they indicate is that there is a block of JavaScript code inside, usually with multiple lines. While we’re on the subject of braces, the square brackets (<code>[]</code>) are used when you want a list of things. Just separate each item by commas, and put quotations around each item, like <code>["Item 1", "Item2"]</code>. You often want to go through lists item by item (a process called iteration), and we will see later how to do this. Apostrophes (<code>'</code>) and quotations (<code>"</code>) can be used interchangeably to wrap text. Don’t worry, we’ll go over all this later.</p>
</section>
<section id="hello-world" class="level2">
<h2 class="anchored" data-anchor-id="hello-world">Hello World</h2>
<p>The first program you traditionally write in any programming language is “Hello World”, which displays, not unsurprisingly, “Hello World” as output. Here is such a one in DataviewJS:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript"><span id="cb1-1">dv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paragraph</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello World"</span>)</span></code></pre></div>
<p>The output looks like this:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript"><span id="cb2-1">Hello World</span></code></pre></div>
<p>Yeah! You are now a JavaScript programmer! This simple example introduces some important concepts, though.</p>
<p>First, when you want to write some JavaScript, you must use a code block with the key word <code>dataviewjs</code>. While you are writing code, it can be convenient to start the code block with <code>js dataviewjs</code> rather than simply <code>dataviewjs</code>. You will get nice syntax highlighting that way, and can simply remove the first <code>js</code> when you want to run your code.</p>
<p>As you might have guessed, <code>paragraph</code> just means to display the text in parentheses as a paragraph. Technically, <code>dv.paragraph()</code> is a command, or <em>function</em>, and the part in parentheses is called the <em>arguments</em>. Note the quotations surrounding the text.</p>
<p>So what’s this <code>dv</code> thing? Remember when I said that each flavor of JavaScript provides special vocabulary for it’s context? They do this typically by providing an “object” containing the functionality. <code>dv</code> is what is called the <em>Dataview object</em>, and anytime you want to access the functionality of DataviewJS you indicate that by starting your statement or phrase with <code>dv</code> followed by a period. Since displaying a paragraph on a page of markdown is specific to DataviewJS, we write <code>dv.paragraph()</code></p>
<p>In addition to paragraphs, the <code>dv</code> object allows us to display headers, lists, tables, etc. In fact, the <code>dv</code> object can display any HTML element. You can display multiple elements by putting them one after another in your code.</p>
<p>Let’s look at another example:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript"><span id="cb3-1">dv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">header</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Introduction to DataviewJS"</span>)</span>
<span id="cb3-2">dv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paragraph</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'"Hi, my name is DataviewJS"'</span>)</span></code></pre></div>
</section>
<section id="introduction-to-dataviewjs" class="level2">
<h2 class="anchored" data-anchor-id="introduction-to-dataviewjs">Introduction to DataviewJS</h2>
<p>Hi, my name is DataviewJS</p>
<p>Since it’s hard to show the result naturally, I’ve included screenshots from my vault with the code on the right and the results on the left.</p>
<p><img src="https://biscotty.online/posts/obsidian/dataview/gentle-introduction-to-dataviewjs/djs-intro-1.png" class="img-fluid"></p>
<p>Here I’m displaying 2 elements. Headers require two arguments, the first indicating the header level. This example is the same as writing <code>## Introduction to DataviewJS</code>. Note that we don’t use quotations around numbers (usually). The <code>dv</code> object also allows us to display lists, like this:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript"><span id="cb4-1">dv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Item 1"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Item 2"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Item 3"</span>])</span></code></pre></div>
<p>Remember that, when making lists in JavaScript, you use the square brackets and separate each item with a comma. This is also called an <em>array</em>. This is a pretty simple example, but sometimes things get a lot more complicated, and since spaces and new lines don’t matter, it is good practice to write the same code like this:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript"><span id="cb5-1">dv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>([</span>
<span id="cb5-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Item 1"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Item 2"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Item 3"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-5">])</span></code></pre></div>
<p>This makes it much easier to see what is going on, and also makes copying and pasting of individual items easier, too.</p>
</section>
<section id="variables" class="level2">
<h2 class="anchored" data-anchor-id="variables">Variables</h2>
<p>Well, you may not be too impressed so far. Nothing we’ve done yet has been anything we couldn’t have done by simply writing the markdown. Things get more interesting when we start using <em>variables</em>. These allows us to create and manipulate information before displaying it. Variables are usually made (declared) with either <code>const</code> or <code>let</code> in JavaScript. So <code>const myName = "Brian"</code> creates a variable called <code>myName</code> with the value of “Brian”. We can then write this:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> myName <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Brian"</span></span>
<span id="cb6-2">dv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paragraph</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hi, my name is "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> myName <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span>)</span></code></pre></div>
<p>which produces</p>
<pre><code>Hi, my name is Brian.</code></pre>
<p>When used with text, called <em>strings</em> in coding lingo, the <code>+</code> puts together (concatenates) multiple strings. You can see that a long string with multiple variables could start to look messy. A more convenient way to combine text and variables is to use back ticks instead of quotes, and put the variable names in curly braces preceded with the dollar sign. So instead we can write:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> myName <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Brian"</span></span>
<span id="cb8-2">dv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paragraph</span>(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">`Hi, my name is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>myName<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">.`</span>)</span></code></pre></div>
<p>to get the same result.</p>
<p>You could still object, no pun intended, that we haven’t done anything we couldn’t have done just by writing out the sentence. We’ll get to that in the next article, but before closing this one, I’ll show you something you can only do with JavaScript. DataviewJS comes with another JavaScript flavor baked in called MomentJS. Like DataviewJS provides a <code>dv</code> object, MomentJS provides a <code>moment</code> object which makes it easy to work with dates and times. We’ll talk a lot more about this later, but for now you can use it like this:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript"><span id="cb9-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> today <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">moment</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Date</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">now</span>())<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">format</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MMMM DD, YYYY"</span>)</span>
<span id="cb9-2">dv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paragraph</span>(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">`Today is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>today<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>)</span></code></pre></div>
<pre><code>Today is October 10, 2023</code></pre>
<p>This display’s today’s date in a format specified by argument to the <code>format()</code> function. Every time you open a note or canvas, the current day will be displayed.</p>
<p>Putting it all together, we can write</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript"><span id="cb11-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> myName <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Brian"</span></span>
<span id="cb11-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> today <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">moment</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Date</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">now</span>())<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">format</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MMMM DD, YYYY"</span>)</span>
<span id="cb11-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> learnings <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb11-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"JavaScript basics"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb11-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The dataview object"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb11-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Displaying elements with JavaScript"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb11-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"JavaScript variables"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb11-8">]</span>
<span id="cb11-9">dv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">header</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">`Things </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>myName<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;"> learned on </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>today<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>)</span>
<span id="cb11-10">dv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(learnings)</span></code></pre></div>
<p>to produce</p>
<section id="things-brian-learned-on-october-10-2023" class="level3">
<h3 class="anchored" data-anchor-id="things-brian-learned-on-october-10-2023">Things Brian learned on October 10, 2023</h3>
<ul>
<li>JavaScript basics</li>
<li>The dataview object</li>
<li>Displaying elements with JavaScript</li>
<li>JavaScript variables</li>
</ul>
<p><img src="https://biscotty.online/posts/obsidian/dataview/gentle-introduction-to-dataviewjs/djs-intro-2.png" class="img-fluid"></p>
</section>
</section>
<section id="next-steps" class="level2">
<h2 class="anchored" data-anchor-id="next-steps">Next steps</h2>
<p>In the <a href="http://biscotty.online/blogs/obsidian/dataview/dataviewjs-summaries-statistics/">next article</a> I’ll start looking at using DataviewJS to make lists and tables and otherwise use the information in your vault. Meanwhile, if you want to learn more about working with dates, you can visit the <a href="https://momentjs.com/">Moment.js website</a>. And the DataviewJS documentation can be found <a href="https://blacksmithgu.github.io/obsidian-dataview/">here</a>. Happy coding!</p>


</section>
</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>Javascript</category>
  <category>Obsidian</category>
  <category>DataviewJS</category>
  <guid>https://biscotty.online/posts/obsidian/dataview/gentle-introduction-to-dataviewjs/</guid>
  <pubDate>Wed, 11 Oct 2023 06:00:00 GMT</pubDate>
  <media:content url="https://biscotty.online/posts/obsidian/dataview/gentle-introduction-to-dataviewjs/djs-intro-2.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>Obsidian: Pretty Canvas</title>
  <dc:creator>Brian Carey</dc:creator>
  <link>https://biscotty.online/posts/obsidian/pretty-canvas/</link>
  <description><![CDATA[ 





<section id="obsidian-pretty-canvas" class="level1">
<h1>Obsidian: Pretty Canvas</h1>
<p>Going visual has really helped free my thinking, and pretty much all of my time in Obsidian is now spent on canvases. Other than when I am making fleeting notes on an article, book or video, I do pretty much everything from a canvas. I process and edit my notes, list questions which guide my research, maintain tasks associated with the effort, and perhaps develop an article on the topic, all from the canvas.</p>
<p>Naturally I want my canvases to be pretty. It’s not just a question of aesthetics either. Changing simple things like the color or size of elements makes the canvas much more use-able, drawing your eyes quickly to more important information and removing extraneous stuff. Obsidian fortunately allows us to use <a href="https://developer.mozilla.org/en-US/docs/Web/CSS">CSS</a> to do this.</p>
<p>Here’s an example of a Visual Dashboard I’m just getting started with for a new article. The first image is with default styling. It is usable, and has some pretty colors, but it’s visually confusing.</p>
<p><img src="https://biscotty.online/posts/obsidian/pretty-canvas/canvas-plain.png" class="img-fluid"></p>
<p>There are too many colors for one. The title of the canvas doesn’t stand out, and the group headings don’t either. There is also a bunch of stuff that I don’t need to see, like the links after every task.</p>
<p>Here is the same with CSS applied. Notice how some useless clutter has been removed, task descriptions have a standardized color which is easy to read, group headings stand out better to guide your eyes, and titles look good.</p>
<p><img src="https://biscotty.online/posts/obsidian/pretty-canvas/canvas-pretty.png" class="img-fluid"></p>
</section>
<section id="implementation" class="level1">
<h1>Implementation</h1>
<section id="getting-started" class="level2">
<h2 class="anchored" data-anchor-id="getting-started">Getting Started</h2>
<p>Using CSS is pretty straight-forward in principle, but figuring out how to apply it can take a bit of work, as there seems to be no good documentation for automatically generated classes. Also, CSS is simply unfamiliar to many people. Never the less, a little can go a long way. So I wanted to share some of the styling I’m using for my canvases as a jumping-off point for you to personalize your canvases and be more efficient in working with them.</p>
<p>To get started, you need to create a <code>snippets</code> directory in the hidden <code>obsidian</code> directory of your vault. Any files placed here with the extension <code>css</code> will be available to Obsidian. You can name the files anything you want, so choose a descriptive name. With obvious irony, these files can only be edited with an external editor, but any editor will do, like vim, nano or Notepad. I suggest you create a file called <code>canvas-fyt.css</code> and copy the contents below into the file. In Obsidian, you will be able to “activate” whichever files you want to use, so you can have multiple styles of canvases.</p>
<p>Once you have created a <code>css</code> file in the correct directory you can go to the Appearance section and toggle on the new file to make it active. You may need to press the reload button to re-scan the directory.</p>
<p><img src="https://biscotty.online/posts/obsidian/pretty-canvas/enable-css.png" class="img-fluid"></p>
</section>
<section id="background" class="level2">
<h2 class="anchored" data-anchor-id="background">Background</h2>
<p>With that done, let’s start with the background. Add the following to the file to change the color and remove the dots:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode css code-with-copy"><code class="sourceCode css"><span id="cb1-1">svg<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.canvas-background</span> {</span>
<span id="cb1-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">background</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">linear-gradient(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">deg</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">#253B0B</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">#2c0149</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">#390B1C</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-3">}</span>
<span id="cb1-4"></span>
<span id="cb1-5">svg<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.canvas-background</span> circle {</span>
<span id="cb1-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">display</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">none</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-7">}</span></code></pre></div>
<p>The background is actually an image of the type svg, which stands for Scalable Vector Graphic (as compared to png or jpg). The svg is automatically assigned the class <code>canvas-background</code>. By writing <code>svg.canvas-background</code> we select only the background image and not any other svg files which might be on the canvas. As you can see, styles use key/value pairs followed by a semi-colon. I’ve used a gradient here, but if you only want a single color, you could simply write <code>background-color: tan;</code> for example. There are over 150 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/named-color">named colors</a> which you can use. If you have an RGB value from a color picker, you can write <code>background-color: rgb(10,160,245);</code>.</p>
<p><code>display: none;</code> says not to display a particular element, in this case the grid dots (circles). We’ll use this again later.</p>
</section>
<section id="tasks" class="level2">
<h2 class="anchored" data-anchor-id="tasks">Tasks</h2>
<p>Next we can style the tasks. Adding</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode css code-with-copy"><code class="sourceCode css"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.task-description</span> {</span>
<span id="cb2-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">color</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">cyan</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-3">}</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.tasks-backlink</span> {</span>
<span id="cb2-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">display</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">none</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-7">}</span></code></pre></div>
<p>will change all of the task descriptions to a consistent and easily readable color. It also removes the backlink text which points to the file containing the task. I’m not interested in files, so this is useless to me but takes up a lot of visual space.</p>
</section>
<section id="titlesheaders" class="level2">
<h2 class="anchored" data-anchor-id="titlesheaders">Titles/Headers</h2>
<p>With that done we can turn to the textual elements. For these, you must specify on the canvas which elements you want to apply the styles to. For this you need to use HTML instead of markdown, allowing you to assign a <em>class</em> to an element. Let’s style the headings which I will use for titles so they stand out.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode css code-with-copy"><code class="sourceCode css"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.markdown-rendered</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.title-tag-1</span> {</span>
<span id="cb3-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">text-align</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">center</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">font-size</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">em</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-4">}</span>
<span id="cb3-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.markdown-rendered</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.title-tag-2</span> {</span>
<span id="cb3-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">text-align</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">center</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">font-size</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">em</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-8">}</span>
<span id="cb3-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.markdown-rendered</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.title-tag-3</span> {</span>
<span id="cb3-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">text-align</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">center</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">font-size</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">em</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-12">}</span></code></pre></div>
<p>On the canvas, in order to use the styles, you can’t use the standard hash tags (<code>#, ##, ###</code>) for headers. Instead you need to use HTML and specify the class. For example, instead of writing <code># Header</code> you write <code>&lt;h1 class="title-tag-1"&gt;Header&lt;/h1&gt;</code>. Then you will see the styles applied to the class.</p>
<p>Notice the units used for the font size. You can use different units for font size such as pixels (<code>font-size: 24px;</code>). <code>em</code> is convenient though, because it is a relative size. <code>2 em</code> is like saying “display this twice as large as it would normally be displayed”. The actual size will change based on the zoom level.</p>
</section>
<section id="other-textual-elements" class="level2">
<h2 class="anchored" data-anchor-id="other-textual-elements">Other textual elements</h2>
<p>I also like to be able to have certain words jump out on the page, more than can be achieved with bold or italics. So I have a class</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode css code-with-copy"><code class="sourceCode css"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.markdown-rendered</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.my-emphasis</span> {</span>
<span id="cb4-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">color</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">#b7db6f</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">font-size</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.2</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">em</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-4">}</span></code></pre></div>
<p>I can use this class by wrapping text in a <code>&lt;span&gt;</code> element like this:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode css code-with-copy"><code class="sourceCode css"><span id="cb5-1">In this paragraph &lt;span class="my-emphasis"<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>these words&lt;/span<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> will stand out.</span></code></pre></div>
<p>In this paragraph <span class="cta">these words</span> will stand out.</p>
<p>To change the font, add</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode css code-with-copy"><code class="sourceCode css"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.markdown-rendered</span> {</span>
<span id="cb6-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">font-family</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Quicksand"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">sans-serif</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-3">}</span>
<span id="cb6-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.canvas-group-label</span> {</span>
<span id="cb6-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">font-size</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">em</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">font-family</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Quicksand"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">font-weight</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">bold</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">color</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">black</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-9">}</span></code></pre></div>
<p>I like the Quicksand font. It is a <a href="https://fonts.google.com/">free font</a> from Google, which provides a huge variety of fonts. In order to display a font you must download it and install it to your system. If it is not on your system, the default sans-serif font will be used instead. As you can see, I’ve also changed the size, color and weight of the labels for the groups on the canvas.</p>
<p>Finally, I would like to have the filenames of links on the canvas to be a different color, so</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode css code-with-copy"><code class="sourceCode css"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.markdown-rendered</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.internal-link</span> {</span>
<span id="cb7-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">color</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">red</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-3">}</span></code></pre></div>
<p>And that’s it. For convenience I provide the complete file below. I hope adding some style will enrich your experience working with your Visual Dashboards.</p>
</section>
</section>
<section id="final-file" class="level1">
<h1>Final File</h1>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode css code-with-copy"><code class="sourceCode css"><span id="cb8-1">svg<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.canvas-background</span> {</span>
<span id="cb8-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">background</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">linear-gradient(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">deg</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">#253B0B</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">#2c0149</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">#390B1C</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-3">}</span>
<span id="cb8-4"></span>
<span id="cb8-5">svg<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.canvas-background</span> circle {</span>
<span id="cb8-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">display</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">none</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-7">}</span>
<span id="cb8-8"></span>
<span id="cb8-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.markdown-rendered</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.title-tag-1</span> {</span>
<span id="cb8-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">text-align</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">center</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">font-size</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">em</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-12">}</span>
<span id="cb8-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.markdown-rendered</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.title-tag-2</span> {</span>
<span id="cb8-14">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">text-align</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">center</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-15">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">font-size</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">em</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-16">}</span>
<span id="cb8-17"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.markdown-rendered</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.title-tag-3</span> {</span>
<span id="cb8-18">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">text-align</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">center</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-19">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">font-size</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">em</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-20">}</span>
<span id="cb8-21"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.canvas-group-label</span> {</span>
<span id="cb8-22">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">font-size</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">em</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-23">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">font-family</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Quicksand"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-24">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">font-weight</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">bold</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-25">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">color</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">black</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-26">}</span>
<span id="cb8-27"></span>
<span id="cb8-28"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.task-description</span> {</span>
<span id="cb8-29">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">color</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">cyan</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-30">}</span>
<span id="cb8-31"></span>
<span id="cb8-32"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.tasks-backlink</span> {</span>
<span id="cb8-33">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">display</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">none</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-34">}</span>
<span id="cb8-35"></span>
<span id="cb8-36"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.markdown-rendered</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.internal-link</span> {</span>
<span id="cb8-37">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">color</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">red</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-38">}</span>
<span id="cb8-39"></span>
<span id="cb8-40"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.markdown-rendered</span> {</span>
<span id="cb8-41">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">font-family</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Quicksand"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-42">}</span>
<span id="cb8-43"></span>
<span id="cb8-44"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.markdown-rendered</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.my-emphasis</span> {</span>
<span id="cb8-45">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">color</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">#b7db6f</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-46">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">font-size</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.2</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">em</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-47">}</span></code></pre></div>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>Obsidian</category>
  <category>CSS</category>
  <guid>https://biscotty.online/posts/obsidian/pretty-canvas/</guid>
  <pubDate>Thu, 05 Oct 2023 06:00:00 GMT</pubDate>
  <media:content url="https://biscotty.online/posts/obsidian/pretty-canvas/canvas-pretty-css-composite.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>Obsidian: Freeing Your Thinking Workflow</title>
  <dc:creator>Brian Carey</dc:creator>
  <link>https://biscotty.online/posts/obsidian/freeing-your-thinking/freeing-your-thinking-workflow/</link>
  <description><![CDATA[ 





<p>I recently published <a href="https://biscotty.online/blogs/obsidian/freeing-your-thinking/freeing-your-thinking-part-1">several articles</a> on using Obsidian’s native database functionality to increase focus and efficiency when working with the information in our vaults. Rather than using Obsidian as a souped-up word processor, we can abandon the file paradigm altogether and use Bookmark and Canvas for accessing, editing, analyzing and organizing our information.</p>
<p>Given the interest that the articles have generated, and the fact that the concepts may be unfamiliar to some, I thought it would be helpful to make a video demonstrating how it works in practice. It ended up being somewhat long, so this is the second part.</p>
<p>If you haven’t read the articles, this may be confusing as I don’t go into depth on the concepts. This isn’t really a how-to video, so it assumes you know your way around Obsidian.</p>
<hr>
<section id="part-1" class="level1">
<h1>Part 1</h1>
<iframe src="https://fast.wistia.net/embed/iframe/yiot4vgtp3?seo=false&amp;videoFoam=false" title="FYT Demo Part 1 Video" allow="autoplay; fullscreen" allowtransparency="true" frameborder="0" scrolling="no" class="wistia_embed" name="wistia_embed" msallowfullscreen="" width="750" height="422">
</iframe>
<script src="https://fast.wistia.net/assets/external/E-v1.js" async=""></script>
<hr>
</section>
<section id="part-2" class="level1">
<h1>Part 2</h1>
<iframe src="https://fast.wistia.net/embed/iframe/c5nzx1xanr?seo=true&amp;videoFoam=false" title="FYT Demo Part 2 Video" allow="autoplay; fullscreen" allowtransparency="true" frameborder="0" scrolling="no" class="wistia_embed" name="wistia_embed" msallowfullscreen="" width="750" height="422">
</iframe>
<script src="https://fast.wistia.net/assets/external/E-v1.js" async=""></script>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>Obsidian</category>
  <category>PKM</category>
  <guid>https://biscotty.online/posts/obsidian/freeing-your-thinking/freeing-your-thinking-workflow/</guid>
  <pubDate>Thu, 21 Sep 2023 06:00:00 GMT</pubDate>
  <media:content url="https://biscotty.online/posts/obsidian/freeing-your-thinking/freeing-your-thinking-workflow/fyt-walkthrough.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>Obsidian Canvas Dashboards</title>
  <dc:creator>Brian Carey</dc:creator>
  <link>https://biscotty.online/posts/obsidian/visual-mocs-with-canvas/</link>
  <description><![CDATA[ 





<section id="motivation" class="level1">
<h1>Motivation</h1>
<p>This is the last in a series of articles, including <a href="https://biscotty.online/blogs/obsidian/freeing-your-thinking">Freeing Your Thinking</a> and <a href="https://biscotty.online/blogs/obsidian/bookmarks">Building a Knowledge Tree</a>, where I talk about using Obsidian as a non-relational database. The main idea is to interact with information, not files, and Obsidian’s core plugins facilitate this approach. I have talked about Search, Bookmarks, Unique Notes and Graph View. This article will describe how to use Canvas to create visual maps of content which not only present information in a clear, attractive and flexible way, but also allow you to explore and interact with your information. As usual, our goal is to obviate the need to open files.</p>
<p>In data science there is a motto “visualize, visualize, visualize.” In the business world, information is commonly presented in the form of a dashboard to allow for visualizing data. A dashboard is a graphical user interface containing views of information. Aside from providing graphical elements and views, a dashboard will typically provide navigational tools and other ways to interact with information and even edit information directly from the dashboard.</p>
<p>Before discussing canvas, I want to mention <a href="https://github.com/zsviczian/obsidian-excalidraw-plugin">Excalidraw</a>, an excellent Community Plugin by Zsolt Viczián. It is great for creating visual maps of content with many graphical elements easily available. I highly recommend it. Nevertheless, one of the purposes of this series is to highlight Obsidian’s native tools, and Canvas is quite powerful in its own right.</p>
</section>
<section id="canvas" class="level1">
<h1>Canvas</h1>
<p>Canvas in Obsidian provides all we need to create dashboards. It allows for the following elements:</p>
<ul>
<li>Notes, but more importantly sections and blocks from notes</li>
<li>Cards, virtual notes which can contain any elements that an ordinary note can and can be converted to an actual note with a mouse click</li>
<li>Graphics, which can be incorporated independently or as an embed in a Card or Note. They can even be used as backgrounds for groups</li>
<li>Groups, which provide visual structure and facilitate navigation</li>
<li>Connectors, which can be directional and annotated, especially good for KanBan style canvases</li>
</ul>
</section>
<section id="visual-maps-of-content" class="level1">
<h1>Visual Maps of Content</h1>
<p>Map of Content is a somewhat generic term to refer to a note which includes information from other notes. They can be simple indices of links to related notes, or complete research articles or books, or something in between. The type of MOC depends upon the purpose.</p>
<p>Here I will demonstrate two different types of Visual MOCs. First, an informational dashboard of an academic topic, which could be used by a student or teacher for study or lesson planning. Secondly, a fully interactive dashboard for managing all aspects of my writing and publications. Without leaving the canvas, I can edit both metadata and content of notes.</p>
<p>This workflow relies on three community plugins: Dataview, Metadata Menu and Hover Editor.</p>
<section id="topical-dashboard" class="level2">
<h2 class="anchored" data-anchor-id="topical-dashboard">Topical Dashboard</h2>
<p>Canvases are ideal for pulling together information on a given topic and presenting it in a visually interesting way. As a student, I can accumulate information (not files) on a topic and add it to my canvas. This makes review of the topic easy. As a teacher, such a MOC could provide the basis of a lesson plan, and could even be distributed as course material.</p>
<p>As an example, this is a canvas covering the Normal Distribution, an important topic in probability and statistics. <img src="https://biscotty.online/posts/obsidian/visual-mocs-with-canvas/canvas-nd-overview.png" class="img-fluid"></p>
<p>All of my information is grouped in categories. The information itself is drawn from specific sections or blocks within notes, not entire notes. I can navigate the canvas with a convenient drop down, allowing me to jump to a particular section. This is especially convenient on large canvases. <img src="https://biscotty.online/posts/obsidian/visual-mocs-with-canvas/canvas-command-menu.png" class="img-fluid"></p>
<p>Otherwise I can simply use the mouse to move around the canvas and zoom in and out as I review my information. <img src="https://biscotty.online/posts/obsidian/visual-mocs-with-canvas/canvas-nd-detail.png" class="img-fluid"></p>
</section>
<section id="interactive-dashboard" class="level2">
<h2 class="anchored" data-anchor-id="interactive-dashboard">Interactive Dashboard</h2>
<p>This is an example of using a visual MOC to both present information and also manage information. It includes interactive tables, previews of documents in progress, and graphics to identify the stage of development of each project.</p>
<p><img src="https://biscotty.online/posts/obsidian/visual-mocs-with-canvas/canvas-publications.png" class="img-fluid"></p>
<p>Thanks to Metadata Menu, I can edit the metadata for any document without opening it. <img src="https://biscotty.online/posts/obsidian/visual-mocs-with-canvas/canvas-mm-table.png" class="img-fluid"></p>
<p><img src="https://biscotty.online/posts/obsidian/visual-mocs-with-canvas/canvas-mm-modal.png" class="img-fluid"></p>
<p>Using Hover editor, I can even edit a document without leaving the dashboard.</p>
<p><img src="https://biscotty.online/posts/obsidian/visual-mocs-with-canvas/canvas-hover-editor.png" class="img-fluid"></p>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>This series of articles was meant to introduce the concept of using Obsidian as a database rather than a traditional file editor, with emphasis on Core Plugins. In the first article, I covered creating information without worrying about file names and directories (Unique Notes), and then accessing that information without navigating to or even opening files (Search). In the second, I discussed interacting with Obsidian to organize and analyze information (Graph View and Bookmarks). Most recently, I showed how Bookmarks can be used to create a useful Knowledge Tree using views of information rather than files.</p>
<p>Here I finish with a way to create visually interesting and useful maps of content using Canvas, together with the Community Plugins Dataview, Metadata Menu, and Hover Edge. Again, this allows you to interact with your information as one would a database, without opening files.</p>
<p>I hope you are intrigued enough to try this method. Thank you for reading this, and constructive criticism is always welcome.</p>
</section>
<section id="gratitude" class="level1">
<h1>Gratitude</h1>
<p>I would like to thank some people who have been my muses as I’ve learned Obsidian. They are all good sources of experience and insight.</p>
<ul>
<li>Zsolt Viczián</li>
<li>Sergio (From Sergio)</li>
<li>Nicole van der Hoeven</li>
<li>Nick Milo</li>
</ul>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>Obsidian</category>
  <guid>https://biscotty.online/posts/obsidian/visual-mocs-with-canvas/</guid>
  <pubDate>Thu, 14 Sep 2023 06:00:00 GMT</pubDate>
  <media:content url="https://biscotty.online/posts/obsidian/visual-mocs-with-canvas/canvas-publications.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>Obsidian Metadata Menu Plugin</title>
  <dc:creator>Brian Carey</dc:creator>
  <link>https://biscotty.online/posts/obsidian/metadata-menu/</link>
  <description><![CDATA[ 





<section id="metadata-menu" class="level1">
<h1>Metadata Menu</h1>
<p>With the release of Obsidian 1.4.5, many people’s focus has been on metadata, which Obsidian calls Properties. I have written a series of articles (see <a href="https://biscotty.online/obsidian/concepts/freeing-your-thinking">Freeing Your Thinking</a>) on using Obsidian’s natural database features, and my entire workflow depends heavily on metadata. Naturally, I was anticipating this release with some excitement, having seen some previews on YouTube.</p>
<p>I was frankly disappointed. It is movement in a positive direction, and has some very nice features for managing metadata. However, its insistence on YAML for properties when many users such as myself prefer in-line metadata for its flexibility, makes some of its features useless to me.</p>
<p>Another reason for my disappointment, or feeling underwhelmed, was that I had already discovered a truly amazing plugin for managing metadata which did everything I need and more. <a href="https://github.com/mdelobelle/metadatamenu">Metadata Menu</a>, a Community Plugin by <a href="https://github.com/mdelobelle">mathieu</a>, provides a full set of features for managing properties. It has a modal, available in multiple places, which allows you to manage literally all aspects of a file’s metadata without opening the file, perfect for my workflow. It even has a file class template system which supports nesting groups of metadata fields. Fields in tables can have actions, allowing for direct editing of metadata in the table itself using standard widgets. And, it is visually clean and attractive</p>
<p>This video isn’t a guide to using Metadata Menu. Rather, it’s to show off some of its features. If metadata is important to you, you must check it out.</p>
<hr>
<iframe src="https://fast.wistia.net/embed/iframe/yfcu9td6yc?seo=false&amp;videoFoam=false" title="Metadata Menu Final Video" allow="autoplay; fullscreen" allowtransparency="true" frameborder="0" scrolling="no" class="wistia_embed" name="wistia_embed" msallowfullscreen="" width="750" height="422">
</iframe>
<script src="https://fast.wistia.net/assets/external/E-v1.js" async=""></script>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>Obsidian</category>
  <guid>https://biscotty.online/posts/obsidian/metadata-menu/</guid>
  <pubDate>Wed, 06 Sep 2023 06:00:00 GMT</pubDate>
  <media:content url="https://biscotty.online/posts/obsidian/metadata-menu/MMCover.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>Obsidian Bookmarks</title>
  <dc:creator>Brian Carey</dc:creator>
  <link>https://biscotty.online/posts/obsidian/obsidian-bookmarks/</link>
  <description><![CDATA[ 





<p>Bookmarks are the key to effectively using obsidian as a non-relational database. The virtues of approaching your notes this way are several and I covered some in the <a href="https://biscotty.online/blogs/obsidian/freeing-your-thinking/freeing-your-thinking-part-1/">Freeing Your Thinking</a> series. In this article I want to develop the idea of using Bookmarks to construct flexible, interactive Knowledge Trees to organize notes. Just as a reminder, we are organizing information, not files.</p>
<p>The Navigation tab gives at best a static arrangement of information, while the Bookmarks tab provides a dynamic way to interact with, develop and access your information. Here you can create <em>Views</em> of your information which you can organize by domain, subject, activity, etc. Views are saved filters and queries. Your information, unlike your files, can happily exist in multiple places in your Knowledge Tree.</p>
<p>When you begin to build your Knowledge Tree, you might start by creating <em>Views</em> which map to your current directories using filters. After all, you want to preserve the information you have put into your vault by organizing your notes in a File Tree. Most people have a separate directory for fleeting notes, so you might make a view containing <code>path: "fleeting-note-directory"</code>. But is such a view terribly useful? Browsing through all your fleeting notes is fun if you’ve nothing better to do, but it’s not focused or efficient use of time if you are working on a particular topic. Wouldn’t it be better to just see the fleeting notes related to my topic? So I save the filter <code>Whatever Topic \type:: fleeting\</code> alongside my views of the topic itself and have a list of fleeting notes only on that topic.</p>
<p>As you start mapping your old directories to views, you might begin to ask yourself at some point why you would ever really want to see all your MOCs in a list? Or Daily Notes? Or Logs? If you want <em>information</em> from these types of notes you typically create a note containing a Dataview query. Bookmarked filters, which I’m calling views, are like virtual Dataview queries. And, since you can do this without referencing file locations, you might question how much useful information was actually embedded in your folder structure. Then you might have a cup of tea.</p>
<p>One last point to stress: the bookmarks, which I will call views, are ephemeral. They can be created, duplicated, renamed and moved around without affecting the information itself. When focusing on a topic, drag it to the top of the tree and put it back when you are done.</p>
<section id="the-mechanics" class="level1">
<h1>The Mechanics</h1>
<section id="commands" class="level2">
<h2 class="anchored" data-anchor-id="commands">Commands</h2>
<p>The following table shows the bookmarks commands with suggested Hotkeys which are most likely unassigned.</p>
<table class="caption-top table">
<colgroup>
<col style="width: 34%">
<col style="width: 42%">
<col style="width: 23%">
</colgroup>
<thead>
<tr class="header">
<th>Command</th>
<th>Description</th>
<th>Hotkey</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Bookmark…</td>
<td>Bookmark current file</td>
<td><code>Ctrl-Cmd-Alt-M</code></td>
</tr>
<tr class="even">
<td>Show Bookmarks</td>
<td>Open bookmarks panel</td>
<td><code>Ctrl-B</code></td>
</tr>
<tr class="odd">
<td>Bookmark Current Search</td>
<td></td>
<td><code>Ctrl-Cmd-Alt-S</code></td>
</tr>
<tr class="even">
<td>Bookmark Current Block</td>
<td>Bookmark Block Under Cursor</td>
<td><code>Ctrl-Cmd-Alt-B</code></td>
</tr>
<tr class="odd">
<td>Bookmark Current Heading</td>
<td>Bookmark Heading Under Cursor</td>
<td><code>Ctrl-Cmd-Alt-H</code></td>
</tr>
</tbody>
</table>
</section>
<section id="bookmarks-panel" class="level2">
<h2 class="anchored" data-anchor-id="bookmarks-panel">Bookmarks Panel</h2>
<p>The panel lists all bookmarks, which, remember, are saved searches, or views. In the panel you can create, rename and delete bookmark groups to organize your bookmarks. Bookmarks can be dragged around to rearrange them.</p>
</section>
</section>
<section id="knowledge-trees" class="level1">
<h1>Knowledge Trees</h1>
<p>When working with a database, we typically create views. Views are subsets of your information based on queries which have been saved. They can be used passively, as a way to look at certain information on a certain topic. They can also be used interactively, as a basis for more fine-grained queries, which, if interesting, can themselves be saved as views.</p>
<p>I have my Knowledge Tree organized by the different domains of my life, Living, Learning and Creating. In addition, I have a section with utilities I call the Toolbox.</p>
<section id="living" class="level2">
<h2 class="anchored" data-anchor-id="living">Living</h2>
<p>This is the structure of my Living section:</p>
<pre><code>- Daily Notes
- Logs
    - Exercise
    - Piano
    - etc.
- Daily Notes
- CV
- People
- Leisure</code></pre>
<p><em>Daily Notes</em> is a view of <code>type:: daily</code>. Exercise and Piano are actual files with interactive Dataview queries. The rest are bookmark groups containing other views.</p>
</section>
<section id="learning" class="level2">
<h2 class="anchored" data-anchor-id="learning">Learning</h2>
<p>I use <em>Learning</em> for study and research activities. This part of the tree is the most complex in terms of structure.</p>
<p>By creating multiple views on a given topic and organizing them in folders I can essentially create an outline of my information using views. This kind of outline, again, is very flexible and can be reshaped easily as my knowledge develops.</p>
<p>This is an excerpt of my section on the normal distribution. It’s “home” is in the bookmark group <code>Learing/Data Science/Probability/</code>.</p>
<pre><code>Normal Distribution                 # All information on the Normal Distribution
Normal Distribution                 # The reference note on the topic
                                      The 2 are distinguished by different icons
Central Limit Theorem               # A bookmark group containing other views
68-95-99.7 Rule                     # A view of a block in a note
R Functions for Normal Distribution # A view of a section of a note</code></pre>
</section>
<section id="creating" class="level2">
<h2 class="anchored" data-anchor-id="creating">Creating</h2>
<p>is for writing and creation of other content. Creating includes works for external and internal use.</p>
<pre><code>- Articles
- Stories
- Video Scripts
- Musings</code></pre>
</section>
<section id="toolbox" class="level2">
<h2 class="anchored" data-anchor-id="toolbox">Toolbox</h2>
<p>In the toolbox I have the following directories, which should be self-explanatory:</p>
<pre><code>- Templates
- fileClasses
    - Class Definitions
    - Value Lists
- Fleeting Notes
- Other
    - Articles
    - MOCs
    - References
    - Atomics</code></pre>
<p>Other than templates and fileClasses, I rarely use the Toolbox.</p>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>I hope I have adequately conveyed some of the advantages of building Knowledge Trees. Maybe you noticed that the word “tree” is actually a misnomer. The branches of real trees don’t reconnect, but ours can. What we really have is a Knowledge Network. Bookmarks allow us to leverage Obsidian’s NoSQL features to free our Second Brain.</p>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>Obsidian</category>
  <guid>https://biscotty.online/posts/obsidian/obsidian-bookmarks/</guid>
  <pubDate>Tue, 05 Sep 2023 06:00:00 GMT</pubDate>
  <media:content url="https://biscotty.online/posts/obsidian/obsidian-bookmarks/tn-metadata-menu.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>Obsidian: The mechanics of Graph View</title>
  <dc:creator>Brian Carey</dc:creator>
  <link>https://biscotty.online/posts/obsidian/graph-view-deets/</link>
  <description><![CDATA[ 





<p>Core functionality in Obsidian seems to be somewhat overlooked. I have written in other articles about using Search, Bookmarks, and Unique Notes for Freeing Your Thinking. In these videos, I demonstrate the functionality of another core component, Graph View.</p>
<p>A graph is a specific data structure consisting of nodes and edges. Obsidian consists of notes which are linked together. This type of data can be stored in a non-relational database. With links and metadata, Obsidian is a non-relational database.</p>
<p>For these reasons, graph view is a powerful way to visualize your data. Graph view is a force directed graph drawing. Where Obsidian search is the best way to find information, graph view is the best way to visualize information and discovering relationships which have not been defined, such as orphans.</p>
<p>These videos go through the details of the graph view functionality in the hope that you will begin to use it to visualize data.</p>
<hr>
<section id="part-1" class="level2">
<h2 class="anchored" data-anchor-id="part-1">Part 1</h2>
<iframe src="https://fast.wistia.net/embed/iframe/fy4yt8o2q3?seo=false&amp;videoFoam=false" title="GV-Deets-Pt1 Video" allow="autoplay; fullscreen" allowtransparency="true" frameborder="0" scrolling="no" class="wistia_embed" name="wistia_embed" msallowfullscreen="" width="750" height="422">
</iframe>
<script src="https://fast.wistia.net/assets/external/E-v1.js" async=""></script>
<hr>
</section>
<section id="part-2" class="level2">
<h2 class="anchored" data-anchor-id="part-2">Part 2</h2>
<iframe src="https://fast.wistia.net/embed/iframe/m04ic0bdnu?seo=false&amp;videoFoam=false" title="GV-Deets-Pt2 Video" allow="autoplay; fullscreen" allowtransparency="true" frameborder="0" scrolling="no" class="wistia_embed" name="wistia_embed" msallowfullscreen="" width="750" height="422">
</iframe>
<script src="https://fast.wistia.net/assets/external/E-v1.js" async=""></script>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>Obsidian</category>
  <category>Graphs</category>
  <guid>https://biscotty.online/posts/obsidian/graph-view-deets/</guid>
  <pubDate>Thu, 31 Aug 2023 06:00:00 GMT</pubDate>
  <media:content url="https://biscotty.online/posts/obsidian/graph-view-deets/GVFull.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>Obsidian: A Second Brain?</title>
  <dc:creator>Brian Carey</dc:creator>
  <link>https://biscotty.online/posts/obsidian/second-brain/</link>
  <description><![CDATA[ 





<section id="obsidian-a-second-brain" class="level1">
<h1>Obsidian: A Second Brain?</h1>
<p>Obsidian is sometimes called a second brain. This is because the structure of a vault, with notes connected by links, is the way a neural network is structured, with notes as nodes and links as edges. Such data structures are typically represented by <a href="https://en.wikipedia.org/wiki/Graph_(abstract_data_type)">graphs</a>, and Obsidian has a built-in Graph View for this purpose.</p>
<p>In this video, I visually explore the concept of Obsidian as a second brain.</p>
<iframe src="https://fast.wistia.net/embed/iframe/0e9un8obut?seo=false&amp;videoFoam=false" title="2nd Brain Video" allow="autoplay; fullscreen" allowtransparency="true" frameborder="0" scrolling="no" class="wistia_embed" name="wistia_embed" msallowfullscreen="" width="750" height="422">
</iframe>
<script src="https://fast.wistia.net/assets/external/E-v1.js" async=""></script>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>Obsidian</category>
  <category>Graphs</category>
  <guid>https://biscotty.online/posts/obsidian/second-brain/</guid>
  <pubDate>Wed, 30 Aug 2023 06:00:00 GMT</pubDate>
  <media:content url="https://biscotty.online/posts/obsidian/second-brain/GVFull.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>Syncing your Thinking with Syncthing</title>
  <dc:creator>Brian Carey</dc:creator>
  <link>https://biscotty.online/posts/obsidian/syncing-your-thinking-syncthing/</link>
  <description><![CDATA[ 





<p>Obsidian loses a lot of power if you can’t take notes from anywhere at anytime on any device you are using. Obsidian offers a subscription syncing service about which I’ve seen no complaints.</p>
<p>But there is an awesome <em>free, open source</em> project called <a href="https://syncthing.net">Syncthing</a> which is ideal for Obsidian. It’s easy to install on any OS or device, with almost instantaneous syncing, and it’s 100% private.</p>
<section id="device-to-device-sync" class="level1">
<h1>Device-to-Device Sync</h1>
<p>Most people are familiar with synchronization approaches which involve a central server, or at least a central, usually cloud-based, directory. This approach is commonly used to keep both multiple people and potentially multiple directories, and even development environments, synchronized.</p>
<p>In Obsidian we don’t need something so fancy. If you aren’t sharing (collaborating) on your vault, and if you don’t use two devices simultaneously 😉, the device-to-device synchronization is what you need. It is rapid, secure and private. Your information never sits anywhere other than on your own devices.</p>
<p>Device-to-device connections use a protocol called Universal Plug and Play, or UPnP. These do use a central server, but only for the purposes of locating and connecting devices, not for file transfer. When a device with Syncthing running connects to the internet it announces it’s location to the server and retrieves the location of your other on-line devices, to which they make a direct connection.</p>
<p>Once connected the devices share data directly with each other. Synchronization is very rapid. For example, sometimes I like to dictate my notes on my phone. I can have the note open on both my phone and my computer, dictate into my phone, and the text appears almost instantly in the note open on my computer.</p>
</section>
<section id="setup" class="level1">
<h1>Setup</h1>
<p>Syncthing is available on all common operating systems. I use a Linux operating system with an Android phone, but setup should be the same on any devices. On Linux the easiest and probably best way is with the flatpak. Most distros have <code>flatpak</code> installed by default, so:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">flatpak</span> install flathub com.github.zocker_160.SyncThingy</span></code></pre></div>
<p>On other OSs and devices you can use the normal installation process by going to their <a href="https:%20syncthing.net">website</a>. (Isn’t Linux easier?)</p>
<p>Getting you vault synchronized is a two-step process:</p>
<ol type="1">
<li>Connecting the devices</li>
<li>Sharing the directories</li>
</ol>
<section id="connecting-devices" class="level2">
<h2 class="anchored" data-anchor-id="connecting-devices">Connecting Devices</h2>
<p>Devices are connected by exchanging Device IDs, which are long alphanumeric strings. The connection can be initiated from either the computer or the phone. Syncthing will display a QR code containing the Device ID, so the most convenient way is to display the computer’s code, scan it with a phone and initiate the connection from the phone.</p>
<p>The Syncthing interface can be accessed using your web browser (localhost:8384). From the browser interface, show the QR code on the computer.</p>
<p><img src="https://biscotty.online/posts/obsidian/syncing-your-thinking-syncthing/SyncthingShowQR.jpg" class="img-fluid"></p>
<p>On the phone, in the devices tab, click on the <code>+</code> to add a device, and then the QR symbol to scan the code. After that, give the device a meaningful name and save the new device. <img src="https://biscotty.online/posts/obsidian/syncing-your-thinking-syncthing/ST-Phone-Device.png" class="img-fluid"></p>
<p>Back on your computer you will see an alert asking if you want to add the phone device. Accept this and give the device a name.</p>
<p><img src="https://biscotty.online/posts/obsidian/syncing-your-thinking-syncthing/ST-add-device-1.jpg" class="img-fluid"></p>
<p>After accepting the device and after a short period the devices will display connected. This may take a few minutes the first time, but don’t worry…if you scanned the QR code nothing can really go wrong.</p>
</section>
<section id="sharing-directories" class="level2">
<h2 class="anchored" data-anchor-id="sharing-directories">Sharing Directories</h2>
<p>The first thing to do is create a directory on your phone for your Obsidian vault.</p>
<p>Once the devices are connected you can start to share directories. Since this is an Obsidian tutorial we only need to share the vault directory, but you can use the same process to share, for example, your photo or image directories on your phone so that you automatically get copies on your computer.</p>
<p>When we add (and delete) Syncthing directories, we aren’t really adding or removing any directories or files. We are adding an identifier which points to a directory on your device or system. So deleting a Syncthing directory is an entirely safe process.</p>
<p>That said, go ahead and add a Syncthing directory on your computer. Give the directory a specific name (Obsidian, maybe) and point it to the directory on your computer which contains your vault. <img src="https://biscotty.online/posts/obsidian/syncing-your-thinking-syncthing/SyncthingAddFolders2-1.jpg" class="img-fluid"></p>
<p>In the sharing tab, select your phone or other device. <img src="https://biscotty.online/posts/obsidian/syncing-your-thinking-syncthing/SynthingLappyAddDevice-1.jpg" class="img-fluid"></p>
<p>As when we added a device earlier, an alert will appear, this time on your phone. Accept to add the offered directory, and you will be prompted to give the directory a name and location. The name may or may not be the same as the one on the computer, since Syncthing is actually using the long, auto-generated string in the middle which you left alone, right?</p>
<p>Then select the new directory we created earlier as the location, and that’s it. Depending on the size of the files in the directory the initial sync can take a while. Since Obsidian files are just text files even the initial sync should be rapid. If you are syncing your phone images, the initial sync can take hours. Once they are synced, though, images from your phone will appear on your computer in seconds.</p>
</section>
<section id="closing-thoughts" class="level2">
<h2 class="anchored" data-anchor-id="closing-thoughts">Closing Thoughts</h2>
<p>From the wonderful world of FOSS we have a synchronization tool ideal for keeping directories in sync across personal devices. Perfect for Obsidian!</p>


</section>
</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>Obsidian</category>
  <category>Linux</category>
  <guid>https://biscotty.online/posts/obsidian/syncing-your-thinking-syncthing/</guid>
  <pubDate>Mon, 28 Aug 2023 06:00:00 GMT</pubDate>
  <media:content url="https://biscotty.online/posts/obsidian/syncing-your-thinking-syncthing/SyncThing.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>Obsidian Basics - Headers</title>
  <dc:creator>Brian Carey</dc:creator>
  <link>https://biscotty.online/posts/obsidian/obsidian-headers/</link>
  <description><![CDATA[ 





<p>Besides the actual content of a note, the most important elements in notes are the headers. More than just enhancing visual presentation of your information, headers give access to a variety of useful functionality. In this article, I will discuss the value of headers as well as the mechanics of using them.</p>
<section id="creating-headers" class="level1">
<h1>Creating Headers</h1>
<p>A Header is created by starting a line with from 1 to 6 pound signs (<code>#</code>) followed by a space. (When you enter your first <code>#</code> sign, Obsidian will think you are entering a tag and will present you with a drop-down suggesting tags. Just ignore this, type <code>Space</code> or another <code>#</code>, and it will go away.)</p>
<p>There are six levels of headers available, determined by how many # signs you use. Headers can be nested, allowing them to function like an outline. They create sections in your document.</p>
<p>As an example, an outline like:</p>
<pre><code>I. Main Subject
  A. First topic
    1. Point 1
    2. Point 2
  B. Second topic
    1. Point 1
    2. Point 2</code></pre>
<p>would be represented in your note with Headers like this:</p>
<pre><code># Main Subject
## First topic
### Point 1
### Point 2
## Second topic
### Point 1
### Point 2</code></pre>
<p>If you are familiar with html, this is the same as</p>
<pre><code>&lt;h1&gt;Main Subject&lt;/h1&gt;
&lt;h2&gt;First topic&lt;/h2&gt;
&lt;h3&gt;Point 1&lt;/h3&gt;
&lt;h3&gt;Point 2&lt;/h3&gt;
&lt;h2&gt;Second topic&lt;/h2&gt;
&lt;h3&gt;Point 1&lt;/h3&gt;
&lt;h3&gt;Point 2&lt;/h3&gt;</code></pre>
<p>NB. Obsidian can read HTML just fine. Try entering the HTML above into a note and, in Read or Preview Mode, you will see that the result is the same as when using the pound signs.</p>
</section>
<section id="value-of-headers" class="level1">
<h1>Value of Headers</h1>
<p>The mechanics of using Headers are pretty simple, but I’d like to explain what Headers are good for besides just looking pretty. They provide:</p>
<ol type="1">
<li><strong>Structure</strong></li>
<li><strong>Navigational aid</strong> via an auto-generated table of contents</li>
<li><strong>Folding</strong> as a way to easily hide sections of text</li>
<li><strong>Reference hooks</strong> which can be directly linked to from other notes</li>
</ol>
<section id="structure" class="level2">
<h2 class="anchored" data-anchor-id="structure">Structure</h2>
<p>Headers allow you to divide your note in logical sections. You can use them like you would an outline, as described above. Every note should, at a minimum, a level one header at the beginning with a title for the note.</p>
<p>Obsidian helps me organize my thoughts. A note often “starts life” as a sentence or two that I “jotted down” when the thought came to me. When I return to the note, if I still find it interesting, the first thing I do is give it a title (level one header). It summarizes the purpose of the note succinctly, and for a simple, atomic note, that may be all I need, although I might want to include some reference information, in which case I create two level-two headers, one for content, one for references. And so on…</p>
<p>However, for more complex notes which are not atomic, developing the note almost always involves breaking down the idea into parts. This is the purpose of headers. If you’re one of those people who like to start with an outline, start a new document with a bunch of headers. Even if you don’t, as you work on documents you will naturally need to break things down into smaller ideas…headers help you structure your thinking.</p>
</section>
<section id="navigation" class="level2">
<h2 class="anchored" data-anchor-id="navigation">Navigation</h2>
<p>If you open your right sidebar and click on the Outline icon, you will see the table of contents panel with an outline created by your headers. Clicking on any item will take you to that section of the document. Subsections can be folded in the panel by clicking on the down arrow to the left of the section. This is very useful for long documents.</p>
</section>
<section id="folding" class="level2">
<h2 class="anchored" data-anchor-id="folding">Folding</h2>
<p>If you move your cursor over a header in your document, you will see a down arrow to the left of the header. This is a toggle which allows you to collapse (hide) or expand (show) a section’s content.</p>
<p>A section includes all content up to the next Header of the same level or higher. So a level 3 section would include all content up until the next level 3 Header, or a level 2 or 1 Header. This can be confusing to explain, but if you experiment a little it should be clear.</p>
<p>There are commands that allow you to work more easily with folds. If you go into the command palette (Ctrl-P) you will see four commands which allow you to expand and collapse folds.</p>
<p><img src="https://biscotty.online/posts/obsidian/obsidian-headers/ScreenForHeaders.png" class="img-fluid"></p>
<p>These commands are really only useful if you assign them hotkeys. If you do so you will find that navigating long documents becomes very quick, assuming that Headers are well-used.</p>
</section>
<section id="hooks-for-links" class="level2">
<h2 class="anchored" data-anchor-id="hooks-for-links">Hooks for Links</h2>
<p>The final aspect of headers I’d like to mention is their use as reference hooks for links. When linking to another note, you can directly link to a header and therefore to a section. When creating a link, directly after the name of the note and inside the square brackets, you can type <code>#</code> and you will get a drop-down list of all the headers in the note. You can select one of these headers. Then the embedded document will only display that section in your current note. Similarly, hovering over the link and pressing <code>Ctrl</code> (if using the Hover Editor plugin) will display that section. More advanced plugins like dataview can also reference Headers.</p>
<p>NB. You can also link directly to paragraphs by using <code>#^</code> after the note’s name.</p>
</section>
</section>
<section id="closing-thoughts" class="level1">
<h1>Closing Thoughts</h1>
<p>Headers are simple yet powerful. They help me organize and structure my thoughts and ideas. They are the first step in working with Obsidian.</p>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>Obsidian</category>
  <guid>https://biscotty.online/posts/obsidian/obsidian-headers/</guid>
  <pubDate>Sun, 27 Aug 2023 06:00:00 GMT</pubDate>
  <media:content url="https://biscotty.online/posts/obsidian/obsidian-headers/tn-metadata-menu.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>Obsidian: Stop Wasting Time With Directories and Filenames</title>
  <dc:creator>Brian Carey</dc:creator>
  <link>https://biscotty.online/posts/obsidian/freeing-your-thinking/freeing-your-thinking-part-1/</link>
  <description><![CDATA[ 





<section id="the-problem" class="level1">
<h1>The Problem</h1>
<p>Because we’ve all used computers, when we think of organizing our stuff we naturally think in terms of files and directories, and are aware of the value of descriptive file names. Personally, if I even need to scroll down to see all the files in a single directory, it’s probably time for a subdirectory. And I’m equally unsettled when I see files with meaningless or unclear names. Many people like me explore various systems like PARA, ACCESS, LATCH, etc. to organize our stuff.</p>
<p>To be explicit, the stuff referred to here is files. But we use Obsidian for information management, not file management.</p>
<p>Obsidian stores information, but it’s not a database, at least not an SQL database. It is essentially a NoSQL database (more on that in Part 2 and 3). It stores information in text files, but it doesn’t care where the files are nor what they are called. So why should we care?</p>
<p>I should point out that the word “notes” can mean two different things, really: the file or the information it contains. Decoupling the two meanings, I really only care about the information. The file must exist, of course, but it is not important. What is important is the information in it.</p>
<p>If I think in terms of files, I need to spend time thinking about file names and locations, both when recording and retrieving information. I need to navigate to files and directories and/or think about and type out file names. This is all wasted time because, again, the files aren’t important, it’s the information in them that I care about.</p>
<p>Obsidian is powerful and allows us to work with our information in many ways without stopping our flow of thought to worry about files. Stop spending your time in the Navigation pane and start using Search and Bookmarks. That way, you can focus all your attention where it should be, on your information.</p>
</section>
<section id="information-first" class="level1">
<h1>Information First</h1>
<p>Ok, full disclosure, I do use two directories in my vault, one for templates and one for non-md files. Templates would be impractical to use lumped with all the other files. And attachments aren’t native Obsidian formats and raise other maintenance issues.</p>
<p>Obsidian offers core functionality that allows me to ignore files and focus on information. I’m referring to Search, Bookmarks and Unique Notes. The latter is effectively invisible in articles and videos, and the other two rarely come up. This is especially surprising with regard to Search because that’s the most efficient and powerful way to find information in your vault. Most presenters use Quick Switcher or the Navigator to create and access files in order to create or access information. This is an extra step, wasting time and energy and impeding the flow of thought.</p>
<p><code>Ctrl-Shft-F</code> is all I need to do to start querying my information. I don’t need to open any files, I just start typing what I’m looking for. If I think I might look for the same or similar information later, I can bookmark the filter.</p>
<p>When I want to write something down, I hit <code>Ctrl-U</code> (I’ve got an assigned hotkey), type my thought, then immediately return to my reading. Again, I don’t have to think about files and directories. It’s that simple, fast, and does not impede my thinking with irrelevant considerations and extra keystrokes.</p>
</section>
<section id="search" class="level1">
<h1>Search</h1>
<p>Simply typing the word or phrase I’m looking for in the search field will bring up all directly relevant notes on my topic. In case of TMI, I can specify that the terms should be in the same section or the same line. With Hover Editor, I can see the contents of each file listed without opening it, and even modify content directly if I want. I don’t need to actually open a file to get the information I’m looking for, or even modify it.</p>
<p>Search filters are just as powerful as Dataview queries. I can use logical AND, OR and NOT, group them with parentheses and sort by modified date. I can include or exclude based on any criteria (WHERE) and specify source (FROM). And I can save the filters as bookmarks. This way I don’t need to have a file that contains a query. The query results don’t “live” in a file, either. I do use Dataview queries frequently to aggregate information that I want to display information in notes. I do not use it to aggregate files that I want to interact with. That’s what Search is for.</p>
</section>
<section id="bookmarks" class="level1">
<h1>Bookmarks</h1>
<p>I can bookmark files, of course, but I don’t… instead I bookmark sections or blocks (information, not files). I can also bookmark searches and graphs, and organize bookmarks in directories and subdirectories. In most of the videos I see, people have the Navigator panel open “by default”. For me, it’s the bookmarks panel. The Bookmarks panel provides an information tree, the Navigator panel provides a file tree. I want the information tree.</p>
<p>I can use bookmarks and metadata to mimic directories if I want. My new notes used to go in a certain directory called +, and I had an “Inbox” note with a Dataview query to display the notes. The default template I now apply to every new note contains a field status:: new. I have also bookmarked a search filter “status:: new”. To see all of my new notes, I don’t need to open a directory or go to a file containing a Dataview query. All I need to do is click on the bookmark.</p>
<p>Any useful search can be bookmarked. I have a bookmark, “action”, for example, which shows all files requiring attention. I always have many bookmarked searches and graphs related to topics I’m focused on, organized in virtual directories.</p>
</section>
<section id="unique-notes" class="level1">
<h1>Unique Notes</h1>
<p>Most people are unfamiliar with Unique Notes, even though it is a core plugin. This plugin will generate a new file with a unique name in a pre-defined location and automatically apply a specified template. The idea of randomly-named files dumped in one directory does seem scary, but don’t worry. The default template is, for me at least, entirely metadata. Metadata can be either frontmatter or double-colon in-line style. My template currently looks like this:</p>
<pre><code>%%
topic-ex::
related-ex::
created-ex:: &lt;% tp.date.now("YYYY-MM-DD") %&gt;
last edit-ex::
type-ex:: article
status-ex:: 0
source-ex::
title-ex::
link-ex::
action-ex:: false
%%</code></pre>
<p>topic and related take meaningfully named links, possibly to non-existent files (Obsidian doesn’t care about existence either). type can be atomic, moc, log, etc. Everything else should be self-explanatory. I don’t have to fill any of this in when I’m making notes. I can just jot down the thought and keep reading and thinking. And I can get back to them later by opening my bookmarked “status:: new” search. When I revisit the note to make it atomic, I can fill in the rest of the fields.</p>
<p>With this plugin, as I said earlier, I just press Ctrl-U and start writing my information without ever thinking about file names and directories.</p>
<p>Efficiency Tip: When I’m reading a book or article, knowing I will take several notes in succession from the same source, I temporarily edit the default template to include basic information like source, title, etc. so I don’t have to type what is essentially boilerplate when I process the note and make it atomic.</p>
</section>
<section id="try-it-out-without-commitment" class="level1">
<h1>Try it out without commitment</h1>
<p>Since I started with Obsidian, I’ve changed the way I work multiple times. But rarely do I need to “clean up” old notes. For example, as my logging system has evolved, I have left all my old logs and their related Dataview queries in place, adding the newly written queries above them. It just means I have multiple query blocks instead of one in my Exercise Note, for example, but the information displayed remains the same.</p>
<p>Fuller disclosure: I actually have more directories in my vault than just templates and attachments. I used to use the ACCESS directory structure and have many, many notes. When I switched to this information first way, I stopped caring about files, remember, and I didn’t want to start this journey by launching into a massive exercise of moving files around, and adding metadata to all my old notes. That would be unacceptably ironic.</p>
<p>Obsidian is truly a compassionate ally. Very little needs to be done. I had to re-write some queries, as mentioned above. But any Dataview queries which aggregated files instead of information are no longer necessary anyway. For example, my Inbox note that displayed my new notes became irrelevant, since I now have a bookmarked filter, “status:: new”. If directory locations were really important in some queries, just add “(path:old-directory) OR” to your filters.</p>
<p>You could just continue to keep your Calendar notes in the same place as you do now, for that matter, or any other plugin that already has directory locations specified in settings. There is no need to be doctrinaire and rigid, after all, since we don’t care about directories anyway. Keep it simple, flexible, and don’t waste time on things that don’t add value.</p>
<p>Finally, I’ll point out that I didn’t give up on meaningful file names, just at the point of initially writing down an idea. One step in processing a note to ensure its completion and atomicity is to change the name of the file. At the processing stage, choosing a name does not interrupt the flow of thinking, but complements it, since it helps encapsulate an idea and solidify my understanding. It’s just not something to do when making a fleeting note, that’s all. And the name will be useful later.</p>
</section>
<section id="closing-thoughts" class="level1">
<h1>Closing Thoughts</h1>
<p>This article covers recording and retrieval of information. The second part covers how to analyze and synthesize information with this system.</p>
<p>I hope I have convinced you at least to give it a try. Obsidian offers so many ways for us to free our thinking and focus on information and flow of thought. Keep the file tree closed, instead use the information tree.</p>
<p>I am aware that this topic may be controversial because it goes so clearly against most of the approaches proposed on the internet. I do not mean any disrespect to the authors and videographers who have helped and inspired my journey with Obsidian, and to whom I am grateful.</p>
<p>Continue to <a href="http://biscotty.online/blogs/obsidian/freeing-your-thinking/freeing-your-thinking-part-2">Part 2</a></p>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>Obsidian</category>
  <category>PKM</category>
  <guid>https://biscotty.online/posts/obsidian/freeing-your-thinking/freeing-your-thinking-part-1/</guid>
  <pubDate>Thu, 24 Aug 2023 06:00:00 GMT</pubDate>
  <media:content url="https://biscotty.online/posts/obsidian/freeing-your-thinking/freeing-your-thinking-part-1/fyt-cover.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>Obsidian: Meaningless Names, No Directories, Now What?</title>
  <dc:creator>Brian Carey</dc:creator>
  <link>https://biscotty.online/posts/obsidian/freeing-your-thinking/freeing-your-thinking-part-2/</link>
  <description><![CDATA[ 





<section id="freeing-your-thinking-part-2" class="level1">
<h1>Freeing Your Thinking Part 2</h1>
<section id="analyzing-and-synthesizing-information" class="level2">
<h2 class="anchored" data-anchor-id="analyzing-and-synthesizing-information">Analyzing and Synthesizing Information</h2>
<p>Let me state my goal plainly: I want to be able to find all of my relevant information on a given topic and synthesize my understanding of that topic in a document or drawing, maybe for personal use, maybe for sharing or publishing.</p>
<p>For this purpose, a primary tool I use is Graph View. Yes, Graph View. And, in the process, I rehabilitate file names as a Valuable Thing.</p>
<p>To explain why Graph View is the best tool for this type of work, I need to re-visit the idea of Obsidian as a database.</p>
</section>
<section id="sql-and-nosql-databases" class="level2">
<h2 class="anchored" data-anchor-id="sql-and-nosql-databases">SQL and NoSQL Databases</h2>
<p>There are two different types of databases. Most common are relational databases, or SQL databases. These are table-based (think spreadsheets) and depend on pre-defining relationships and hierarchies between tables. But Obsidian is clearly not an SQL database, since it has no underlying table structure. It is, in fact, a NoSQL database, aka non-relational database.</p>
<p>The Substack Helper thought my detailed explanation too long for this article, so I moved most of the discussion to Part 3. I encourage you to read that before continuing, but it is not actually necessary</p>
<p><strong>TLDR: Since <a href="http://biscotty.online/blogs/obsidian/obsidian-no-sql-database/">Obsidian is a non-relational database</a>, I use it as such.</strong></p>
<p>Databases are queried for information. We have search filters that we can use for that, and which can be applied to both graphs and searches. We don’t get information from a database by opening a table or navigating to a record in the database. That is effectively the approach you take if you open a note to get its information.</p>
</section>
<section id="filenames-revisited" class="level2">
<h2 class="anchored" data-anchor-id="filenames-revisited">Filenames revisited</h2>
<p>In the first part, I talked about a workflow which created files with unique, meaningless names. If you have tried the proposed workflow, however, you will already have a number of meaningfully named notes in your vault. Every note has a topic:: field, which is a link or links, and those linked files have the name of the topic. The file may or may not actually exist. For Graph View, it doesn’t matter. You may have added links to the related:: field as well, thereby creating more meaningfully name notes. In the course of processing your atomic notes, you have given them meaningful names. Now that we are getting visual, meaningful names are useful. All your MOCs, existing or not, are already meaningfully named.</p>
</section>
<section id="graph-view" class="level2">
<h2 class="anchored" data-anchor-id="graph-view">Graph View</h2>
<p>The most frequent type of comment I see about Graph View is along the lines of “it’s pretty to look at, but when you have a lot of notes it just becomes a useless, chaotic mess”. That’s like complaining that a dataview query listing every note in your vault is just too overwhelming to deal with. Well, yeah! Other than when you are enjoying the eye candy, you would never look at an unfiltered graph any more than use an unfiltered query.</p>
<p>As described in part one, filters can be just as sophisticated as dataview queries, and graph filters works exactly like filters do in Search. So, if I want to explore the information I have relating to a topic, I start by typing the topic in the graph filter. Now I can see all the files containing the words of the topic, any of which are potentially related. Some may already be linked, but if I show orphans, I can see more files which could or should be linked to the topic. With Hover Editor, it’s easy to look at each document’s contents and decided whether they should be related or not without opening the file. And if they should be, I can add the link directly in Hover Editor. I never need to actually open any files. And I can add or remove words to my filter to find information that is related but perhaps worded differently. Finally, I can bookmark the graph and easily return to it later to discover new, related information using the same filters.</p>
<p>Assuming I have already created notes on a topic, I will already have a map of content named after the topic. If the file doesn’t yet exist, I can click on the node to create it and manually add the standard template. This Map of Content will already have a list of related files and a graph view which shows them, both accessible in the right sidebar. Now, as I look at potentially relevant notes in Graph View and add links to the topic:: field, my MOC is accumulating the links, and a neural network is developing.</p>
<p>The right sidebar version of the graph provides an additional feature, the ability to adjust “levels”. This allows you to not only see notes linked to the current note, but also notes that are linked to those notes. In a family tree this is kind of like cousins, cousins once-removed, and so forth. Some of these more distant relations should/could be directly linked to the main topic.</p>
<p>And remember, thanks to Hover Editor, I never have to open a file except when I create one.</p>
</section>
<section id="knowledge-trees" class="level2">
<h2 class="anchored" data-anchor-id="knowledge-trees">Knowledge Trees</h2>
<p>Honestly, sometimes my brain just wants a list of things without extra visual stimulation. With Bookmarks, I can build knowledge trees for a topic, basically like a rich outline.</p>
<p>I create a virtual (bookmark) directory for the topic. As I work with my information, I bookmark interesting blocks with information (I do not bookmark files, just information). These could be sections, paragraphs, images, embedded PDFs…anything really. Bookmarks can be named as well. For complex topics, I can create subdirectories as appropriate.</p>
<p>This results in what is essentially a detailed outline of all my information on a topic. A virtual Map of Content, if you will.</p>
</section>
</section>
<section id="synthesis" class="level1">
<h1>Synthesis</h1>
<p>After all of this, I am ready to write. I have a blank or bare-bones file on a topic I am interested in and about which I have accumulated a bunch of information. While the note may have no content yet, apart from the standard template, all the related information in my vault is ready and available visually in graphs as well as being outlined in my Bookmarks tab. In developing my ideas, I can apply or modify filters to any of these views if necessary. As I write, thanks again to Hover Editor, I don’t need to open any files to access (or even modify) the information in them. I can stay in my document, stay in my head, and not break my thought process.</p>
<section id="the-elephant-in-the-room" class="level2">
<h2 class="anchored" data-anchor-id="the-elephant-in-the-room">The Elephant in the Room</h2>
<p>More advanced users often use the Excalibrain plugin to visualize their vault. It is useful if you are thinking in terms of files and ontological relationships between them. I love the Excalidraw plugin and use it a lot for visual mocs. I had really hoped that I would like Excalibrain, too. But, for my process, it is inferior in a number of ways to Graph View.</p>
<p>Graph View allows me to easily discover and interact with notes that are not yet linked to my topic. I can see orphans and adjust my filter, asking my questions in different ways, adding and removing search terms to reveal more potential relevant information.</p>
<p>Visually, Excalibrain is blocky and static. Graph view is multi-form and dynamic. From a visual perspective, this is obviously personal preference. But the dynamism of Graph View is very useful and for me makes it superior.</p>
<p>As new notes are linked, all the nodes adjust to fit them in place, kind of like in your brain, in which new information shifts your thought patterns. Dragging nodes and changing force levels can emphasize relationships, and I can achieve elegant visual representations of my information this way. Notes can be visually grouped using colors, which is useful for complex topics with multiple sub-topics. The relative size of nodes indicates the information density of a note, suggesting other topics or sub-topics which could be developed. I find all of this useful.</p>
<p>In short, Graph View is fluid and flexible. Just the way I like my thinking.</p>
</section>
</section>
<section id="closing-thoughts" class="level1">
<h1>Closing Thoughts</h1>
<p>The approaches I’ve outlined allow me to focus almost entirely on my information and not my files. I obviously need to open files when I create them, or when working on a Map of Content or Production Note, but when exploring my information I don’t waste any physical or thinking time and energy on them.</p>
<p>If you’ve made it this far, thank you very much for reading. Constructive Criticism is Always Welcome.</p>
<p>Continue to <a href="http://biscotty.online/blogs/obsidian/freeing-your-thinking/freeing-your-thinking-workflow/">Part 3</a></p>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>Obsidian</category>
  <category>PKM</category>
  <category>Graphs</category>
  <guid>https://biscotty.online/posts/obsidian/freeing-your-thinking/freeing-your-thinking-part-2/</guid>
  <pubDate>Thu, 24 Aug 2023 06:00:00 GMT</pubDate>
  <media:content url="https://biscotty.online/posts/obsidian/freeing-your-thinking/freeing-your-thinking-part-2/fyt-cover.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>What does it mean that is a NoSQL Database?</title>
  <dc:creator>Brian Carey</dc:creator>
  <link>https://biscotty.online/posts/obsidian/obsidian-no-sql-database/</link>
  <description><![CDATA[ 





<section id="sql-and-nosql" class="level1">
<h1>SQL and NoSQL</h1>
<p>There are two different types of databases, relational and non-relational. Relational databases are the kind most people usually think about. Data is kept in tables, with columns for fields and rows for values. The tables have special columns which relate (link) them to other tables. A well-formed table in a spreadsheet is a database. If two are linked by a common column, that is a relational database.</p>
<p>Obsidian is obviously not a relational database.</p>
<p>SQL stands for Structured Query Language, and it is the syntax which was designed to work with relational databases. The association of the syntax and data structure is so strong that relational databases came to be referred to as SQL databases, even though SQL, the language, can be used with any type of database.</p>
<p>An SQL query should look familiar to you if you have used Dataview:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span> name <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> users <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">WHERE</span> location <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> “Earth” <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ORDER</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">BY</span> age;</span></code></pre></div>
<p>It’s just like Dataview queries, yet Obsidian is not an “SQL database”. My point is that we can use SQL queries to access our data even if it isn’t a relational database.</p>
<p>The other type of database, a non-relational database, is unfortunately called a NoSQL database. SQL, the language, can still be used to query data in a NoSQL database. If I’ve adequately confused you, let’s proceed.</p>
<p>Rather than storing data in tables, NoSQL databases store data in documents. Documents are text files written in a standard format, usually JSON (JavaScript Object Notation) but frequently YAML, which is the syntax used in frontmatter in Obsidian.</p>
<p>In a NoSQL database, documents contain information and metadata in key/value pairs. The metadata can be used to make relationships (links) between data (information). NoSQL databases are flexible and new key/value pairs can be added to a document without modifying a whole table. None of the relationships need be pre-defined, nor need they be hierarchical. NoSQL databases are ideal for data structures which consist of nodes (documents) and edges (links). Does any of this sound familiar?</p>
<p>Obsidian is a NoSQL database.</p>
</section>
<section id="on-ontologies" class="level1">
<h1>On Ontologies</h1>
<p>Commonly used organizational systems often focus on ontological relationships. Four relationships exist: parent, child, sibling, and friend. First, note that the first three are essentially the same since when a parent is defined, child and sibling relationships are logically specified. So we really only have two categories, which could just as easily be called “directly related” and “indirectly related”. Also, notice that in file-based hierarchical, ontological data structures a note (usually) has, rather unnaturally, only one parent.</p>
<p>Obsidian offers core functionality that allows me to ignore files and focus on information. I’m referring to Search, Bookmarks and Unique Notes. The latter is effectively invisible in articles and videos, and the other two rarely come up. This is especially surprising with regard to Search because that’s the most efficient and powerful way to find information in your vault. Most presenters use Quick Switcher or the Navigator to create and access files in order to create or access information. This is an extra step, wasting time and energy and impeding the flow of thought.</p>
<p>SQL databases rely on hierarchy. NoSQL databases don’t. By thinking in hierarchical, ontological terms, we tie ourselves to a table-based way of thinking. By thinking instead about direct and indirect relationships, a note can have multiple “parents” because it can naturally relate directly to more than one topic. (We all have at least two parents in life, and often have other people who fill the role as well.) These articles, for example, have two main topics, two direct relationships: Obsidian and Personal Knowledge Management. I don’t have to choose one or the other. I might decide to write about information processing, in which case these articles could be given another “parent”, the new topic.</p>
</section>
<section id="interacting-with-nosql-databases" class="level1">
<h1>Interacting with NoSQL Databases</h1>
<p>The word graph is commonly used to refer to many different types of charts, such as bar charts or line graphs. It has a more specific meaning, however, which is the specific type of graph produced by Graph View. This is the normal way that these data structures are visualized, which is why Graph View is the ideal way to visually explore our vault. This is also the way neural networks are visualized.</p>
<p>Getting information from NoSQL databases is done through queries, not by opening documents. Filters in Obsidian Search have all the capabilities of Dataview queries, with a somewhat simpler syntax.</p>
</section>
<section id="final-words" class="level1">
<h1>Final words</h1>
<p>I hope I have explained what it means to say that Obsidian is a NoSQL and the implications of that. Everything we write, every word, becomes part of a database, and we can use the power of databases to retrieve information. Stop using Obsidian as a file manager!</p>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>Obsidian</category>
  <guid>https://biscotty.online/posts/obsidian/obsidian-no-sql-database/</guid>
  <pubDate>Thu, 24 Aug 2023 06:00:00 GMT</pubDate>
  <media:content url="https://biscotty.online/posts/obsidian/obsidian-no-sql-database/fyt-cover.png" medium="image" type="image/png" height="81" width="144"/>
</item>
</channel>
</rss>
