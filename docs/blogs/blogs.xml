<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>biscotty&#39;s Workshop</title>
<link>https://biscotty.online/blogs/blogs.html</link>
<atom:link href="https://biscotty.online/blogs/blogs.xml" rel="self" type="application/rss+xml"/>
<description>For the love of learning</description>
<generator>quarto-1.6.42</generator>
<lastBuildDate>Tue, 25 Feb 2025 07:00:00 GMT</lastBuildDate>
<item>
  <title>Speed, Simplification and Segments</title>
  <dc:creator>Brian Carey</dc:creator>
  <link>https://biscotty.online/blogs/data-science/python-movingpandas-speed-segments/</link>
  <description><![CDATA[ 





<section id="simplification-speed-and-segments" class="level1">
<h1>Simplification, speed and segments</h1>
<section id="the-trek-so-far" class="level2">
<h2 class="anchored" data-anchor-id="the-trek-so-far">The trek so far</h2>
<p>In the first article, we took raw data from a trekking application, a GPX file in the form of standardized XML, parsed it to CSV, which we imported into a DataFrame with Pandas. Each record contains latitude, longitude, elevation and a time stamp. Using GeoPandas, we turned the latitude and longitude fields into POINT geometries and assigned an appropriate Coordinate Reference System so that we can work with the data geospatially. In the second article, we used MovingPandas to convert those POINTs into LINESTRINGs, allowing for calculations of distances not only along the route but to other locations or routes. We also learned how to auto-detect places along the trajectory where we paused.</p>
<p>In this article I will show how to incorporate the time dimension and calculate speed, duration, and other statistics, and how to split the path into segments. We already did this implicitly last time when we did stop detection, since a pause is based on time, and those pauses are natural points to split the route, and, not surprisingly, this is quite simple to do in MovingPandas. But first, we should look at simplification of the data.</p>
</section>
<section id="simplification" class="level2">
<h2 class="anchored" data-anchor-id="simplification">Simplification</h2>
<p>The raw data contains a level of granularity that is not necessarily needed, and can have a significant computational cost. The data can be simplified in different ways such as combining short time periods into longer ones, or smoothing by combining multiple paths within a certain area into a single, straight path. In this article, I’ll look at generalizing, down-sampling the time.</p>
<p>GPS trackers take frequent readings, seconds apart. Let’s look at the average time between readings in one of our treks. I’ll start by importing a GeoDataFrame with walks and bike rides in New Mexico, using the method described in the prior articles.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data/b4/combined.csv'</span>)</span>
<span id="cb1-2">gdf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gpd.GeoDataFrame(</span>
<span id="cb1-3">    df, </span>
<span id="cb1-4">    geometry<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>gpd.points_from_xy(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df.Lon, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df.Lat), </span>
<span id="cb1-5">    crs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4269</span></span>
<span id="cb1-6">).to_crs(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32111</span>)</span>
<span id="cb1-7">idList <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(gdf.groupby([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Id'</span>]).nunique().reset_index().Id)</span>
<span id="cb1-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, track <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(idList):</span>
<span id="cb1-9">    gdf.loc[gdf.Id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> track, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'trajectory_id'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> i</span>
<span id="cb1-10">gdf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Time'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_datetime(gdf.Time)</span>
<span id="cb1-11">tc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mpd.TrajectoryCollection(</span>
<span id="cb1-12">    gdf, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'trajectory_id'</span>, </span>
<span id="cb1-13">    t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Time'</span>, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Lon'</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Lat'</span></span>
<span id="cb1-14">)</span>
<span id="cb1-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(tc)</span></code></pre></div>
<pre><code>TrajectoryCollection with 130 trajectories</code></pre>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tc.plot(</span>
<span id="cb3-2">    column<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'trajectory_id'</span>,</span>
<span id="cb3-3">    figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), </span>
<span id="cb3-4">    cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'inferno'</span>, </span>
<span id="cb3-5">    legend<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb3-6">)</span>
<span id="cb3-7">ax.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Walks and Rides in NM'</span>)</span>
<span id="cb3-8">ax.set_axis_off()</span>
<span id="cb3-9">ctx.add_basemap(ax, crs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>gdf.crs,</span>
<span id="cb3-10">                source<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ctx.providers.Esri.NatGeoWorldMap)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<p><img src="https://biscotty.online/blogs/data-science/python-movingpandas-speed-segments/tda3_1.png" class="img-fluid"></p>
<p>Here are the total number of records, and the average time between readings:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> print_intervals_size(tc):</span>
<span id="cb4-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'''</span></span>
<span id="cb4-3"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    Avg sampling interval: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>((np.mean(</span>
<span id="cb4-4">        [t.get_sampling_interval().seconds <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> t <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> tc.trajectories]</span>
<span id="cb4-5">     )), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> seconds</span></span>
<span id="cb4-6"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    Total records: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>np<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>([t.size() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> t <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> tc.trajectories])<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-7"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">     '''</span>)</span>
<span id="cb4-8">print_intervals_size(tc)</span></code></pre></div>
<pre><code>Avg sampling interval: 5.92 seconds
Total records: 84319</code></pre>
<p>That’s way more than I need. A reading every 30 seconds is more than enough. I can use the <code>generalize()</code> function from MovingPandas to easily do so using the <code>tolerance</code> parameter:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">tc_generalized <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb6-2">    mpd.MinTimeDeltaGeneralizer(tc)</span>
<span id="cb6-3">        .generalize(tolerance<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>timedelta(seconds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>))</span>
<span id="cb6-4">)</span>
<span id="cb6-5">print_intervals_size(tc_generalized)</span></code></pre></div>
<pre><code>Avg sampling interval: 33.28 seconds
Total records: 17258</code></pre>
<p>I’ll extract a single trajectory from before and after so we can see what happens with simplification. First I’ll print some basic information about the trek. Moving pandas provides functions such as <code>get_duration</code> and <code>get_length</code> to obtain information. I’ll include the print code here to demonstrate how to access the values and what functions are available. To access columns in the underlying DataFrame, you can use <code>tc.df.SomeColumn</code>. Python’s f-strings make it easy to generate these reports. ```python def trek_info(traj): print(f’’’ Date: {traj.get_start_time().strftime(‘%x’)} Activity: {‘Bike Ride’ if traj.df.Sport[0] == 1 else ‘Walk’} Duration: {traj.get_duration().seconds/60:.0f} minutes Distance: {traj.get_length(units=‘mi’):.1f} miles Avg Speed: {((traj.get_length(units=‘mi’)) /<br>
(traj.get_duration().seconds/60**2)):.1f} mph Avg Temp: {(traj.df.Temp.mean()*9/5)+32:.0f} degrees F CRS: {traj.get_crs().to_epsg()} Points: {traj.size()} Bounds: ({“,”.join( map(str, [round(traj.to_crs(4269).get_bbox()[x], 3) for x in range(4)]))})</p>
<pre><code>    Max Elevation: {traj.get_max(column='Elev'):,} meters
    Min Elevation: {traj.get_min(column='Elev'):,} meters
    Avg Elevation: {traj.df.Elev.mean():,.0f} meters
    
            Time         Location (Lon/Lat)
    Start: {
      traj.get_start_time().strftime('%X')
      }  {
      tuple([round(x,3) for x in 
      traj.to_crs(4269).get_start_location().coords[0]])
      } degrees
    End:   {
      traj.get_end_time().strftime('%X')
      }  {
      tuple([round(x,3) for x in
      traj.to_crs(4269).get_end_location().coords[0]])
      } degrees
''')</code></pre>
<pre><code>```python
traj_bike = tc.trajectories[52]
traj_bike_gen = tc_generalized.trajectories[52]
trek_info(traj_bike)</code></pre>
<pre><code>         Date:      05/30/24
        Activity:  Bike Ride
        Duration:  63 minutes
        Distance:  13.4 miles
        Avg Speed: 12.8 mph
        Avg Temp:  76 degrees F
        CRS:       32111
        Points:    681
        Bounds:    (-106.714, 35.144, -106.648, 35.183)

        Max Elevation: 1,564 meters
        Min Elevation: 1,504 meters
        Avg Elevation: 1,528 meters
        
                Time         Location (Lon/Lat)
        Start: 18:41:12  (-106.708, 35.147) degrees
        End:   19:44:04  (-106.708, 35.148) degrees</code></pre>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">trek_info(traj_bike_gen)</span></code></pre></div>
<pre><code># Difference from `traj_bike`
        Points:    105</code></pre>
<p>Here is a before and after plot:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> itertools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> chain</span>
<span id="cb13-2">f, (ax1, ax2) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb13-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, traj <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>([traj_bike, traj_bike_gen]):</span>
<span id="cb13-4">    traj.plot(ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax1[i])</span>
<span id="cb13-5">    ctx.add_basemap(ax1[i], crs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>traj.crs, </span>
<span id="cb13-6">                    source<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ctx.providers.CartoDB.Voyager)</span>
<span id="cb13-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, traj <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>([traj_bike, traj_bike_gen]):</span>
<span id="cb13-8">    traj.plot(ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax2[i])</span>
<span id="cb13-9">    ctx.add_basemap(ax2[i], crs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>traj.crs, </span>
<span id="cb13-10">                    source<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ctx.providers.CartoDB.Voyager)</span>
<span id="cb13-11">    ax2[i].set_xlim(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">460000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">462000</span>)</span>
<span id="cb13-12">    ax2[i].set_ylim(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">462000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">464000</span>)</span>
<span id="cb13-13"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> axs <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> chain(ax1, ax2): </span>
<span id="cb13-14">    axs.set_axis_off() </span>
<span id="cb13-15">ax1[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Raw'</span>)</span>
<span id="cb13-16">ax1[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Generalized'</span>)</span>
<span id="cb13-17">f.suptitle(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Effect of Generalization to 30 Seconds'</span>)</span>
<span id="cb13-18">f.tight_layout()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<p><img src="https://biscotty.online/blogs/data-science/python-movingpandas-speed-segments/tda3_2.png" class="img-fluid"></p>
</section>
<section id="speed-and-sundry" class="level2">
<h2 class="anchored" data-anchor-id="speed-and-sundry">Speed and sundry</h2>
<p>Before moving to speed calculations, let’s make a quick plot:</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">t_plot(traj_bike_gen, column<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'speed'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<p><img src="https://biscotty.online/blogs/data-science/python-movingpandas-speed-segments/tda3_3.png" class="img-fluid"></p>
<p>I just plotted the speed column, but a quick check will show there is no speed column.</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">traj_bike_gen.df.columns</span></code></pre></div>
<pre><code>Index(['Id', 'Name', 'Lat', 'Lon', 'Elev', 'Temp', 'Weather', 'Sport',
       'Sport_s', 'trajectory_id', 'geometry'],
      dtype='object')</code></pre>
<p>Like Dorothy in Oz, you had the speed all along. MovingPandas does the calculation in the background for you. If you want an actual speed column, that’s easy enough:</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">tc_generalized.add_speed()</span>
<span id="cb17-2">tc_generalized.trajectories[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">52</span>].df.columns</span></code></pre></div>
<pre><code>Index(['Id', 'Name', 'Lat', 'Lon', 'Elev', 'Temp', 'Weather', 'Sport',
       'Sport_s', 'trajectory_id', 'geometry', 'mi/h', 'speed'],
      dtype='object')</code></pre>
<p>Since my CRS is in meters, so is the speed. If I’d prefer miles per hour, I can specify the units:</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">tc_generalized.add_speed(overwrite<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mi/h'</span>, units<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mi'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'h'</span>))</span>
<span id="cb19-2">tc_generalized.trajectories[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">52</span>].df.iloc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]</span></code></pre></div>
<pre><code>Id                                Workout-2024-05-30-18-41-12
Name                                              Albuquerque
Lat                                                 35.150019
Lon                                                 -106.7125
Elev                                                     1536
Temp                                                     24.2
Weather                                                     0
Sport                                                       1
Sport_s                                                  Bike
trajectory_id                                            52.0
geometry         POINT (457860.4830821714 460313.87076766626)
mi/h                                                13.109903
speed                                                5.860651
Name: 2024-05-30 18:43:54.251000, dtype: object</code></pre>
<p>In fact, we can automagically create distance, acceleration, direction, and time delta columns as well, all with arbitrary units. Here I’ll add a number of metrics in both metric and imperial units, by supplying the units and column names as parameters.</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">tc_generalized.add_distance(overwrite<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"distance (km)"</span>, units<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"km"</span>)</span>
<span id="cb21-2">tc_generalized.add_distance(overwrite<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"distance (mi)"</span>, units<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mi"</span>)</span>
<span id="cb21-3">tc_generalized.add_distance(overwrite<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"distance (meters)"</span>, units<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"m"</span>)</span>
<span id="cb21-4">tc_generalized.add_distance(overwrite<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"distance (feet)"</span>, units<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ft"</span>)</span>
<span id="cb21-5">tc_generalized.add_timedelta(overwrite<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb21-6">tc_generalized.add_speed(overwrite<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"speed (ft/min)"</span>, units<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ft"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"min"</span>))</span>
<span id="cb21-7">tc_generalized.add_speed(overwrite<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"speed (km/hour)"</span>, units<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"km"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"h"</span>))</span>
<span id="cb21-8">tc_generalized.add_speed(overwrite<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"speed (mi/hour)"</span>, units<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mi"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"h"</span>))</span>
<span id="cb21-9">tc_generalized.add_acceleration(</span>
<span id="cb21-10">    overwrite<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"acceleration (mph/s)"</span>, units<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mi"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"h"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"s"</span>)</span>
<span id="cb21-11">)</span>
<span id="cb21-12">tc_generalized.add_acceleration(</span>
<span id="cb21-13">    overwrite<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"acceleration (kmph/s)"</span>, units<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"km"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"h"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"s"</span>)</span>
<span id="cb21-14">)</span>
<span id="cb21-15">tc_generalized.add_direction(overwrite<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb21-16">tc_generalized.add_angular_difference(overwrite<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb21-17">(tc_generalized.trajectories[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">52</span>]</span>
<span id="cb21-18"> .df.reset_index()</span>
<span id="cb21-19"> .loc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'speed'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'angular_difference'</span>])</span></code></pre></div>
<pre><code>speed                                  5.860651
mi/h                                  13.109903
distance (km)                          0.175855
distance (mi)                          0.109271
distance (meters)                     175.85469
distance (feet)                      576.951082
timedelta                0 days 00:00:30.006000
speed (ft/min)                      1153.671431
speed (km/hour)                       21.098343
speed (mi/hour)                       13.109903
acceleration (mph/s)                   0.104386
acceleration (kmph/s)                  0.167992
direction                            349.062474
angular_difference                    70.594237
Name: 5, dtype: object</code></pre>
<p>And now, I can generate summaries somewhat easier:</p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">traj_bike_gen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tc_generalized.trajectories[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">52</span>]</span>
<span id="cb23-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'''</span></span>
<span id="cb23-3"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    Total Distance: </span></span>
<span id="cb23-4"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">        </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>traj_bike_gen<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'distance (meters)'</span>]</span>
<span id="cb23-5">            <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>item()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:&gt;4.1f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> kilometers</span></span>
<span id="cb23-6"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">        </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>traj_bike_gen<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'distance (mi)'</span>]</span>
<span id="cb23-7">            <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>item()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:&gt;4.1f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> miles</span></span>
<span id="cb23-8"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    Average Speed:</span></span>
<span id="cb23-9"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">        </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>traj_bike_gen<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'speed (km/hour)'</span>]</span>
<span id="cb23-10">            <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>mean()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>item()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:&gt;4.1f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> kilometers per hour</span></span>
<span id="cb23-11"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">        </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>traj_bike_gen<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'speed (mi/hour)'</span>]</span>
<span id="cb23-12">            <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>mean()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>item()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:&gt;4.1f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> miles per hour</span></span>
<span id="cb23-13"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'''</span>)</span></code></pre></div>
<pre><code>    Total Distance: 
        18.5 kilometers
        11.5 miles
    Average Speed:
        19.2 kilometers per hour
        11.9 miles per hour</code></pre>
<p>I’m going to also add an elevation delta. I’d like to plot the speed next to the change in elevation. So I’ll add the column.</p>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">traj_bike_gen.df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ElevD'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb25-2">    [traj_bike_gen.df.iloc[i].Elev <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> traj_bike_gen.df.iloc[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].Elev </span>
<span id="cb25-3">     <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(traj_bike_gen.df))]</span>
<span id="cb25-4">)</span></code></pre></div>
<p>Here is a plot of speed next to the elevation changes.</p>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">f, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(nrows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>))</span>
<span id="cb26-2">traj_bike_gen.plot(ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], column<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'speed'</span>, </span>
<span id="cb26-3">                   cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'inferno'</span>, legend<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, </span>
<span id="cb26-4">                  linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb26-5">traj_bike_gen.plot(ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], column<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ElevD'</span>, </span>
<span id="cb26-6">                   cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'inferno'</span>, legend<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, </span>
<span id="cb26-7">                  linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb26-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>): </span>
<span id="cb26-9">    ctx.add_basemap(ax[i], crs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>traj_bike_gen.crs, </span>
<span id="cb26-10">                   source<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ctx.providers.Esri.NatGeoWorldMap)</span>
<span id="cb26-11">    ax[i].set_axis_off()</span>
<span id="cb26-12">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Speed'</span>)</span>
<span id="cb26-13">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Elevation Change'</span>)</span>
<span id="cb26-14">f.tight_layout()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<p><img src="https://biscotty.online/blogs/data-science/python-movingpandas-speed-segments/tda3_4.png" class="img-fluid"></p>
</section>
<section id="segmentation" class="level2">
<h2 class="anchored" data-anchor-id="segmentation">Segmentation</h2>
<p>The final topic I want to cover is route segmentation. This includes splitting the entire route by logical segments such as every 15 minutes or at stop points. It can also mean extracting a specific segment based on time or geographic location. MovingPandas has a variety of <code>Splitter</code> classes, depending on the purpose.</p>
<p>To demonstrate the split on stops, I’ll use the NYC walk from the last article, since I actually paused occasionally. In fact, the stop detector we used in that exercise could have given us the segments directly with it’s <code>get_stop_segments()</code> method, but here I’ll use the <code>StopSplitter</code>.</p>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">df_ny <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gpd.read_file(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data/ny_trek.gpkg'</span>)</span>
<span id="cb27-2">df_ny[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sport'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span></span>
<span id="cb27-3">ny_walk <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb27-4">    mpd.TrajectoryCollection(</span>
<span id="cb27-5">    df_ny, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'trajectory_id'</span>, </span>
<span id="cb27-6">    t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Time'</span>, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Lon'</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Lat'</span></span>
<span id="cb27-7">    ).trajectories[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb27-8"></span>
<span id="cb27-9">split_stop <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (mpd.StopSplitter(ny_walk)</span>
<span id="cb27-10">              .split(</span>
<span id="cb27-11">                min_duration <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> timedelta(seconds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span>), </span>
<span id="cb27-12">                max_diameter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>))</span>
<span id="cb27-13">split_stop</span></code></pre></div>
<pre><code>TrajectoryCollection with 18 trajectories</code></pre>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">f, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> t_plot(ny_walk)</span>
<span id="cb29-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>): </span>
<span id="cb29-3">    split_stop.trajectories[i].plot(ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b'</span>)</span></code></pre></div>
<p><img src="https://biscotty.online/blogs/data-science/python-movingpandas-speed-segments/tda3_5.png" class="img-fluid"></p>
<p>I can use the <code>TemporalSplitter</code> to divide my trek into hour-long segments:</p>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">split_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (mpd.TemporalSplitter(ny_walk)</span>
<span id="cb30-2">             .split(mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'hour'</span>))</span></code></pre></div>
<p><img src="https://biscotty.online/blogs/data-science/python-movingpandas-speed-segments/tda3_8.png" class="img-fluid"></p>
<p>I can also extract a single segment based on an arbitrary time range using <code>get_segment_between</code>. I’ll create two <code>datatime</code> variables to see where I was between 4:00 and 5:00 local time.</p>
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">t1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> datetime(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2024</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># UTC Time</span></span>
<span id="cb31-2">t2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> t1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> timedelta(minutes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>)</span>
<span id="cb31-3">segment <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ny_walk.get_segment_between(t1,t2)</span>
<span id="cb31-4">t_plot(segment)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<p><img src="https://biscotty.online/blogs/data-science/python-movingpandas-speed-segments/tda3_6.png" class="img-fluid"></p>
<p>Finally, I can extract the portion of the path which lies in a specific geographical area by using <code>clip</code> and intersecting the path with a POLYGON or bounding box. Here is an example:</p>
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">xmin, xmax, ymin, ymax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">191000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">192500</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">210000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">211000</span></span>
<span id="cb32-2">polygon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Polygon(</span>
<span id="cb32-3">    [(xmin, ymin), (xmin, ymax), (xmax, ymax), (xmax, ymin), (xmin, ymin)]</span>
<span id="cb32-4">)</span>
<span id="cb32-5">intersections <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ny_walk.clip(polygon) </span>
<span id="cb32-6"></span>
<span id="cb32-7">f, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> t_plot(ny_walk)</span>
<span id="cb32-8">gpd.GeoSeries(polygon).plot(ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lightblue'</span>, </span>
<span id="cb32-9">                           alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb32-10">intersections.plot(ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<p><img src="https://biscotty.online/blogs/data-science/python-movingpandas-speed-segments/tda3_7.png" class="img-fluid"></p>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>I hope you had fun with these articles, and were able to harness your own GPS data to create some lovely maps of your excursions. If you subscribe to one of the apps like Strava or AllTrails you can get get their maps to underlay with your routes. MovingPandas has many more functions such as the <code>Smoother</code> referred to earlier, the <code>Cleaner</code> to identify and remove outliers, an <code>Aggregator</code> which generalizes across trajectories within a collection, and it can track multiple people in a single trajectory collection.</p>
<p>If you are already comfortable in Python’s data science space, but haven’t yet worked with geospatial data, I hope you were intrigued enough to look into it more, as explicitly including geospatial dimensions in your analyses is enriching without being terribly difficult. If you are a Pythonista without any DS experience, maybe this will help you jump in. I find that Python is such a simple, expressive language, and the libraries of Pandas, GeoPandas, and MovingPandas are such a joy to work with.</p>
<p>Happy Coding ## Additional Code To make the article easier to read, I have put code here which would need to be run before trying any of the code examples in the article. This includes the required libraries and the helper function I use when making the graphs. All code can be found on my <a href="https://github.com/biscotty666">GitHub repo</a>.</p>
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd </span>
<span id="cb33-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> geopandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> gpd </span>
<span id="cb33-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> movingpandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> mpd </span>
<span id="cb33-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb33-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> contextily <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> ctx</span>
<span id="cb33-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb33-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> shapely.geometry <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Polygon</span>
<span id="cb33-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> datetime <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> datetime, timedelta</span>
<span id="cb33-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> warnings</span>
<span id="cb33-10">warnings.filterwarnings(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ignore'</span>)</span>
<span id="cb33-11"></span>
<span id="cb33-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> t_plot(traj, </span>
<span id="cb33-13">            figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), </span>
<span id="cb33-14">            source<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ctx.providers.Esri.NatGeoWorldMap, </span>
<span id="cb33-15">            title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, </span>
<span id="cb33-16">            column<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb33-17">            ):</span>
<span id="cb33-18">    sport <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Bike Ride'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> traj.df.Sport[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Walk'</span></span>
<span id="cb33-19">    f, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>figsize)</span>
<span id="cb33-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> column:</span>
<span id="cb33-21">        traj.plot(ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax, lw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, column<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>column, </span>
<span id="cb33-22">                  cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'inferno'</span>, legend<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb33-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb33-24">        traj.plot(ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax, lw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cyan'</span>)</span>
<span id="cb33-25">    ctx.add_basemap(ax, crs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>traj.crs, </span>
<span id="cb33-26">                    source<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>source)</span>
<span id="cb33-27">    ax.set_axis_off()</span>
<span id="cb33-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> title: </span>
<span id="cb33-29">        ax.set_title(title)</span>
<span id="cb33-30">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb33-31">        ax.set_title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>sport<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> in </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>traj<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>Name[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> on </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>traj<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>index[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>strftime(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%x</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb33-32">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> f, ax</span>
<span id="cb33-33"></span>
<span id="cb33-34">annot_props <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(</span>
<span id="cb33-35">    xytext<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), </span>
<span id="cb33-36">    textcoords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"offset fontsize"</span>, </span>
<span id="cb33-37">    c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>, weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bold'</span>, ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'center'</span>,</span>
<span id="cb33-38">    arrowprops<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(arrowstyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-'</span>, ec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'orange'</span>)</span>
<span id="cb33-39">)</span>
<span id="cb33-40"></span>
<span id="cb33-41"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> trek_info(traj):</span>
<span id="cb33-42">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'''</span></span>
<span id="cb33-43"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">        Date:      </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>traj<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get_start_time()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>strftime(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%x</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb33-44"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">        Activity:  </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Bike Ride'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> traj<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>Sport[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Walk'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb33-45"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">        Duration: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>traj<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get_duration()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>seconds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:&gt;3.0f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">   minutes</span></span>
<span id="cb33-46"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">        Distance: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>traj<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get_length(units<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mi'</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:&gt;5.1f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> miles</span></span>
<span id="cb33-47"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">        Avg Temp:  </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>(traj.df.Temp.mean()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.0f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> degrees F</span></span>
<span id="cb33-48"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">        CRS:       </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>traj<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get_crs()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>to_epsg()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb33-49"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">        Points:    </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>traj<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>size()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb33-50"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">        Bounds:    (</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", "</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join(</span>
<span id="cb33-51">                          <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>,</span>
<span id="cb33-52">                          [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(traj.to_crs(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4269</span>).get_bbox()[x], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) </span>
<span id="cb33-53">                           <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)]))<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb33-54"></span>
<span id="cb33-55"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">        Max Elevation: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>traj<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get_max(column<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Elev'</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:,}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> meters</span></span>
<span id="cb33-56"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">        Min Elevation: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>traj<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get_min(column<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Elev'</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:,}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> meters</span></span>
<span id="cb33-57"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">        Avg Elevation: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>traj<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>Elev<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>mean()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:,.0f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> meters</span></span>
<span id="cb33-58"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">        </span></span>
<span id="cb33-59"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">                Time         Location (Lon/Lat)</span></span>
<span id="cb33-60"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">        Start: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb33-61">          traj<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get_start_time()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>strftime(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%X</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb33-62">          <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">  </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb33-63">          <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>([<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(x,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> </span>
<span id="cb33-64">          traj.to_crs(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4269</span>).get_start_location().coords[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]])</span>
<span id="cb33-65">          <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> degrees</span></span>
<span id="cb33-66"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">        End:   </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb33-67">          traj<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get_end_time()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>strftime(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%X</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb33-68">          <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">  </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb33-69">          <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>([<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(x,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span></span>
<span id="cb33-70">          traj.to_crs(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4269</span>).get_end_location().coords[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]])</span>
<span id="cb33-71">          <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> degrees</span></span>
<span id="cb33-72"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    '''</span>)</span></code></pre></div>


</section>
</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>GIS</category>
  <category>Python</category>
  <category>Data Science</category>
  <guid>https://biscotty.online/blogs/data-science/python-movingpandas-speed-segments/</guid>
  <pubDate>Tue, 25 Feb 2025 07:00:00 GMT</pubDate>
  <media:content url="https://biscotty.online/blogs/data-science/python-movingpandas-speed-segments/tda3_3.png" medium="image" type="image/png" height="103" width="144"/>
</item>
<item>
  <title>Points to Paths in Python</title>
  <dc:creator>Brian Carey</dc:creator>
  <link>https://biscotty.online/blogs/data-science/python-movingpandas-points-paths/</link>
  <description><![CDATA[ 





<section id="from-points-to-paths" class="level1">
<h1>From Points to Paths</h1>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>In the <a href="https://biscotty.online/blogs/gpx-gps-data">prior article</a>, I showed how to use raw GPS data generated from a sport tracker to create maps and profile elevations along the path. The GeoDataFrames created were just a collection of point geometries with time, location and elevation data. To profile, for example, speed, requires converting the point geometries to line geometries, calculating distances and time deltas between each point, and converting between coordinate systems and units of measurement. If we were concerned with bearing, we would need to also calculate angles between the line segments we create. None of this is overly complicated, just awfully tedious. But this being Python, there is a dedicated library that makes all of this easy peasy.</p>
<p>MovingPandas is a library that extends Pandas/Geopandas by taking the list of point geometries and turning them into “trajectories”. It generates directed lines between consecutive points, and provides functions for all of the calculations I mentioned above and more.</p>
<p>In this article I will show how to create and work with trajectories. I’ll then show how to use MovingPandas to find locations along the path based on time, find the distance from the path to nearby locations, and finally how to identify locations where I paused or stopped. In the next article, I will show how to simplify and smooth paths, profile speed, and segment the trajectories based on various criteria. As before, an expanded version of the code in this article is available in my <a href="https://github.com/biscotty666/GPX">repository</a>.</p>
</section>
<section id="getting-ready-for-movingpandas" class="level2">
<h2 class="anchored" data-anchor-id="getting-ready-for-movingpandas">Getting ready for MovingPandas</h2>
<p>I’ll start by loading the necessary libraries and creating a helper function for mapping as well as some defaults for annotating points on the maps. Then i will load some data converted from raw GPS data as described in the previous article.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd </span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> geopandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> gpd </span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> movingpandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> mpd </span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> contextily <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> ctx</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> datetime <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> datetime, timedelta</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> geopandas.tools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> reverse_geocode, geocode</span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> warnings</span>
<span id="cb1-9">warnings.filterwarnings(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ignore'</span>)</span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> t_plot(traj, </span>
<span id="cb1-12">            figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>), </span>
<span id="cb1-13">            source<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ctx.providers.CartoDB.Voyager, </span>
<span id="cb1-14">            title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb1-15">    f, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>figsize)</span>
<span id="cb1-16">    traj.plot(ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax, lw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chartreuse'</span>)</span>
<span id="cb1-17">    ctx.add_basemap(ax, crs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>traj.crs, </span>
<span id="cb1-18">                    source<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>source)</span>
<span id="cb1-19">    ax.set_axis_off()</span>
<span id="cb1-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> title: </span>
<span id="cb1-21">        ax.set_title(title)</span>
<span id="cb1-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb1-23">        ax.set_title(</span>
<span id="cb1-24">            <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Walk in </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>traj<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>Name[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> on </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>traj<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>index[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>strftime(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%x</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb1-25">        )</span>
<span id="cb1-26">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> f, ax</span>
<span id="cb1-27"></span>
<span id="cb1-28">annot_props <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(</span>
<span id="cb1-29">    xytext<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), </span>
<span id="cb1-30">    textcoords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"offset fontsize"</span>, </span>
<span id="cb1-31">    c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>, weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bold'</span>, ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'center'</span>,</span>
<span id="cb1-32">    arrowprops<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(arrowstyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-'</span>, ec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'orange'</span>)</span>
<span id="cb1-33">)</span>
<span id="cb1-34"></span>
<span id="cb1-35">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data/b3/combined.csv'</span>)</span>
<span id="cb1-36">gdf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gpd.GeoDataFrame(</span>
<span id="cb1-37">    df, </span>
<span id="cb1-38">    geometry<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>gpd.points_from_xy(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df.Lon, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df.Lat), </span>
<span id="cb1-39">    crs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4269</span></span>
<span id="cb1-40">).to_crs(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32111</span>)</span></code></pre></div>
<p>MovingPandas requires an integer id for each walk, which I don’t have, so I’ll create one based on the string id. I’ll also convert the <code>Time</code> from a generic object to <code>datetime64</code>.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">idList <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(gdf.groupby([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Id'</span>]).nunique().reset_index().Id)</span>
<span id="cb2-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, track <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(idList):</span>
<span id="cb2-3">    gdf.loc[gdf.Id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> track, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'trajectory_id'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> i</span>
<span id="cb2-4">gdf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Time'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_datetime(gdf.Time)</span>
<span id="cb2-5">gdf.info()</span></code></pre></div>
<pre><code>&lt;class 'geopandas.geodataframe.GeoDataFrame'&gt;
RangeIndex: 3044 entries, 0 to 3043
Data columns (total 10 columns):
 #   Column         Non-Null Count  Dtype              
---  ------         --------------  -----              
 0   Id             3044 non-null   object             
 1   Name           3044 non-null   object             
 2   Lat            3044 non-null   float64            
 3   Lon            3044 non-null   float64            
 4   Elev           3044 non-null   int64              
 5   Time           3044 non-null   datetime64[ns, UTC]
 6   Temp           3044 non-null   float64            
 7   Weather        3044 non-null   int64              
 8   geometry       3044 non-null   geometry           
 9   trajectory_id  3044 non-null   float64            
dtypes: datetime64[ns, UTC](1), float64(4), geometry(1), int64(2), object(2)
memory usage: 237.9+ KB</code></pre>
<p>One of the walks in the collection was in New York City, and the rest in New Jersey. Since the locations are pretty far apart, I’ll split out the NYC walk from the others.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">gdf_nj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gdf.loc[gdf.Name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'New York'</span>]</span>
<span id="cb4-2">gdf_ny <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gdf.loc[gdf.Name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'New York'</span>]</span>
<span id="cb4-3">gdf_nj.shape, gdf_ny.shape</span></code></pre></div>
<pre><code>((2063, 10), (981, 10))</code></pre>
</section>
<section id="getting-going-with-movingpandas" class="level2">
<h2 class="anchored" data-anchor-id="getting-going-with-movingpandas">Getting going with MovingPandas</h2>
<p>Now I’m ready to create the trajectories. The data will be imported as a <em>Trajectory Collection</em> which will contain the individual <em>Trajectories</em>. I’ll first create one from the NJ group, which contains several walks.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">tc_nj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mpd.TrajectoryCollection(</span>
<span id="cb6-2">    gdf_nj, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'trajectory_id'</span>, </span>
<span id="cb6-3">    t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Time'</span>, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Lon'</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Lat'</span></span>
<span id="cb6-4">)</span>
<span id="cb6-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(tc_nj)</span></code></pre></div>
<pre><code>TrajectoryCollection with 6 trajectories</code></pre>
<p>Let’s see what this looks like.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> traj_collection.plot(</span>
<span id="cb8-2">    column<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'trajectory_id'</span>, </span>
<span id="cb8-3">    legend<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Set1'</span>)</span>
<span id="cb8-4">ax.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Walks in NJ, September 2024'</span>)</span>
<span id="cb8-5">ctx.add_basemap(ax, crs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>gdf_proj.crs,</span>
<span id="cb8-6">                source<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ctx.providers.Esri.WorldTopoMap)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<p><img src="https://biscotty.online/blogs/data-science/python-movingpandas-points-paths/nj1.png" class="img-fluid"></p>
<p>I can extract a single trajectory and its underlying data frame.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">traj_nj1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tc_nj.trajectories[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span>
<span id="cb9-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(traj_nj1)</span></code></pre></div>
<pre><code>Trajectory 2.0 (2024-09-07 21:20:23.975000 to 2024-09-07 22:03:42.022000) | Size: 267 | Length: 5173.1m
Bounds: (177912.1946985984, 243124.49067874879, 179216.17084672116, 245408.85808260852)
LINESTRING (178912.27991325516 244815.1747420021, 178912.27991325516 244815.1747420021, 178903.67850</code></pre>
<p>The associated data is stored in the <code>df</code> attribute:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(traj_nj1.df.info())</span></code></pre></div>
<pre><code>&lt;class 'geopandas.geodataframe.GeoDataFrame'&gt;
DatetimeIndex: 267 entries, 2024-09-07 21:20:23.975000 to 2024-09-07 22:03:42.022000
Data columns (total 9 columns):
 #   Column         Non-Null Count  Dtype   
---  ------         --------------  -----   
 0   Id             267 non-null    object  
 1   Name           267 non-null    object  
 2   Lat            267 non-null    float64 
 3   Lon            267 non-null    float64 
 4   Elev           267 non-null    int64   
 5   Temp           267 non-null    float64 
 6   Weather        267 non-null    int64   
 7   geometry       267 non-null    geometry
 8   trajectory_id  267 non-null    float64 
dtypes: float64(4), geometry(1), int64(2), object(2)
memory usage: 29.0+ KB
None</code></pre>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">t_plot(traj_nj1, source<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ctx.providers.OpenStreetMap.HOT)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<p><img src="https://biscotty.online/blogs/data-science/python-movingpandas-points-paths/nj2.png" class="img-fluid"></p>
<p>Another way to extract a specific trajectory is using MovingPandas’ <code>filter</code> function, as so:</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">t_plot(</span>
<span id="cb14-2">tc_nj.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Name"</span>, [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Park Ridge"</span>])</span>
<span id="cb14-3">     .trajectories[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb14-4">)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<p><img src="https://biscotty.online/blogs/data-science/python-movingpandas-points-paths/nj3.png" class="img-fluid"></p>
<p>For the rest of the article I’ll use the longest trek I have in this data set, the one in New York. I’ll create the Trajectory Collection, extract the single trajectory and find the start and end times and locations.</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">tc_ny <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mpd.TrajectoryCollection(</span>
<span id="cb15-2">    gdf_ny, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'trajectory_id'</span>, </span>
<span id="cb15-3">    t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Time'</span>, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Lon'</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Lat'</span></span>
<span id="cb15-4">)</span>
<span id="cb15-5">traj_ny <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tc_ny.trajectories[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb15-6">st <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> traj_ny.get_start_time()</span>
<span id="cb15-7">sl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> traj_ny.to_crs(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4269</span>).get_start_location()</span>
<span id="cb15-8">et <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> traj_ny.get_end_time()</span>
<span id="cb15-9">el <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> traj_ny.to_crs(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4269</span>).get_end_location()</span>
<span id="cb15-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'''</span></span>
<span id="cb15-11"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">            Time         Location (Lon/Lat)</span></span>
<span id="cb15-12"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">            </span></span>
<span id="cb15-13"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    Start: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>st<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>strftime(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%X</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">   </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>sl<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>coords[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> degrees</span></span>
<span id="cb15-14"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    End:   </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>et<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>strftime(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%X</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">   </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>el<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>coords[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">  degrees</span></span>
<span id="cb15-15"></span>
<span id="cb15-16"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    Duration:  </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>traj_ny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get_duration()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>seconds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.0f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> minutes</span></span>
<span id="cb15-17"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    Distance:  </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>traj_ny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get_length(units<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mi'</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> miles</span></span>
<span id="cb15-18"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    Direction: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>traj_ny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get_direction()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.0f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> degrees</span></span>
<span id="cb15-19"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'''</span>)</span></code></pre></div>
<pre><code>            Time         Location (Lon/Lat)
            
    Start: 17:43:42   (-73.991157, 40.752025) degrees
    End:   20:49:09   (-73.98894, 40.726903)  degrees

    Duration:  185 minutes
    Distance:  6.69 miles
    Direction: 176 degrees</code></pre>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">t_plot(traj_ny)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<p><img src="https://biscotty.online/blogs/data-science/python-movingpandas-points-paths/ny1.png" class="img-fluid"></p>
</section>
<section id="right-place-right-time" class="level2">
<h2 class="anchored" data-anchor-id="right-place-right-time">Right place, right time</h2>
<p>First, let me find my position at an arbitrary time, and then 30 minutes later. Where was I, for example, at 18:00, and then 45 minutes later?</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> datetime(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2024</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>)</span>
<span id="cb18-2">t2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> timedelta(minutes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>)</span>
<span id="cb18-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'''</span></span>
<span id="cb18-4"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    Nearest:      </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>traj_ny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>to_crs(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4269</span>)</span>
<span id="cb18-5">                    <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get_position_at(t, method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nearest'</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb18-6"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    Interpolated: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>traj_ny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>to_crs(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4269</span>)</span>
<span id="cb18-7">                    <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get_position_at(t, method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'interpolated'</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb18-8"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    Previous row: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>traj_ny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>to_crs(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4269</span>)</span>
<span id="cb18-9">                    <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get_position_at(t, method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ffill'</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb18-10"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    Next row:     </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>traj_ny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>to_crs(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4269</span>)</span>
<span id="cb18-11">                    <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get_position_at(t, method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bfill'</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb18-12"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'''</span>)</span></code></pre></div>
<pre><code>    Nearest:      POINT (-74.003574 40.756368)
    Interpolated: POINT (-74.00361304734385 40.75638409846633)
    Previous row: POINT (-74.003688 40.756415)
    Next row:     POINT (-74.003574 40.756368)</code></pre>
<p>I can use the <code>geocode</code> tool provided by geopandas to get the nearest addresses at these points so I can show them on the map. Pay attention to crs, since nominatim expects lat/lon coordinates and we currently have projected coordinates.</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">point <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> traj_ny.get_position_at(t, method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'interpolated'</span>)</span>
<span id="cb20-2">point_up <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> traj_ny.to_crs(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4269</span>).get_position_at(t, method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'interpolated'</span>)</span>
<span id="cb20-3">point2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> traj_ny.get_position_at(t2, method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'interpolated'</span>)</span>
<span id="cb20-4">point2_up <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> traj_ny.to_crs(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4269</span>).get_position_at(t2, method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'interpolated'</span>)</span>
<span id="cb20-5"></span>
<span id="cb20-6">rg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> reverse_geocode(</span>
<span id="cb20-7">    [point_up, point2_up], </span>
<span id="cb20-8">    provider<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nominatim"</span>, </span>
<span id="cb20-9">    user_agent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"your_project"</span>, </span>
<span id="cb20-10">    timeout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb20-11">).to_crs(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32111</span>)</span>
<span id="cb20-12"></span>
<span id="cb20-13">f, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> t_plot(traj_ny)</span>
<span id="cb20-14">gpd.GeoSeries(point).plot(ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>, markersize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb20-15">gpd.GeoSeries(point2).plot(ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>, markersize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb20-16"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x, y, label <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(rg.geometry.x, rg.geometry.y, rg.address):</span>
<span id="cb20-17">    ax.annotate(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>label<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">','</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>label<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">','</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, </span>
<span id="cb20-18">                xy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(x, y), <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>annot_props)</span>
<span id="cb20-19">ax.set_ylim(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">211500</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">214500</span>)</span>
<span id="cb20-20">ax.set_xlim(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">191400</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">192500</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<p><img src="https://biscotty.online/blogs/data-science/python-movingpandas-points-paths/ny2.png" class="img-fluid"></p>
<p>It might be more interesting to plot my location at regular intervals along the walk. What about plotting my location every 30 minutes?</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">int_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (et <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> st) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> timedelta(seconds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>))</span>
<span id="cb21-2">int_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (et <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> st) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> int_count</span>
<span id="cb21-3">intervals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [st <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>int_length) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(int_count)]</span>
<span id="cb21-4">interval_points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [traj_ny.to_crs(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4269</span>).get_position_at(</span>
<span id="cb21-5">                    t, method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'interpolated'</span>) </span>
<span id="cb21-6">                   <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> t <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> intervals]</span>
<span id="cb21-7">rg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> reverse_geocode(</span>
<span id="cb21-8">    interval_points, </span>
<span id="cb21-9">    provider<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nominatim"</span>, </span>
<span id="cb21-10">    user_agent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"your_project"</span>, </span>
<span id="cb21-11">    timeout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb21-12">).to_crs(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32111</span>)</span>
<span id="cb21-13"></span>
<span id="cb21-14">f, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> t_plot(traj_ny, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>))</span>
<span id="cb21-15">rg.plot(ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax, c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>, markersize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb21-16"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x, y, label <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(rg.geometry.x, rg.geometry.y, rg.address):</span>
<span id="cb21-17">    ax.annotate(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>label<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">','</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>label<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">','</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, </span>
<span id="cb21-18">                xy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(x, y), <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>annot_props)</span>
<span id="cb21-19">ax.set_title(ax.get_title() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Every 30 minutes'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<p><img src="https://biscotty.online/blogs/data-science/python-movingpandas-points-paths/ny3.png" class="img-fluid"></p>
</section>
<section id="i-was-so-close" class="level2">
<h2 class="anchored" data-anchor-id="i-was-so-close">I was so close</h2>
<p>Not only can you calculate distances along the path, which we will look at more in the next article, but you can calculate the distance from points along the trajectory to other locations not on the path. It will determine the closest you came to other points, lines or polygons, including, of course, other trajectories. For example, when I’m in New York, I love to visit the Strand and the huge Barnes and Noble on Union Square. I didn’t have time this trip, sadly, but I’m curious how close I was from those stores.</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">addresses <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [{</span>
<span id="cb22-2">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'id'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb22-3">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The Strand"</span>, </span>
<span id="cb22-4">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'addr'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"828 Broadway, New York, NY 10003"</span></span>
<span id="cb22-5">            }, </span>
<span id="cb22-6">            {</span>
<span id="cb22-7">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'id'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb22-8">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Barnes and Noble"</span>, </span>
<span id="cb22-9">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'addr'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"33 East 17th Street, 10003, New York"</span></span>
<span id="cb22-10">            }]</span>
<span id="cb22-11">add_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(addresses)</span>
<span id="cb22-12">geo <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> geocode(</span>
<span id="cb22-13">    add_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'addr'</span>], </span>
<span id="cb22-14">    provider<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nominatim'</span>, </span>
<span id="cb22-15">    user_agent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'your_project'</span>, </span>
<span id="cb22-16">    timeout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb22-17">)</span>
<span id="cb22-18">book_stores <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> geo.join(add_df).to_crs(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32111</span>)</span>
<span id="cb22-19"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(book_stores)</span></code></pre></div>
<pre><code>                        geometry  \
0  POINT (192997.822 211055.516)   
1  POINT (193108.568 211461.041)   

                                             address  id              name  \
0  Strand Bookstore, 828, Broadway, University Vi...   1        The Strand   
1  Barnes &amp; Noble, 33, East 17th Street, Union Sq...   2  Barnes and Noble   

                                   addr  
0      828 Broadway, New York, NY 10003  
1  33 East 17th Street, 10003, New York</code></pre>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">dists_to <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [traj_ny.distance(book_stores.loc[i, [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'geometry'</span>]], </span>
<span id="cb24-2">                            units<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mi'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] </span>
<span id="cb24-3">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(book_stores))]</span>
<span id="cb24-4">store_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [book_stores.loc[i, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>] </span>
<span id="cb24-5">               <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(book_stores))]</span>
<span id="cb24-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(book_stores)):</span>
<span id="cb24-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Closest distance to </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>store_names[i]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> was </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dists_to[i]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.1f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> miles'</span>) </span></code></pre></div>
<pre><code>Closest distance to The Strand was 0.4 miles
Closest distance to Barnes and Noble was 0.6 miles</code></pre>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">f, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> t_plot(traj_ny, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>))</span>
<span id="cb26-2">book_stores.plot(ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>, markersize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb26-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x, y, label <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(book_stores.geometry.x, </span>
<span id="cb26-4">                       book_stores.geometry.y, </span>
<span id="cb26-5">                       book_stores.name):</span>
<span id="cb26-6">    ax.annotate(label, xy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(x,y), <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>annot_props)</span></code></pre></div>
<p><img src="https://biscotty.online/blogs/data-science/python-movingpandas-points-paths/ny4.png" class="img-fluid"></p>
</section>
<section id="stop-detection" class="level2">
<h2 class="anchored" data-anchor-id="stop-detection">Stop detection</h2>
<p>In this final section I’ll look at stop detection. Here I’ll just be considering stop locations. In the next article, I’ll show how to use the same approach as one method for segmenting the trajectories. Stop detection requires instantiation of a stop detector which will provide the functions needed.</p>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">detector <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mpd.TrajectoryStopDetector(traj_ny)</span></code></pre></div>
<p>The detector takes parameters to determine how long a pause constitutes a <code>stop</code>, and how far you need to move to constitute movement.</p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">stop_points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> detector.get_stop_points(</span>
<span id="cb28-2">    min_duration<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>timedelta(seconds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span>), max_diameter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb28-3">)</span>
<span id="cb28-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(stop_points)</span></code></pre></div>
<pre><code>18</code></pre>
<p>We can look up the addresses nearest to the stop points, and plot some of them on the map.</p>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">stop_points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stop_points.set_crs(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32111</span>)</span>
<span id="cb30-2">rg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> reverse_geocode(</span>
<span id="cb30-3">    stop_points.to_crs(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4269</span>).geometry, </span>
<span id="cb30-4">    provider<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nominatim"</span>, </span>
<span id="cb30-5">    user_agent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"your_project"</span>, timeout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb30-6">).to_crs(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32111</span>)</span></code></pre></div>
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">f, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> t_plot(traj_ny)</span>
<span id="cb31-2">stop_points.plot(ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'none'</span>, markersize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, ec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>)</span>
<span id="cb31-3">point_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span>]</span>
<span id="cb31-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (x, y), label <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(</span>
<span id="cb31-5">                    rg.iloc[point_labels].geometry.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(</span>
<span id="cb31-6">                        <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> p: p.coords[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]), </span>
<span id="cb31-7">                    rg.iloc[point_labels].address):</span>
<span id="cb31-8">    ax.annotate(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>label<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">','</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>label<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">','</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, </span>
<span id="cb31-9">                xy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(x, y), <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>annot_props)</span>
<span id="cb31-10">ax.set_title(ax.get_title() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Stop Points'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<p><img src="https://biscotty.online/blogs/data-science/python-movingpandas-points-paths/ny5.png" class="img-fluid"></p>
</section>
<section id="interactive-graphing" class="level2">
<h2 class="anchored" data-anchor-id="interactive-graphing">Interactive graphing</h2>
<p>Showing interactive graphing in the context of a published article is not very useful, but I should point out that MovingPandas supports both <code>hvplot</code> with <code>folium</code> as well as GeoPandas’ <code>explore()</code>, both of which can be useful tools for identifying areas of interest. This is an example with <code>explore()</code>.</p>
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> traj_ny.explore(</span>
<span id="cb32-2">    column<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"trajectory_id"</span>,</span>
<span id="cb32-3">    tooltip<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"t"</span>,</span>
<span id="cb32-4">    popup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb32-5">    style_kwds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"weight"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>},</span>
<span id="cb32-6">    name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Time"</span>,</span>
<span id="cb32-7">)</span>
<span id="cb32-8"></span>
<span id="cb32-9">stop_points.explore(</span>
<span id="cb32-10">    m<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>m,</span>
<span id="cb32-11">    color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>,</span>
<span id="cb32-12">    tooltip<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"stop_id"</span>,</span>
<span id="cb32-13">    popup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb32-14">    marker_kwds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"radius"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>},</span>
<span id="cb32-15">    name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Stop points"</span>,</span>
<span id="cb32-16">)</span></code></pre></div>
<p><img src="https://biscotty.online/blogs/data-science/python-movingpandas-points-paths/ny6.png" class="img-fluid"></p>
</section>
<section id="next-steps" class="level2">
<h2 class="anchored" data-anchor-id="next-steps">Next steps</h2>
<p>In the third article, I will address issues of generalization and simplification which can be important when working with large data sets. I’ll show how to generate speed, duration and distance information, and how to segment the trajectories based on geometries, stops, and other criteria. I hope that these articles are proving interesting and useful. Please visit my <a href="https://biscotty.online">website</a> and <a href="https://github.com/biscotty666/GPX">repository</a> for more code, articles and updates.</p>


</section>
</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>Data Science</category>
  <category>GIS</category>
  <category>Python</category>
  <guid>https://biscotty.online/blogs/data-science/python-movingpandas-points-paths/</guid>
  <pubDate>Mon, 03 Feb 2025 07:00:00 GMT</pubDate>
  <media:content url="https://biscotty.online/blogs/data-science/python-movingpandas-points-paths/ny6.png" medium="image" type="image/png" height="87" width="144"/>
</item>
<item>
  <title>Obsidian and Jupyter Notebooks</title>
  <dc:creator>Brian Carey</dc:creator>
  <link>https://biscotty.online/blogs/obsidian/obsidian-jupyter/</link>
  <description><![CDATA[ 





<section id="obsidian-and-jupyter-notebooks" class="level1">
<h1>Obsidian and Jupyter Notebooks</h1>
<blockquote class="blockquote">
<p>Personal Knowledge Management for Data Science</p>
</blockquote>
<section id="motivation" class="level2">
<h2 class="anchored" data-anchor-id="motivation">Motivation</h2>
<p>Jupyter notebooks, or more properly iPython notebooks, are fantastic tools for data exploration and modeling. You can run bits of code, interspersed with blocks of markdown, allowing you to easily work with data and present analyses and forecasts in a visual and interactive format. Notebooks can be easily shared via GitHub, or run on-line with Colab.</p>
<p>The problem with iPython notebooks, from a Personal Knowledge Management perspective, is they end up being “books on the shelf”. For Obsidian users and PKM practitioners, the whole point is to get away from keeping information in notebooks, with all the uselessness that that implies. One could, as you will see, just do data exploration directly in Obsidian instead of in a standard iPython notebook. But Obsidian is not an IDE. The ecosystem around the interactive Python notebook IDEs, be it Jupyter Lab itself, or VS Code, etc, is so useful, that working in Obsidian while exploring data and creating models would be unacceptably tedious. Using fit-for-purpose tools is very important for efficiency.</p>
<p>We need a painless way to capture all this information in our vault, making <em>notes</em> out of the notebooks. How can we easily make this information future-useful, without repeating/duplicating our efforts or doing a ton of copy/paste? In this article, I’ll explain the solution that works well for me, ensuring Obsidian-speed access to any bits of information I have in my notebooks, as well as making review and study activities so much more pleasant. And, of course, my canvases have all gotten richer as well.</p>
</section>
<section id="setting-up-obsidian" class="level2">
<h2 class="anchored" data-anchor-id="setting-up-obsidian">Setting up Obsidian</h2>
<p>The community plugin needed to accomplish this is called <a href="https://github.com/twibiral/obsidian-execute-code">Execute Code</a>, written by Tim Wibiral together with Jupyter and a library called <code>nbconvert</code>. The latter will convert the notebooks to markdown, and the plugin allows you to execute the code directly within a note. To get started, create a virtual environment for Obsidian to use. If you aren’t using virtual environments, please start now! It’s simple, and you will avoid future problems. From the command line, do:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-p</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$HOME</span>/.config/venvs <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$_</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> venv obsidian_venv</span>
<span id="cb1-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">source</span> obsidian_venv/bin/activate</span>
<span id="cb1-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--upgrade</span> pip</span>
<span id="cb1-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install jupyterlab nbconvert </span></code></pre></div>
<p>You can install other libraries like Pandas and Matplotlib as well into the virtual environment with pip install. Jupyter lab and nbconvert will be necessary to convert the notebooks to markdown. At this point, you could launch <code>jupyter lab</code>, but there is no need to. After installing packages, you can exit the virtual environment with <code>deactivate</code>. Should you need to install more packages later, you can type <code>source $HOME/.config/venvs/obsidian_venv/bin/activate</code> to re-enter the virtual environment and <code>pip install</code> other packages.</p>
<p>In Obsidian, install the Execute Code plugin. After installing the plugin you must point it to the version of Python you want to use, in this case the one we made in the virtual environment above. In the settings for the plugin, under the language-specific settings, choose Python from the drop down list. For <em>Python Path</em>, enter <code>/home/directory/.config/venvs/obsidian_venv/bin/python</code>.</p>
<p>With that done, any code block with the keyword <code>python</code> added directly after the opening back ticks of the block can be run in the Note. In Read view, a <em>Run</em> button will appear by each code block, allowing you to execute the code in the block. After execution, there will be a <em>Clear</em> button to clear up output that you want removed from the note. Code can also be executed from Edit view by using the keyword <code>run-python</code> rather than simply <code>python</code>. The plugin offers a command to run all the code in the note, as well as a command to view and kill any active runtimes.</p>
</section>
<section id="processing-a-notebook" class="level2">
<h2 class="anchored" data-anchor-id="processing-a-notebook">Processing a notebook</h2>
<p>Jupyter Lab can export an <code>ipynb</code> file directly to markdown! As of writing, VS Code can only export to <code>py</code>, <code>pdf</code> or <code>html</code>. From the file menu, select <em>Export</em> and choose <em>Markdown</em>. This will generate a zipped archive containing a markdown page, along with any image files in the notebook. The problem with this approach is that you will find all of the image files named <code>output</code> something, and so after exporting a few notebooks, there will be name conflicts in your vault.</p>
<p>Using the command line avoids this problem, and is in any case much more efficient. You will need to activate your virtual environment with <code>source</code> as described above. Then type</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">jupyter</span> nbconvert <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--to</span> Markdown your_notebook.ipynb</span></code></pre></div>
<p>This will generate an <code>md</code> file which can be copied into your vault. If there are images from generated by the output, like graphs and other visuals, these will be put in a directory created by the above command. If you copy this directory, with all the image files into the vault directory that you use for attachments, the new <code>md</code> file will find them. (It is important to copy the directory itself and not just the files, since the new note will expect to find them there.)</p>
<p>Once in Obsidian you can process your Notebooks as any other file, breaking them into bite-size chunks of information. I rely heavily on “Extract this heading”, available with a right-click on any heading in a note. This replaces the section with a link to a newly-created note containing the section’s content. I find it useful to use a template that loads common libraries, since they will need to be added them at the top of the new files.</p>
<p>When converting your notebooks to notes, be aware that different notes do not share the same runtime. Be sure to include all the variables/calculations necessary for the part of the code you extracted in the new file, as this will not be available from another file’s state. Also, any images that you link to in the markdown sections of the original notebook will need to be manually copied into the vault, as only images generated from code in the file will be exported. ## Closing Thoughts</p>
<p>I first started using Obsidian for the specific purpose of studying data science. My use of Obsidian broadened considerably and quickly once I first began with it. However, after some time I realized that, because of the nature of iPython notebooks, and the necessity, or really the pleasure, of using them, I found myself many months later in the very position I was trying to avoid vis-a-vis my notes: information I needed was somewhere in my piles of notebooks, and I turned to Google more often than searching through my notebooks.</p>
<p>Now I can immerse myself in the Python project or study I am focusing on, knowing that after I’m finished, generating proper atomic notes from the work I’m doing will be a breeze. I hope that you may find this information useful. Happy coding!</p>


</section>
</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>Obsidian</category>
  <category>Python</category>
  <category>Data Science</category>
  <guid>https://biscotty.online/blogs/obsidian/obsidian-jupyter/</guid>
  <pubDate>Wed, 20 Mar 2024 06:00:00 GMT</pubDate>
  <media:content url="https://biscotty.online/blogs/obsidian/obsidian-jupyter/Jupyter-Obsidian.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>Trail Mapping with Python</title>
  <dc:creator>Brian Carey</dc:creator>
  <link>https://biscotty.online/blogs/data-science/gpx-gps-data/</link>
  <description><![CDATA[ 





<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>In the world of Data Science, I’m most strongly drawn to geographically-linked data. Choropleth maps, for example, are about the most powerful way to convey statistical information and get a point across, if you will forgive the intolerable pun. Attaching data to geography somehow makes information more relatable, more personal, and more easily absorbable. It gives people a reference point, a “you are here”, if you will, or maybe “There, but for the grace of God…”.</p>
<p>I am fortunate to live in New Mexico where I can take beautiful and varied walks, hikes and bike rides nearly every day, which I do. I record most of my excursions with an app on my phone, and I realized recently that I must have lots of data that I can play with to do mapping and analysis. I was pleased to discover that the simple app I use on my phone to track my excursions can easily export the data to GPX format. I had no idea what GPX format was then, but assumed it was some standard, so things looked promising, and off I went.</p>
<p>The data I use comes from an app called SportActive. Apps like AllTrails and Strava are wonderful, especially when exploring new places, but they are overkill IMO for simple tracking of daily, and largely repetitive, activities. SportActive simply records my walks and rides, without asking if I want to share my walk with my “friends” like a meal on Facebook. (Disclaimer: I have no financial relationship with SportActive, although if you could arrange such a thing I’d happily change this disclaimer.)</p>
<p>In this and two following articles, I will show how the data can be used with Python to map and analyze the GPS information. I will show how to do analyses such as profiling elevations, calculating speeds and durations, identifying pauses, and segmenting paths based on various criteria. This type of analysis, which I’m doing for fun, is the very same as could be used to, for example, study bird migrations or the movement of container ships.</p>
<p>Python provides many libraries based around the pandas ecosystem which make working with geospatial data easy. GeoPandas extends Pandas to incorporate geometries and coordinate reference systems. GPX data is a series of geolocated points, which is easily handled by geopandas. MovingPandas facilitates turning the point geometries into “trajectories”, allowing for calculations of speed, duration and direction.</p>
<p>This article will cover parsing the raw GPS data to a csv file, which I then import into a geopandas <code>GeoDataFrame</code>. From that I will create maps and generate some basic statistical information about the trek such as distance and elevation profiles. These articles assume basic familiarity with Python, experience with Pandas being helpful. An expanded version of the code in the articles can be obtained from my GitHub repository at https://github.com/bisotty666/GPX.</p>
</section>
<section id="xml-to-csv" class="level1">
<h1>XML to CSV</h1>
<p>The GPX file turns out to be an xml file with standardized tags. Most importantly, it contains a list of tags called <code>trkpt</code> which, as the name implies, are points along the trek, each recording the geographic location in latitude and longitude, together with the elevation and the time of the recording. An example is</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode xml code-with-copy"><code class="sourceCode xml"><span id="cb1-1">&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">trkpt</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> lat=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"41.043858"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> lon=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-74.063712"</span>&gt;</span>
<span id="cb1-2">    &lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ele</span>&gt;79&lt;/<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ele</span>&gt;</span>
<span id="cb1-3">    &lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">time</span>&gt;2024-09-05T15:25:13.858Z&lt;/<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">time</span>&gt;</span>
<span id="cb1-4">&lt;/<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">trkpt</span>&gt;</span></code></pre></div>
<p>This format cannot be directly imported into a <code>GeoDataFrame</code>, but <code>csv</code> files can be, and fortunately, there is a Python library called BeautifulSoup that can not only efficiently parse HTML, it can also process XML files, which I can write a <code>csv</code> file. So I’ll start by importing it as well as the <code>csv</code> library, and “make the soup”:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> bs4 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BeautifulSoup</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> csv</span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(gpx_file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb2-5">    contents <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f.read()</span>
<span id="cb2-6"></span>
<span id="cb2-7">soup <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BeautifulSoup(contents, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xml'</span>)</span></code></pre></div>
<p>I’ll grab the elements of interest, as well as some metadata, with:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">tracks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> soup.find_all(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'trkpt'</span>)</span>
<span id="cb3-2">elevations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> soup.find_all(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ele'</span>)</span>
<span id="cb3-3">times <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> soup.find_all(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'time'</span>)</span>
<span id="cb3-4">temp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> soup.find(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'s2t:temperature'</span>).text</span>
<span id="cb3-5">weather <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> soup.find(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'s2t:weather'</span>).text</span>
<span id="cb3-6">name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> soup.find(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>).text</span></code></pre></div>
<p>I expect to concatenate a bunch of these files, so I’ll also add the filename itself as a column:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">sf_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  os.path.splitext(gpx_file)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb4-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.split(sf_name)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb4-3">csv_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sf_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.csv'</span></span></code></pre></div>
<p>Then I make a list of the points with each of these elements connected with their geographic coordinates:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb5-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> track, elevation, time <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(tracks, elevations, times):</span>
<span id="cb5-3">    latitude <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> track[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lat'</span>]</span>
<span id="cb5-4">    longitude <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> track[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lon'</span>]</span>
<span id="cb5-5">    elevation_value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> elevation.text</span>
<span id="cb5-6">    time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.text</span>
<span id="cb5-7">    data.append([<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>, latitude, longitude, elevation_value,</span>
<span id="cb5-8">                time, temp, weather])</span></code></pre></div>
<p>And now I can write the CSV file:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(csv_file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w'</span>, newline<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> csvfile:</span>
<span id="cb6-2">    writer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> csv.writer(csvfile)</span>
<span id="cb6-3">    writer.writerow([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Id'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Lat'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Lon'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Elev'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Time'</span>,</span>
<span id="cb6-4">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Temp'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Weather'</span>])</span>
<span id="cb6-5">    writer.writerows(data)</span></code></pre></div>
<p>Since I want to process a lot of these files, as well as concatenate them, I put this together in a script for batch processing, which I’ll add at the end. # Importing into Geopandas With the data in a csv file, I am ready to make the <code>GeoDataFrame</code>. First I’ll import the libraries I’ll be using in this section:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd </span>
<span id="cb7-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> geopandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> gpd </span>
<span id="cb7-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> contextily <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> ctx</span>
<span id="cb7-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb7-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb7-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> statsmodels.nonparametric.smoothers_lowess <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> lowess</span>
<span id="cb7-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> shapely <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> LineString</span></code></pre></div>
<p>I’ll use pandas to import the <code>csv</code> file to a pandas <code>DataFrame</code>:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">trek_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data.csv'</span>)</span>
<span id="cb8-2">trek_df.iloc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
<pre><code>Id                    wo-2024-09-05
Lat                       41.043858
Lon                      -74.063712
Elev                             79
Time       2024-09-05T15:25:13.004Z
Temp                          20.51
Weather                           0
Name: 0, dtype: object</code></pre>
<p>Then I’ll create a GeoPandas <code>GeoDataFrame</code> using the lat/lon coordinates and an appropriate coordinate reference:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">trek_gdf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gpd.GeoDataFrame( </span>
<span id="cb10-2">    trek_df, </span>
<span id="cb10-3">    geometry<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>gpd.points_from_xy(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>trek_df.Lon, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>trek_df.Lat)</span>
<span id="cb10-4">).set_crs(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4269</span>)</span>
<span id="cb10-5">trek_gdf.info()</span></code></pre></div>
<pre><code>&lt;class 'geopandas.geodataframe.GeoDataFrame'&gt;
RangeIndex: 650 entries, 0 to 649
Data columns (total 8 columns):
 #   Column    Non-Null Count  Dtype   
---  ------    --------------  -----   
 0   Id        650 non-null    object  
 1   Lat       650 non-null    float64 
 2   Lon       650 non-null    float64 
 3   Elev      650 non-null    int64   
 4   Time      650 non-null    object  
 5   Temp      650 non-null    float64 
 6   Weather   650 non-null    int64   
 7   geometry  650 non-null    geometry
dtypes: float64(3), geometry(1), int64(2), object(2)
memory usage: 40.8+ KB</code></pre>
<p>That looks good, with no null values. The <code>Time</code> should be a <code>datetime</code> type, so I’ll go ahead and change that:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">trek_gdf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Time'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_datetime(trek_gdf.Time)</span></code></pre></div>
<p>OK, let’s make the first map. I’ll use <code>matplotlib</code> together which <code>contextily</code>, a library which provides a wide variety of base maps with ease:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb13-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> contextily <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> ctx</span>
<span id="cb13-3"></span>
<span id="cb13-4">f, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span>
<span id="cb13-5">trek_gdf.plot(ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, markersize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b'</span>) </span>
<span id="cb13-6">ctx.add_basemap(ax, crs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>trek_gdf.crs, source<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ctx.providers.OpenStreetMap.Mapnik)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<p><img src="https://biscotty.online/blogs/data-science/gpx-gps-data/pr3.png" class="img-fluid"></p>
<p>Sweet. In order to do calculations, however, I’ll need to project the data to a crs appropriate for the location, which is New Jersey. A quick visit to <code>epsg.io</code> suggests <code>EPSG:32111</code>, so I’ll use that. It’s in meters, not feet, which I personally prefer anyway.:</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">trek_proj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> trek_gdf.to_crs(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32111</span>)</span>
<span id="cb14-2">f, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span>
<span id="cb14-3">trek_proj.plot(ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, markersize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b'</span>) </span>
<span id="cb14-4">ctx.add_basemap(ax, crs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>trek_proj.crs, source<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ctx.providers.CartoDB.Voyager)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<p><img src="https://biscotty.online/blogs/data-science/gpx-gps-data/pr4.png" class="img-fluid"></p>
</section>
<section id="elevations" class="level1">
<h1>Elevations</h1>
<p>Let’s profile the elevations for the walk. First, some basic statistics:</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">line <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LineString(trek_proj.geometry)</span>
<span id="cb15-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'''</span></span>
<span id="cb15-3"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    The walk was </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>line<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.1f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> kilometers</span></span>
<span id="cb15-4"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    Elevations: </span></span>
<span id="cb15-5"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">        Initial:   </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>trek_proj<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>iloc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>Elev<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> meters </span></span>
<span id="cb15-6"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">        Final:     </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>trek_proj<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>iloc[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>Elev<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> meters </span></span>
<span id="cb15-7"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">        Highest:   </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>trek_proj<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>Elev<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> meters </span></span>
<span id="cb15-8"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">        Lowest:    </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>trek_proj<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>Elev<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> meters </span></span>
<span id="cb15-9"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'''</span>)</span></code></pre></div>
<pre><code>    The walk was 7.0 kilometers
    Elevations: 
        Initial:   79 meters 
        Final:     22 meters 
        Highest:   81 meters 
        Lowest:    11 meters</code></pre>
<p>And a basic plot:</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">f, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb17-2">ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> trek_proj.Elev.plot()</span>
<span id="cb17-3">ax.set_title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'''</span></span>
<span id="cb17-4"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    Elevation profile for </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>trek_gdf<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>Name[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> on </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>trek_gdf<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>Time[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>strftime(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%x</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb17-5"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    '''</span>)</span>
<span id="cb17-6">ax.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'meters'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<p><img src="https://biscotty.online/blogs/data-science/gpx-gps-data/pr5.png" class="img-fluid"></p>
<p>Using Seaborn, I can use regression to smooth this out as much or as little as I want:</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">sns.set_theme()</span>
<span id="cb18-2">plot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.lmplot(data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>trek_proj, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Point'</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Elev'</span>, </span>
<span id="cb18-3">           order<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, truncate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, aspect<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb18-4">plot.figure.subplots_adjust(top<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>, left<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.11</span>)</span>
<span id="cb18-5">plot.fig.suptitle(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'''</span></span>
<span id="cb18-6"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    Smoothed profile for </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>trek_gdf<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>Name[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> on </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>trek_gdf<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>Time[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>strftime(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%x</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb18-7"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    '''</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<p><img src="https://biscotty.online/blogs/data-science/gpx-gps-data/pr6.png" class="img-fluid"></p>
<p>And here’s smoothing with <code>lowess</code>:</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">sns.set_theme(rc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'figure.figsize'</span>:(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)})</span>
<span id="cb19-2">plot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.lmplot(data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>trek_proj, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Point'</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Elev'</span>, </span>
<span id="cb19-3">                  lowess<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, truncate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, aspect<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb19-4">plot.figure.subplots_adjust(top<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>, left<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.11</span>)</span>
<span id="cb19-5">plot.fig.suptitle(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'''</span></span>
<span id="cb19-6"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    Lowess smoothed profile for </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>trek_gdf<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>Name[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> on </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>trek_gdf<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>Time[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>strftime(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%x</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb19-7"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    '''</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<p><img src="https://biscotty.online/blogs/data-science/gpx-gps-data/pr7.png" class="img-fluid"></p>
<section id="next-steps" class="level2">
<h2 class="anchored" data-anchor-id="next-steps">Next steps</h2>
<p>I naturally want to be able to make calculations of speed and distance, identify pauses, and do other exploration. Starting from discrete points, the steps to do so manually would be simple but exceedingly tedious. Fortunately there is a wonderful library called <code>movingpandas</code> which makes these things all very simple. I’ll explore that in the next articles.</p>
<p>I’ll go ahead and save the <code>GeoDataFrames</code> for future use:</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">trek_gdf.to_file(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data/trek_gdf.gpkg'</span>, driver<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GPKG'</span>)</span>
<span id="cb20-2">trek_projected.to_file(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data/trek_projected.gpkg'</span>, driver<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GPKG'</span>)</span></code></pre></div>
</section>
</section>
<section id="code" class="level1">
<h1>Code</h1>
<p>The code for this article is available in my <a href="https://github.com/biscotty666/GPX">Github Repository</a> in the form of a Jupyter notebook. Here is the final script for batch processing the files:</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb21-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Convert a directory of gpx files to csv.</span></span>
<span id="cb21-3"></span>
<span id="cb21-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The script captures trek points with coordinates,</span></span>
<span id="cb21-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">elevation and time stamp as well as trek name and </span></span>
<span id="cb21-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">weather conditions.</span></span>
<span id="cb21-7"></span>
<span id="cb21-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The script requires an input directory path.</span></span>
<span id="cb21-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb21-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> bs4 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BeautifulSoup</span>
<span id="cb21-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> csv</span>
<span id="cb21-12"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sys</span>
<span id="cb21-13"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pathlib</span>
<span id="cb21-14"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb21-15"></span>
<span id="cb21-16"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(sys.argv) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:</span>
<span id="cb21-17">    sys.exit(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Must supply an input directory"</span>)</span>
<span id="cb21-18">inPath <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sys.argv[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb21-19"></span>
<span id="cb21-20">files <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [os.path.join(inPath, f) </span>
<span id="cb21-21">         <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> f <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> os.listdir(inPath) </span>
<span id="cb21-22">         <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> f.endswith(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".gpx"</span>)]</span>
<span id="cb21-23">cfile <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(os.path.join(inPath, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'combined.csv'</span>))</span>
<span id="cb21-24"></span>
<span id="cb21-25"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(cfile, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w'</span>, newline<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb21-26">    writer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> csv.writer(f)</span>
<span id="cb21-27">    writer.writerow([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Id'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Lat'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Lon'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Elev'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Time'</span>,</span>
<span id="cb21-28">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Temp'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Weather'</span>])</span>
<span id="cb21-29"></span>
<span id="cb21-30"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> gpx_file <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> files:</span>
<span id="cb21-31">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(gpx_file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb21-32">       contents <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f.read()</span>
<span id="cb21-33"></span>
<span id="cb21-34">    soup <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BeautifulSoup(contents, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xml'</span>)</span>
<span id="cb21-35"></span>
<span id="cb21-36">    tracks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> soup.find_all(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'trkpt'</span>)</span>
<span id="cb21-37">    elevations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> soup.find_all(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ele'</span>)</span>
<span id="cb21-38">    times <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> soup.find_all(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'time'</span>)</span>
<span id="cb21-39">    temp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> soup.find(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'s2t:temperature'</span>).text</span>
<span id="cb21-40">    weather <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> soup.find(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'s2t:weather'</span>).text</span>
<span id="cb21-41">    name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> soup.find(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>).text</span>
<span id="cb21-42">    sf_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  os.path.splitext(gpx_file)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb21-43">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.split(sf_name)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb21-44">    csv_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sf_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.csv'</span></span>
<span id="cb21-45">    data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb21-46"></span>
<span id="cb21-47">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> track, elevation, time <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(tracks, elevations, times):</span>
<span id="cb21-48">        latitude <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> track[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lat'</span>]</span>
<span id="cb21-49">        longitude <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> track[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lon'</span>]</span>
<span id="cb21-50">        elevation_value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> elevation.text</span>
<span id="cb21-51">        time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.text</span>
<span id="cb21-52">        data.append([<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>, latitude, longitude, elevation_value,</span>
<span id="cb21-53">                    time, temp, weather])</span>
<span id="cb21-54"></span>
<span id="cb21-55">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(csv_file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w'</span>, newline<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> csvfile:</span>
<span id="cb21-56">        writer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> csv.writer(csvfile)</span>
<span id="cb21-57">        writer.writerow([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Id'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Lat'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Lon'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Elev'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Time'</span>,</span>
<span id="cb21-58">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Temp'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Weather'</span>])</span>
<span id="cb21-59">        writer.writerows(data)</span>
<span id="cb21-60"></span>
<span id="cb21-61">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(cfile, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'a'</span>, newline<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb21-62">        writer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> csv.writer(f)</span>
<span id="cb21-63">        writer.writerows(data)</span></code></pre></div>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a><div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{carey2024,
  author = {Carey, Brian},
  title = {Trail {Mapping} with {Python}},
  date = {2024-02-28},
  url = {https://biscotty666.github.io/biscottys-workshop/2024-02-28-trail-mapping-with-python},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-carey2024" class="csl-entry quarto-appendix-citeas">
Carey, Brian. 2024. <span>“Trail Mapping with Python.”</span> February
28, 2024. <a href="https://biscotty666.github.io/biscottys-workshop/2024-02-28-trail-mapping-with-python">https://biscotty666.github.io/biscottys-workshop/2024-02-28-trail-mapping-with-python</a>.
</div></div></section></div> ]]></description>
  <category>GIS</category>
  <category>Python</category>
  <category>Data Science</category>
  <guid>https://biscotty.online/blogs/data-science/gpx-gps-data/</guid>
  <pubDate>Wed, 28 Feb 2024 07:00:00 GMT</pubDate>
  <media:content url="https://biscotty.online/blogs/data-science/gpx-gps-data/pr2.png" medium="image" type="image/png" height="93" width="144"/>
</item>
<item>
  <title>Obsidian Canvas Work Spaces</title>
  <dc:creator>Brian Carey</dc:creator>
  <link>https://biscotty.online/blogs/obsidian/obsidian-whiteboards/</link>
  <description><![CDATA[ 





<section id="obsidian-canvas-work-spaces" class="level1">
<h1>Obsidian Canvas Work Spaces</h1>
<blockquote class="blockquote">
<p>Visual MOCery <img src="https://biscotty.online/blogs/obsidian/obsidian-whiteboards/VMocery.png" class="img-fluid"></p>
</blockquote>
<section id="organization-and-productivity" class="level2">
<h2 class="anchored" data-anchor-id="organization-and-productivity">Organization and Productivity</h2>
<p>My <a href="http://biscotty.online/blogs/freeing-your-thinking-part-1">Freeing Your Thinking</a> series of articles has had a primary theme: focus on information, not files. My first articles explained how time spent organizing files into folders and naming fleeting notes is essentially wasted time. Worse, maintaining such a system is a daily drain on productivity. Even worse, you will probably decide one day that a different structure is better and, to re-arrange everything, you need to invest yet more time. And what if you want a different structure, but still maintain the current structure at the same time? You can’t do that with folders, but you can with bookmarks. With bookmarks you can build a tree of the <em>information</em>, regardless of files and file locations. Specific information is not limited to one location.</p>
<p>The point of this system is to be as productive as possible. Organization is a tool, not a goal, and should only be used if it adds value (increases productivity). I want to avoid the loss of focus and efficiency entailed in opening files and switching between notes. Time spent organizing and working with files is inefficient given the many options available in Obsidian. Time spent organizing and working with information, on the other hand, is what it’s all about.</p>
<p>In this article I’ll look at the popular Map of Content and consider it’s virtues with respect to productivity. At least as I have seen it described, I find it an unwieldy tool for working with the information in my vault. It is inefficient, steals focus, and does not promote creativity. I will propose an approach based on Canvas. With Canvas, I can construct a rich work environment for developing my knowledge on a subject, with information displayed and structured visually. From my canvas I have direct access to all of the files implicated, and don’t need to leave the canvas to review or edit them. Tasks, goals, questions, even the narrative, are on the canvas. I will post a link at the end to my repository with this example vault.</p>
</section>
<section id="maps-of-content" class="level2">
<h2 class="anchored" data-anchor-id="maps-of-content">Maps of Content</h2>
<p>The map of content is a common way of organizing notes in an Obsidian vault. The concept is flexible, and can be applied to many sorts of notes, the simplest being a note with an index-like list of links to all of the notes relating to a topic of interest. If you have been working with Freeing Your Thinking, you might have noticed the red flag in this concept: the note itself. Creating a document consisting solely or primarily of links to other documents is file-based thinking. In fact, in this system, you get such a list for free, without effort, as you will see below. Actually, there are three ways to find and access all information on the topic of interest, without creating such a list. And I do not mean with a Dataview query in a note. So making such a note is a waste of time.</p>
<p>All of my notes have a <code>topic</code> property. This takes one or more links. The <code>topic</code> does not need to exist when assigned to a note. I have notes with a type of <code>moc</code>, but they are empty of content, only containing metadata, a topic and a type. In a NoSQL database, such documents containing only metadata are merely nodes which tie the data together. Their purpose is not to hold information per se. As a result, when I finally create the actual file, I get an index for free (three actually), with the ability to inspect all of the information without opening the files.</p>
<p>Specifically, in the right sidebar I have all of the links, as well as a graph. On the left, a simple filter gives me the same information. And I rarely need to open any of these files, since I can view and edit them directly with Hover Editor.</p>
<iframe src="https://streamable.com/e/eu4pfl?autoplay=1" width="560" height="315" frameborder="0" allowfullscreen="" allow="autoplay">
</iframe>
<p>From a simple index, the next step is often to give structure to the notes, typically in a table of contents format. This process usually involves opening and reading, perhaps editing, the notes and placing them in an appropriate “location” in the MOC note. Again, this is file-based thinking. As explained before, bookmarks provide this type of organization more effectively, flexibly, and efficiently.</p>
</section>
<section id="work-spaces" class="level2">
<h2 class="anchored" data-anchor-id="work-spaces">Work Spaces</h2>
<p>Creating a traditional Map of Content does not really get you much closer to your information. The notes may be well organized, but they remain essentially closed books. And, in the format of a note, assimilation of the larger picture of a topic is difficult, and relationships are hard to visualize. Using Canvas, on the other hand, I can create a work space for each topic I’m interested in. As mentioned, the work space contains all of the reference material side by side with questions, ideas, tasks and a working document. And the canvas contains a white board where all of the information is exposed and organized.</p>
<p>This canvas-based approach to content mapping well satisfies my two criteria for evaluating a process. It maximizes my ability to focus on the information without distraction, and it is efficient as I rarely if ever, need to leave the canvas. No opening and closing of files, or remembering file names and locations.</p>
<section id="desk-area" class="level3">
<h3 class="anchored" data-anchor-id="desk-area">Desk Area</h3>
<p>At the top of the work space I have my desk area. Here I put my goals for the topic and guiding questions, as well as any tasks related to the topic. This is also where I have my developing narrative on the topic. This long form document describes the topic and may result in an essay or article…the result of my efforts pursuing the subject and a statement of my understanding.</p>
<p>The tasks are all in a file accessible in The Stacks, which I will show in a minute. Questions and goals are actually tasks, too. At the top are queries of the form</p>
<pre><code>filename includes Occitan Tasks
filter by function task.status.symbol === '!'</code></pre>
<p>Tasks may be edited directly from the queries without opening the containing file.</p>
<p>Removing extraneous information allows the eyes to focus with less effort on the meaningful information, so I have used CSS to hide the links that would normally be displayed next to the task description. This brief video shows the features of the desk area.</p>
<iframe src="https://streamable.com/e/wmvemo?autoplay=1" width="560" height="315" frameborder="0" allowfullscreen="" allow="autoplay">
</iframe>
</section>
<section id="the-stacks" class="level3">
<h3 class="anchored" data-anchor-id="the-stacks">The Stacks</h3>
<p>On the left is my reference area. Here I have various queries allowing me to process files directly from the workspace. Canvas is nice, because I can “roll up” these views and only expand them when I need them. All notes on the topic of Occitan are grouped into fleeting notes, processed notes, and actionable notes (I have an <code>action</code> property.) They are primarily used to discover information to add to the canvas.</p>
<p>This, for example, is the “Fleeting Notes” query:</p>
<pre class="dataview"><code>list
where contains(topic, [[Occitan]]) &amp; contains(type, "fleeting")</code></pre>
<p>Here is also found the Task Master, which is the note containing the tasks related to the topic. The questions, goals and tasks displayed at the top come from this note. Once a task has been added, any further editing is done directly from the views at the top of the canvas.</p>
<p>In addition, I have queries which list all of the <strong>content</strong> of all of the notes on the Occitan topic which I can scroll through. This is a very fast way to browse all my information. Most interesting, perhaps, is the view of the content of all notes which mention Occitan but are NOT linked to the MOC.</p>
<p>The query to produce this is more involved than the others. However, if you have followed along with the DataviewJS articles, most of this should be familiar. We do have a few new functions. <code>dv.io.load()</code> returns the full contents of each file. <code>split(\n\n)</code> then divides the content into blocks. (<code>\n</code> refers to a new line, and since paragraphs are separated by blank lines that gives two <code>\n</code>s.) Then <code>filter()</code> returns only the paragraphs containing the word Occitan. Taken step by step the code should be clear.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode javascript code-with-copy"><code class="sourceCode javascript"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> pagesWithTopic <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">await</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Promise</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all</span>(</span>
<span id="cb3-2">    dv</span>
<span id="cb3-3">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-[[Occitan]]"</span>)</span>
<span id="cb3-4">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span>(t <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Occitan Unlinked References"</span>)</span>
<span id="cb3-5">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span>(t <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Occitan Tasks"</span>)</span>
<span id="cb3-6">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(n <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">new</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Promise</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">async</span> (resolve<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> reject) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> {</span>
<span id="cb3-7">        <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> content <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">await</span> dv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">io</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">load</span>(n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">path</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-8">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">resolve</span>({</span>
<span id="cb3-9">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">link</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">link</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-10">            content</span>
<span id="cb3-11">        })<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-12">    }))</span>
<span id="cb3-13">)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-14"></span>
<span id="cb3-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> blocksWithTopic <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pagesWithTopic<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(({</span>
<span id="cb3-16">    link<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-17">    content</span>
<span id="cb3-18">}) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> ({</span>
<span id="cb3-19">    link<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-20">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">content</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> content</span>
<span id="cb3-21">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">split</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb3-22">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(content <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> content<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">includes</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Occitan'</span>))</span>
<span id="cb3-23">}))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-24"></span>
<span id="cb3-25">blocksWithTopic<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">forEach</span>(</span>
<span id="cb3-26">    page <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span></span>
<span id="cb3-27">    page<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">content</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">forEach</span>(</span>
<span id="cb3-28">        n <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> dv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paragraph</span>(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">`(</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>page<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">link</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">)</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n\n</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>n<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;"> `</span>)</span>
<span id="cb3-29">    )</span>
<span id="cb3-30">)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<iframe src="https://streamable.com/e/j3zzlg?autoplay=1" width="560" height="315" frameborder="0" allowfullscreen="" allow="autoplay">
</iframe>
</section>
<section id="whiteboard" class="level3">
<h3 class="anchored" data-anchor-id="whiteboard">Whiteboard</h3>
<p>At some point in every crime procedural television show they wheel out the white boards and start pinning up information, making annotations and drawing links. Items of interest are removed from their file and put up in plain site, with the information clearly exposed. There are all of the photographs, news clippings, maps and highlighted sections of documents, supplemented with commentary and lines connecting the information. The important thing here is that relevant information is clearly displayed, and no effort is needed to view it. Information is grouped visually with connections between specific information indicated by the lines.</p>
<p>The investigators make these boards because they provide a useful way to explore a subject, ask and answer questions, identify gaps in knowledge, and ultimately construct a narrative around the information. Obsidian’s Canvas allows me to do exactly the same thing, exposing my information and allowing me to arrange and re-arrange it as I work through it in my mind. As I add to the canvas, I can easily add the views to my information tree as well, giving logical structure to the visual structure.</p>
<p>Here is an overview of my workspace for the topic of the Occitan language, one I am only starting to explore.</p>
<iframe src="https://streamable.com/e/9eytfl?autoplay=1" width="560" height="315" frameborder="0" allowfullscreen="" allow="autoplay">
</iframe>
</section>
</section>
<section id="final-thoughts" class="level2">
<h2 class="anchored" data-anchor-id="final-thoughts">Final Thoughts</h2>
<p>Obsidian is a powerful tool, but the functionality it offers is often overlooked and/or underused. Rather than treating it as essentially a file editor and approaching it the way one would a word processor, think of it as both an information repository and a collection of tools to access and develop the information. Views on a canvas are much more intellectually stimulating than links, or even embeds, in a file.</p>
<p>The contents used for this article are available for download from my <a href="https://github.com/biscotty666/Obsidian-Canvas-Workspaces">GitHub</a>. If you find this content useful, please consider <a href="https://www.paypal.com/donate/?business=3Y2MGAU7LYQBJ&amp;no_recurring=0&amp;item_name=I+you+have+found+my+content+useful+please+consider+a+donation+to+support+future+work.&amp;currency_code=USD">making a donation</a> to support future work.</p>


</section>
</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>Obsidian</category>
  <guid>https://biscotty.online/blogs/obsidian/obsidian-whiteboards/</guid>
  <pubDate>Sat, 20 Jan 2024 07:00:00 GMT</pubDate>
  <media:content url="https://biscotty.online/blogs/obsidian/obsidian-whiteboards/VMocery.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>Git and GitHub for Obsidian Users</title>
  <dc:creator>Brian Carey</dc:creator>
  <link>https://biscotty.online/blogs/obsidian/git-github-obsidian/</link>
  <description><![CDATA[ 





<section id="git-and-github-for-obsidian-users" class="level1">
<h1>Git and GitHub for Obsidian Users</h1>
<p>I’ve been doing some repair work around my house recently and have been reflecting on how important the choice of tools are in making a project go quickly and smoothly. More specifically, I’ve been thinking about how important it is to choose a tool designed for a specific purpose rather than a general purpose one. For example, while you can screw a nut on a bolt with vise grips, you’re much better off using ratchet wrench which is designed for that specific purpose. It is faster, easier, and less likely to do damage to the nut.</p>
<p>I’ve been seeing quite a few articles about git and GitHub in the context of backups and synchronization. In this article I would like to explain exactly what they are and why they are not good tools to use for backing up or synchronizing an Obsidian vault. I will then propose best-of-class solutions for these needs. At the end, I will show how git and GitHub can, in fact, be useful for some special purposes. ## Git</p>
<p>Git is a version control system designed for collaborative software development. Using git, developers are able to manage a project’s code base throughout development cycles, allowing multiple authors to contribute code to a single project, everyone keeping up to date with the latest version. It allows for maintaining separate branches for production and development, branches for features, and branches for each developer. The various branches can be <em>merged</em> as they are completed, and thereby update the production or main development branch.</p>
<p>If you are wondering how any of this relates to Obsidian, which is not a software development project and does not typically have multiple contributors, well, it doesn’t, which is kind of my point. It’s a vice grips solution for Obsidian.</p>
<p>Its design is clever, though, and worth taking a moment to understand. The information generated by git is stored in a <em>repository</em>. A repository is simply a hidden directory created in the main directory of your project, or in this case, your vault. The repository itself keeps track of <em>commits</em>. A commit is a file which describes exactly what files have been added, removed, or edited since the last commit. In the case of edits, it keeps track of the specific changes made to each file by tracking changes to each line. The changes are combined with information such as the author of the change and a description of what was changed, and this becomes a new commit. The granularity allows for identifying specific lines which introduced bugs. They can then “re-set” the project to the prior, bug-free state while someone fixes the bug, or to a point where a deleted file still existed.</p>
<p>Before moving on, I will just point out that the git repository has nothing to do with GitHub. It’s just a hidden directory on your local file system.</p>
<section id="github" class="level2">
<h2 class="anchored" data-anchor-id="github">GitHub</h2>
<p>At it’s core, GitHub is service like Dropbox which provides cloud storage. But there are important differences. It was specifically created to promote sharing of code and collaboration among software developers. As such, you can have as many free <strong>public</strong> repositories as you want, but need to pay for private ones. A limitation of GitHub is file size. There is a maximum size of 100 MB per file. This is not a problem for most people, but should you have any videos in your vault, for example, you will not be able to use GitHub at all. In any case, unless you need tools provided by GitHub, you might just as well copy your directory, or your local git repository, to Dropbox instead of pushing to GitHub.</p>
<p>In addition to storage, GitHub provides a whole suite of tools which developers can use to design automated workflows and even deploy projects directly from GitHub. None of this really applies to Obsidian either, with potential exceptions which I’ll describe below.</p>
</section>
<section id="synchronization" class="level2">
<h2 class="anchored" data-anchor-id="synchronization">Synchronization</h2>
<p>As we have seen, GitHub is designed for keeping multiple developers and project branches in sync, so it might seem to appropriate for keeping Obsidian vaults in sync. But, since there is only one author and only one branch, it is overkill at the very least. A developer pulls to see what <em>others</em> have done and pushes to share their work…neither relevant for Obsidian.</p>
<p>But my main objection is practical. Using GitHub requires manual interactions be performed every time you switch devices, namely a pull and a push to GitHub. Ideally, synchronization across devices should be automatic, instantaneous and real time. I wrote an article on synchronizing your vault across different devices using a tool called Syncthing. It is a free, fit for purpose tool which uses direct, device-to-device synchronization, requiring no intervention, and changes are immediately reflected across all devices. ## Backups Be honest: do you back up your computer regularly? If you are like the majority of people the answer is no. Given the number of articles I’ve seen on solutions for backing up vaults I can only conclude that many Obsidian users, like others, don’t have a regular backup system, because, if you are backing up your computer, you are backing up your vault. Obsidian is just another directory, and doesn’t need anything special. If you already perform regular backups, and have tested file recovery, then you don’t need to read the next bit…unless you are using GitHub for your backups.</p>
<p>To understand why GitHub should not be used to back up your vault, consider the main features required for a good backup system:</p>
<ul>
<li><p>Ease of recovery - even people who actually do backups often do not test how quickly and easily it is to restore files from the backups. Ideally, you should be able to navigate through backed up files and directories just like ordinary ones, and then simply copy what you want. Recovering lost or old versions of files is possible using git, but the process is much more cumbersome.</p></li>
<li><p>Rotation of daily, weekly, monthly backups - a good backup system will automatically rotate your backups, removing unnecessary versions as they age and new ones are made. That way you can find something from two days, two weeks, two months or two years ago. Git provide no such functionality.</p></li>
<li><p>Speed and Space efficiency - over time, the amount of data you need to back up can be many gigabytes, especially if you have videos or many images. When you do a backup, the tool must check for changes across the entire directory, so it needs to be fast. At any point, you will have dozens of backups each representing a snapshot in time. In order to maintain so many “copies”, the system must be efficient in compressing the information. With git and GitHub there is no compression except for during file transfer.</p></li>
<li><p>Off-site backups - Best practice for backups means storing at least one copy of your backups in a different physical location. This could be a cloud server. A good tool should make off-site backups just as easy as on-site backups. GitHub does fulfill this requirement.</p></li>
</ul>
<p>The best backup system around is called Restic. It is free, open source, cross-platform, and can be easily managed with a few simple commands. Most importantly, it is blazing fast, and creates surprisingly small repositories. This is basically because it breaks up your files into variable-length <em>blobs</em>, or chunks of bytes. I will explain the details in a subsequent article. ## Sharing - use cases for git and GitHub</p>
<p>I have found some very good use cases for git and GitHub. They involve sharing content of my vault. Before describing them, let me point out that sharing of vault content should generally only be one way. Obsidian is not meant to be a collaborative tool. So you, and only you, control what goes into your vault.</p>
<section id="presentation" class="level3">
<h3 class="anchored" data-anchor-id="presentation">Presentation</h3>
<p>Git, and especially GitHub itself, are convenient for creating live, interactive presentations from content in my vault. I can create a formal presentation using the Advanced Slides plugin, or just make a section of my vault with specific content and put that part on GitHub. GitHub allows others to browse the vault or view the presentation on-line. Alternatively, they can download the content, open it locally with Obsidian, or simply copy it into their own vault.</p>
<p>In the context of a presentation, git itself is useful, because a presentation is a product. Like any product, version control is useful. A presentation can change and evolve. Sometimes one wants to see something from a prior iteration of a project, and git makes this simple. In other words, presentations have versions.</p>
<p>I’ll give some tips on the mechanics of how to do this at the end, but it’s simply a matter of collecting all the necessary files, including attachments, in a sub-directory of my vault. I copy this directory to a different location, open it as a vault and enable necessary plugins. GitHub can directly serve HTML files, so I convert the entire new vault to HTML with the Webpage HTML Export plugin. I create a <code>README.md</code> with some sort of linked table of contents or at least a link to enter the html files. With that done, I can just push to GitHub, and everything goes live in minutes on a url GitHub creates for me.</p>
<p>At this point I can make the presentation and the the audience can follow along on their own computers and engage with the content, either on-line or locally by downloading the vault from GitHub. If they happen to be Obsidian users, they could also copy the files into their own vault to further interact with the material.</p>
</section>
<section id="class-management" class="level3">
<h3 class="anchored" data-anchor-id="class-management">Class Management</h3>
<p>As a teacher, it didn’t take long to consider how Obsidian might be used in the classroom. The idea of making and distributing course content which is easily navigable, visually interesting, and incorporates multi-media, graphs and charts, and external resources is very attractive. Sharing of content can be done the same way as the presentation above, and students could get it either “live” or by making their own copy.</p>
<p>But, as I do go on about, Obsidian is a database too, so why not push this a step further, and run the whole course with Obsidian, including design, distribution of materials, receiving assignments from students, applying rubrics if appropriate, grading and evaluations. This sounds like a project, and git and GitHub are perfect for this use. In addition to facilitating the distribution of the course materials, you can update the materials from time to time, and students will always have access to the latest version. I segregate the course into a <code>public/</code> and <code>private/</code> directory, and only push <code>public/</code> to GitHub. All completed work, grades, evaluations, and any identifying material is kept confidential. Students can submit their responses by emailing the single note, which I simply place in the <code>private/</code> directory. The Properties take care of everything else (except the actual grading).</p>
<p>This is obviously a more complex example, involving metadata (properties), Dataview, and various templates to provide the metadata and compile grades. A full description would take too long for this article, but I intend to write a detailed article with a sample vault in the near future.</p>
</section>
</section>
<section id="usage-of-git-and-github" class="level2">
<h2 class="anchored" data-anchor-id="usage-of-git-and-github">Usage of git and GitHub</h2>
<p>This article is already long, so I can’t go into details about using git and GitHub, but I want to show how simple it is for this purpose. You need to install git itself, and I use another program called <em>gh</em> (the GitHub Client), which allows me to manage everything from the command line. With these installed and a free GitHub account, all I need to do is create the repository locally with the command <code>git init</code>. I then create the repository on GitHub itself with</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">gh</span> repo create my-vault-name <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--public</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--source</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>. <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--remote</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>upstream<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">`</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">.</span></span></code></pre></div>
<p>After that, whenever I add, delete or change content, I just do</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> add .</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> commit <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Some message"</span></span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> push</span></code></pre></div>
<p>On the GitHub website, under the Settings menu there is a Pages option. Simply go there and you can deploy your vault (with HTML rendered) with a couple of clicks. It will provide you with a live URL, where the content will be kept up to date every time you <code>push</code>.</p>
<p>That’s all there is to it.</p>


</section>
</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>Obsidian</category>
  <category>Linux</category>
  <guid>https://biscotty.online/blogs/obsidian/git-github-obsidian/</guid>
  <pubDate>Fri, 19 Jan 2024 07:00:00 GMT</pubDate>
  <media:content url="https://biscotty.online/blogs/obsidian/git-github-obsidian/tn-metadata-menu.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>Obsidian: Pretty Canvas</title>
  <dc:creator>Brian Carey</dc:creator>
  <link>https://biscotty.online/blogs/obsidian/pretty-canvas/</link>
  <description><![CDATA[ 





<section id="obsidian-pretty-canvas" class="level1">
<h1>Obsidian: Pretty Canvas</h1>
<p>Going visual has really helped free my thinking, and pretty much all of my time in Obsidian is now spent on canvases. Other than when I am making fleeting notes on an article, book or video, I do pretty much everything from a canvas. I process and edit my notes, list questions which guide my research, maintain tasks associated with the effort, and perhaps develop an article on the topic, all from the canvas.</p>
<p>Naturally I want my canvases to be pretty. It’s not just a question of aesthetics either. Changing simple things like the color or size of elements makes the canvas much more use-able, drawing your eyes quickly to more important information and removing extraneous stuff. Obsidian fortunately allows us to use <a href="https://developer.mozilla.org/en-US/docs/Web/CSS">CSS</a> to do this.</p>
<p>Here’s an example of a Visual Dashboard I’m just getting started with for a new article. The first image is with default styling. It is usable, and has some pretty colors, but it’s visually confusing.</p>
<p><img src="https://biscotty.online/blogs/obsidian/pretty-canvas/canvas-plain.png" class="img-fluid"></p>
<p>There are too many colors for one. The title of the canvas doesn’t stand out, and the group headings don’t either. There is also a bunch of stuff that I don’t need to see, like the links after every task.</p>
<p>Here is the same with CSS applied. Notice how some useless clutter has been removed, task descriptions have a standardized color which is easy to read, group headings stand out better to guide your eyes, and titles look good.</p>
<p><img src="https://biscotty.online/blogs/obsidian/pretty-canvas/canvas-pretty.png" class="img-fluid"></p>
</section>
<section id="implementation" class="level1">
<h1>Implementation</h1>
<section id="getting-started" class="level2">
<h2 class="anchored" data-anchor-id="getting-started">Getting Started</h2>
<p>Using CSS is pretty straight-forward in principle, but figuring out how to apply it can take a bit of work, as there seems to be no good documentation for automatically generated classes. Also, CSS is simply unfamiliar to many people. Never the less, a little can go a long way. So I wanted to share some of the styling I’m using for my canvases as a jumping-off point for you to personalize your canvases and be more efficient in working with them.</p>
<p>To get started, you need to create a <code>snippets</code> directory in the hidden <code>obsidian</code> directory of your vault. Any files placed here with the extension <code>css</code> will be available to Obsidian. You can name the files anything you want, so choose a descriptive name. With obvious irony, these files can only be edited with an external editor, but any editor will do, like vim, nano or Notepad. I suggest you create a file called <code>canvas-fyt.css</code> and copy the contents below into the file. In Obsidian, you will be able to “activate” whichever files you want to use, so you can have multiple styles of canvases.</p>
<p>Once you have created a <code>css</code> file in the correct directory you can go to the Appearance section and toggle on the new file to make it active. You may need to press the reload button to re-scan the directory.</p>
<p><img src="https://biscotty.online/blogs/obsidian/pretty-canvas/enable-css.png" class="img-fluid"></p>
</section>
<section id="background" class="level2">
<h2 class="anchored" data-anchor-id="background">Background</h2>
<p>With that done, let’s start with the background. Add the following to the file to change the color and remove the dots:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode css code-with-copy"><code class="sourceCode css"><span id="cb1-1">svg<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.canvas-background</span> {</span>
<span id="cb1-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">background</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">linear-gradient(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">deg</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">#253B0B</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">#2c0149</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">#390B1C</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-3">}</span>
<span id="cb1-4"></span>
<span id="cb1-5">svg<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.canvas-background</span> circle {</span>
<span id="cb1-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">display</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">none</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-7">}</span></code></pre></div>
<p>The background is actually an image of the type svg, which stands for Scalable Vector Graphic (as compared to png or jpg). The svg is automatically assigned the class <code>canvas-background</code>. By writing <code>svg.canvas-background</code> we select only the background image and not any other svg files which might be on the canvas. As you can see, styles use key/value pairs followed by a semi-colon. I’ve used a gradient here, but if you only want a single color, you could simply write <code>background-color: tan;</code> for example. There are over 150 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/named-color">named colors</a> which you can use. If you have an RGB value from a color picker, you can write <code>background-color: rgb(10,160,245);</code>.</p>
<p><code>display: none;</code> says not to display a particular element, in this case the grid dots (circles). We’ll use this again later.</p>
</section>
<section id="tasks" class="level2">
<h2 class="anchored" data-anchor-id="tasks">Tasks</h2>
<p>Next we can style the tasks. Adding</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode css code-with-copy"><code class="sourceCode css"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.task-description</span> {</span>
<span id="cb2-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">color</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">cyan</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-3">}</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.tasks-backlink</span> {</span>
<span id="cb2-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">display</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">none</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-7">}</span></code></pre></div>
<p>will change all of the task descriptions to a consistent and easily readable color. It also removes the backlink text which points to the file containing the task. I’m not interested in files, so this is useless to me but takes up a lot of visual space.</p>
</section>
<section id="titlesheaders" class="level2">
<h2 class="anchored" data-anchor-id="titlesheaders">Titles/Headers</h2>
<p>With that done we can turn to the textual elements. For these, you must specify on the canvas which elements you want to apply the styles to. For this you need to use HTML instead of markdown, allowing you to assign a <em>class</em> to an element. Let’s style the headings which I will use for titles so they stand out.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode css code-with-copy"><code class="sourceCode css"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.markdown-rendered</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.title-tag-1</span> {</span>
<span id="cb3-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">text-align</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">center</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">font-size</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">em</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-4">}</span>
<span id="cb3-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.markdown-rendered</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.title-tag-2</span> {</span>
<span id="cb3-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">text-align</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">center</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">font-size</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">em</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-8">}</span>
<span id="cb3-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.markdown-rendered</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.title-tag-3</span> {</span>
<span id="cb3-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">text-align</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">center</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">font-size</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">em</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-12">}</span></code></pre></div>
<p>On the canvas, in order to use the styles, you can’t use the standard hash tags (<code>#, ##, ###</code>) for headers. Instead you need to use HTML and specify the class. For example, instead of writing <code># Header</code> you write <code>&lt;h1 class="title-tag-1"&gt;Header&lt;/h1&gt;</code>. Then you will see the styles applied to the class.</p>
<p>Notice the units used for the font size. You can use different units for font size such as pixels (<code>font-size: 24px;</code>). <code>em</code> is convenient though, because it is a relative size. <code>2 em</code> is like saying “display this twice as large as it would normally be displayed”. The actual size will change based on the zoom level.</p>
</section>
<section id="other-textual-elements" class="level2">
<h2 class="anchored" data-anchor-id="other-textual-elements">Other textual elements</h2>
<p>I also like to be able to have certain words jump out on the page, more than can be achieved with bold or italics. So I have a class</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode css code-with-copy"><code class="sourceCode css"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.markdown-rendered</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.my-emphasis</span> {</span>
<span id="cb4-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">color</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">#b7db6f</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">font-size</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.2</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">em</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-4">}</span></code></pre></div>
<p>I can use this class by wrapping text in a <code>&lt;span&gt;</code> element like this:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode css code-with-copy"><code class="sourceCode css"><span id="cb5-1">In this paragraph &lt;span class="my-emphasis"<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>these words&lt;/span<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> will stand out.</span></code></pre></div>
<p>In this paragraph <span class="cta">these words</span> will stand out.</p>
<p>To change the font, add</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode css code-with-copy"><code class="sourceCode css"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.markdown-rendered</span> {</span>
<span id="cb6-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">font-family</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Quicksand"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">sans-serif</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-3">}</span>
<span id="cb6-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.canvas-group-label</span> {</span>
<span id="cb6-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">font-size</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">em</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">font-family</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Quicksand"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">font-weight</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">bold</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">color</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">black</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-9">}</span></code></pre></div>
<p>I like the Quicksand font. It is a <a href="https://fonts.google.com/">free font</a> from Google, which provides a huge variety of fonts. In order to display a font you must download it and install it to your system. If it is not on your system, the default sans-serif font will be used instead. As you can see, I’ve also changed the size, color and weight of the labels for the groups on the canvas.</p>
<p>Finally, I would like to have the filenames of links on the canvas to be a different color, so</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode css code-with-copy"><code class="sourceCode css"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.markdown-rendered</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.internal-link</span> {</span>
<span id="cb7-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">color</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">red</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-3">}</span></code></pre></div>
<p>And that’s it. For convenience I provide the complete file below. I hope adding some style will enrich your experience working with your Visual Dashboards.</p>
</section>
</section>
<section id="final-file" class="level1">
<h1>Final File</h1>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode css code-with-copy"><code class="sourceCode css"><span id="cb8-1">svg<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.canvas-background</span> {</span>
<span id="cb8-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">background</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">linear-gradient(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">deg</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">#253B0B</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">#2c0149</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">#390B1C</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-3">}</span>
<span id="cb8-4"></span>
<span id="cb8-5">svg<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.canvas-background</span> circle {</span>
<span id="cb8-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">display</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">none</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-7">}</span>
<span id="cb8-8"></span>
<span id="cb8-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.markdown-rendered</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.title-tag-1</span> {</span>
<span id="cb8-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">text-align</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">center</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">font-size</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">em</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-12">}</span>
<span id="cb8-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.markdown-rendered</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.title-tag-2</span> {</span>
<span id="cb8-14">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">text-align</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">center</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-15">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">font-size</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">em</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-16">}</span>
<span id="cb8-17"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.markdown-rendered</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.title-tag-3</span> {</span>
<span id="cb8-18">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">text-align</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">center</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-19">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">font-size</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">em</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-20">}</span>
<span id="cb8-21"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.canvas-group-label</span> {</span>
<span id="cb8-22">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">font-size</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">em</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-23">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">font-family</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Quicksand"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-24">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">font-weight</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">bold</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-25">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">color</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">black</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-26">}</span>
<span id="cb8-27"></span>
<span id="cb8-28"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.task-description</span> {</span>
<span id="cb8-29">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">color</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">cyan</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-30">}</span>
<span id="cb8-31"></span>
<span id="cb8-32"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.tasks-backlink</span> {</span>
<span id="cb8-33">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">display</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">none</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-34">}</span>
<span id="cb8-35"></span>
<span id="cb8-36"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.markdown-rendered</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.internal-link</span> {</span>
<span id="cb8-37">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">color</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">red</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-38">}</span>
<span id="cb8-39"></span>
<span id="cb8-40"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.markdown-rendered</span> {</span>
<span id="cb8-41">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">font-family</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Quicksand"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-42">}</span>
<span id="cb8-43"></span>
<span id="cb8-44"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.markdown-rendered</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.my-emphasis</span> {</span>
<span id="cb8-45">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">color</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">#b7db6f</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-46">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">font-size</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.2</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">em</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-47">}</span></code></pre></div>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>Obsidian</category>
  <category>CSS</category>
  <guid>https://biscotty.online/blogs/obsidian/pretty-canvas/</guid>
  <pubDate>Thu, 05 Oct 2023 06:00:00 GMT</pubDate>
  <media:content url="https://biscotty.online/blogs/obsidian/pretty-canvas/canvas-pretty-css-composite.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>Obsidian Canvas Dashboards</title>
  <dc:creator>Brian Carey</dc:creator>
  <link>https://biscotty.online/blogs/obsidian/visual-mocs-with-canvas/</link>
  <description><![CDATA[ 





<section id="motivation" class="level1">
<h1>Motivation</h1>
<p>This is the last in a series of articles, including <a href="https://biscotty.online/blogs/obsidian/freeing-your-thinking">Freeing Your Thinking</a> and <a href="https://biscotty.online/blogs/obsidian/bookmarks">Building a Knowledge Tree</a>, where I talk about using Obsidian as a non-relational database. The main idea is to interact with information, not files, and Obsidian’s core plugins facilitate this approach. I have talked about Search, Bookmarks, Unique Notes and Graph View. This article will describe how to use Canvas to create visual maps of content which not only present information in a clear, attractive and flexible way, but also allow you to explore and interact with your information. As usual, our goal is to obviate the need to open files.</p>
<p>In data science there is a motto “visualize, visualize, visualize.” In the business world, information is commonly presented in the form of a dashboard to allow for visualizing data. A dashboard is a graphical user interface containing views of information. Aside from providing graphical elements and views, a dashboard will typically provide navigational tools and other ways to interact with information and even edit information directly from the dashboard.</p>
<p>Before discussing canvas, I want to mention <a href="https://github.com/zsviczian/obsidian-excalidraw-plugin">Excalidraw</a>, an excellent Community Plugin by Zsolt Viczián. It is great for creating visual maps of content with many graphical elements easily available. I highly recommend it. Nevertheless, one of the purposes of this series is to highlight Obsidian’s native tools, and Canvas is quite powerful in its own right.</p>
</section>
<section id="canvas" class="level1">
<h1>Canvas</h1>
<p>Canvas in Obsidian provides all we need to create dashboards. It allows for the following elements:</p>
<ul>
<li>Notes, but more importantly sections and blocks from notes</li>
<li>Cards, virtual notes which can contain any elements that an ordinary note can and can be converted to an actual note with a mouse click</li>
<li>Graphics, which can be incorporated independently or as an embed in a Card or Note. They can even be used as backgrounds for groups</li>
<li>Groups, which provide visual structure and facilitate navigation</li>
<li>Connectors, which can be directional and annotated, especially good for KanBan style canvases</li>
</ul>
</section>
<section id="visual-maps-of-content" class="level1">
<h1>Visual Maps of Content</h1>
<p>Map of Content is a somewhat generic term to refer to a note which includes information from other notes. They can be simple indices of links to related notes, or complete research articles or books, or something in between. The type of MOC depends upon the purpose.</p>
<p>Here I will demonstrate two different types of Visual MOCs. First, an informational dashboard of an academic topic, which could be used by a student or teacher for study or lesson planning. Secondly, a fully interactive dashboard for managing all aspects of my writing and publications. Without leaving the canvas, I can edit both metadata and content of notes.</p>
<p>This workflow relies on three community plugins: Dataview, Metadata Menu and Hover Editor.</p>
<section id="topical-dashboard" class="level2">
<h2 class="anchored" data-anchor-id="topical-dashboard">Topical Dashboard</h2>
<p>Canvases are ideal for pulling together information on a given topic and presenting it in a visually interesting way. As a student, I can accumulate information (not files) on a topic and add it to my canvas. This makes review of the topic easy. As a teacher, such a MOC could provide the basis of a lesson plan, and could even be distributed as course material.</p>
<p>As an example, this is a canvas covering the Normal Distribution, an important topic in probability and statistics. <img src="https://biscotty.online/blogs/obsidian/visual-mocs-with-canvas/canvas-nd-overview.png" class="img-fluid"></p>
<p>All of my information is grouped in categories. The information itself is drawn from specific sections or blocks within notes, not entire notes. I can navigate the canvas with a convenient drop down, allowing me to jump to a particular section. This is especially convenient on large canvases. <img src="https://biscotty.online/blogs/obsidian/visual-mocs-with-canvas/canvas-command-menu.png" class="img-fluid"></p>
<p>Otherwise I can simply use the mouse to move around the canvas and zoom in and out as I review my information. <img src="https://biscotty.online/blogs/obsidian/visual-mocs-with-canvas/canvas-nd-detail.png" class="img-fluid"></p>
</section>
<section id="interactive-dashboard" class="level2">
<h2 class="anchored" data-anchor-id="interactive-dashboard">Interactive Dashboard</h2>
<p>This is an example of using a visual MOC to both present information and also manage information. It includes interactive tables, previews of documents in progress, and graphics to identify the stage of development of each project.</p>
<p><img src="https://biscotty.online/blogs/obsidian/visual-mocs-with-canvas/canvas-publications.png" class="img-fluid"></p>
<p>Thanks to Metadata Menu, I can edit the metadata for any document without opening it. <img src="https://biscotty.online/blogs/obsidian/visual-mocs-with-canvas/canvas-mm-table.png" class="img-fluid"></p>
<p><img src="https://biscotty.online/blogs/obsidian/visual-mocs-with-canvas/canvas-mm-modal.png" class="img-fluid"></p>
<p>Using Hover editor, I can even edit a document without leaving the dashboard.</p>
<p><img src="https://biscotty.online/blogs/obsidian/visual-mocs-with-canvas/canvas-hover-editor.png" class="img-fluid"></p>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>This series of articles was meant to introduce the concept of using Obsidian as a database rather than a traditional file editor, with emphasis on Core Plugins. In the first article, I covered creating information without worrying about file names and directories (Unique Notes), and then accessing that information without navigating to or even opening files (Search). In the second, I discussed interacting with Obsidian to organize and analyze information (Graph View and Bookmarks). Most recently, I showed how Bookmarks can be used to create a useful Knowledge Tree using views of information rather than files.</p>
<p>Here I finish with a way to create visually interesting and useful maps of content using Canvas, together with the Community Plugins Dataview, Metadata Menu, and Hover Edge. Again, this allows you to interact with your information as one would a database, without opening files.</p>
<p>I hope you are intrigued enough to try this method. Thank you for reading this, and constructive criticism is always welcome.</p>
</section>
<section id="gratitude" class="level1">
<h1>Gratitude</h1>
<p>I would like to thank some people who have been my muses as I’ve learned Obsidian. They are all good sources of experience and insight.</p>
<ul>
<li>Zsolt Viczián</li>
<li>Sergio (From Sergio)</li>
<li>Nicole van der Hoeven</li>
<li>Nick Milo</li>
</ul>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>Obsidian</category>
  <guid>https://biscotty.online/blogs/obsidian/visual-mocs-with-canvas/</guid>
  <pubDate>Thu, 14 Sep 2023 06:00:00 GMT</pubDate>
  <media:content url="https://biscotty.online/blogs/obsidian/visual-mocs-with-canvas/canvas-publications.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>Obsidian Metadata Menu Plugin</title>
  <dc:creator>Brian Carey</dc:creator>
  <link>https://biscotty.online/blogs/obsidian/metadata-menu/</link>
  <description><![CDATA[ 





<section id="metadata-menu" class="level1">
<h1>Metadata Menu</h1>
<p>With the release of Obsidian 1.4.5, many people’s focus has been on metadata, which Obsidian calls Properties. I have written a series of articles (see <a href="https://biscotty.online/obsidian/concepts/freeing-your-thinking">Freeing Your Thinking</a>) on using Obsidian’s natural database features, and my entire workflow depends heavily on metadata. Naturally, I was anticipating this release with some excitement, having seen some previews on YouTube.</p>
<p>I was frankly disappointed. It is movement in a positive direction, and has some very nice features for managing metadata. However, its insistence on YAML for properties when many users such as myself prefer in-line metadata for its flexibility, makes some of its features useless to me.</p>
<p>Another reason for my disappointment, or feeling underwhelmed, was that I had already discovered a truly amazing plugin for managing metadata which did everything I need and more. <a href="https://github.com/mdelobelle/metadatamenu">Metadata Menu</a>, a Community Plugin by <a href="https://github.com/mdelobelle">mathieu</a>, provides a full set of features for managing properties. It has a modal, available in multiple places, which allows you to manage literally all aspects of a file’s metadata without opening the file, perfect for my workflow. It even has a file class template system which supports nesting groups of metadata fields. Fields in tables can have actions, allowing for direct editing of metadata in the table itself using standard widgets. And, it is visually clean and attractive</p>
<p>This video isn’t a guide to using Metadata Menu. Rather, it’s to show off some of its features. If metadata is important to you, you must check it out.</p>
<hr>
<iframe src="https://fast.wistia.net/embed/iframe/yfcu9td6yc?seo=false&amp;videoFoam=false" title="Metadata Menu Final Video" allow="autoplay; fullscreen" allowtransparency="true" frameborder="0" scrolling="no" class="wistia_embed" name="wistia_embed" msallowfullscreen="" width="750" height="422">
</iframe>
<script src="https://fast.wistia.net/assets/external/E-v1.js" async=""></script>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>Obsidian</category>
  <guid>https://biscotty.online/blogs/obsidian/metadata-menu/</guid>
  <pubDate>Wed, 06 Sep 2023 06:00:00 GMT</pubDate>
  <media:content url="https://biscotty.online/blogs/obsidian/metadata-menu/MMCover.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>Obsidian Bookmarks</title>
  <dc:creator>Brian Carey</dc:creator>
  <link>https://biscotty.online/blogs/obsidian/obsidian-bookmarks/</link>
  <description><![CDATA[ 





<p>Bookmarks are the key to effectively using obsidian as a non-relational database. The virtues of approaching your notes this way are several and I covered some in the <a href="https://biscotty.online/blogs/obsidian/freeing-your-thinking/freeing-your-thinking-part-1/">Freeing Your Thinking</a> series. In this article I want to develop the idea of using Bookmarks to construct flexible, interactive Knowledge Trees to organize notes. Just as a reminder, we are organizing information, not files.</p>
<p>The Navigation tab gives at best a static arrangement of information, while the Bookmarks tab provides a dynamic way to interact with, develop and access your information. Here you can create <em>Views</em> of your information which you can organize by domain, subject, activity, etc. Views are saved filters and queries. Your information, unlike your files, can happily exist in multiple places in your Knowledge Tree.</p>
<p>When you begin to build your Knowledge Tree, you might start by creating <em>Views</em> which map to your current directories using filters. After all, you want to preserve the information you have put into your vault by organizing your notes in a File Tree. Most people have a separate directory for fleeting notes, so you might make a view containing <code>path: "fleeting-note-directory"</code>. But is such a view terribly useful? Browsing through all your fleeting notes is fun if you’ve nothing better to do, but it’s not focused or efficient use of time if you are working on a particular topic. Wouldn’t it be better to just see the fleeting notes related to my topic? So I save the filter <code>Whatever Topic \type:: fleeting\</code> alongside my views of the topic itself and have a list of fleeting notes only on that topic.</p>
<p>As you start mapping your old directories to views, you might begin to ask yourself at some point why you would ever really want to see all your MOCs in a list? Or Daily Notes? Or Logs? If you want <em>information</em> from these types of notes you typically create a note containing a Dataview query. Bookmarked filters, which I’m calling views, are like virtual Dataview queries. And, since you can do this without referencing file locations, you might question how much useful information was actually embedded in your folder structure. Then you might have a cup of tea.</p>
<p>One last point to stress: the bookmarks, which I will call views, are ephemeral. They can be created, duplicated, renamed and moved around without affecting the information itself. When focusing on a topic, drag it to the top of the tree and put it back when you are done.</p>
<section id="the-mechanics" class="level1">
<h1>The Mechanics</h1>
<section id="commands" class="level2">
<h2 class="anchored" data-anchor-id="commands">Commands</h2>
<p>The following table shows the bookmarks commands with suggested Hotkeys which are most likely unassigned.</p>
<table class="caption-top table">
<colgroup>
<col style="width: 34%">
<col style="width: 42%">
<col style="width: 23%">
</colgroup>
<thead>
<tr class="header">
<th>Command</th>
<th>Description</th>
<th>Hotkey</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Bookmark…</td>
<td>Bookmark current file</td>
<td><code>Ctrl-Cmd-Alt-M</code></td>
</tr>
<tr class="even">
<td>Show Bookmarks</td>
<td>Open bookmarks panel</td>
<td><code>Ctrl-B</code></td>
</tr>
<tr class="odd">
<td>Bookmark Current Search</td>
<td></td>
<td><code>Ctrl-Cmd-Alt-S</code></td>
</tr>
<tr class="even">
<td>Bookmark Current Block</td>
<td>Bookmark Block Under Cursor</td>
<td><code>Ctrl-Cmd-Alt-B</code></td>
</tr>
<tr class="odd">
<td>Bookmark Current Heading</td>
<td>Bookmark Heading Under Cursor</td>
<td><code>Ctrl-Cmd-Alt-H</code></td>
</tr>
</tbody>
</table>
</section>
<section id="bookmarks-panel" class="level2">
<h2 class="anchored" data-anchor-id="bookmarks-panel">Bookmarks Panel</h2>
<p>The panel lists all bookmarks, which, remember, are saved searches, or views. In the panel you can create, rename and delete bookmark groups to organize your bookmarks. Bookmarks can be dragged around to rearrange them.</p>
</section>
</section>
<section id="knowledge-trees" class="level1">
<h1>Knowledge Trees</h1>
<p>When working with a database, we typically create views. Views are subsets of your information based on queries which have been saved. They can be used passively, as a way to look at certain information on a certain topic. They can also be used interactively, as a basis for more fine-grained queries, which, if interesting, can themselves be saved as views.</p>
<p>I have my Knowledge Tree organized by the different domains of my life, Living, Learning and Creating. In addition, I have a section with utilities I call the Toolbox.</p>
<section id="living" class="level2">
<h2 class="anchored" data-anchor-id="living">Living</h2>
<p>This is the structure of my Living section:</p>
<pre><code>- Daily Notes
- Logs
    - Exercise
    - Piano
    - etc.
- Daily Notes
- CV
- People
- Leisure</code></pre>
<p><em>Daily Notes</em> is a view of <code>type:: daily</code>. Exercise and Piano are actual files with interactive Dataview queries. The rest are bookmark groups containing other views.</p>
</section>
<section id="learning" class="level2">
<h2 class="anchored" data-anchor-id="learning">Learning</h2>
<p>I use <em>Learning</em> for study and research activities. This part of the tree is the most complex in terms of structure.</p>
<p>By creating multiple views on a given topic and organizing them in folders I can essentially create an outline of my information using views. This kind of outline, again, is very flexible and can be reshaped easily as my knowledge develops.</p>
<p>This is an excerpt of my section on the normal distribution. It’s “home” is in the bookmark group <code>Learing/Data Science/Probability/</code>.</p>
<pre><code>Normal Distribution                 # All information on the Normal Distribution
Normal Distribution                 # The reference note on the topic
                                      The 2 are distinguished by different icons
Central Limit Theorem               # A bookmark group containing other views
68-95-99.7 Rule                     # A view of a block in a note
R Functions for Normal Distribution # A view of a section of a note</code></pre>
</section>
<section id="creating" class="level2">
<h2 class="anchored" data-anchor-id="creating">Creating</h2>
<p>is for writing and creation of other content. Creating includes works for external and internal use.</p>
<pre><code>- Articles
- Stories
- Video Scripts
- Musings</code></pre>
</section>
<section id="toolbox" class="level2">
<h2 class="anchored" data-anchor-id="toolbox">Toolbox</h2>
<p>In the toolbox I have the following directories, which should be self-explanatory:</p>
<pre><code>- Templates
- fileClasses
    - Class Definitions
    - Value Lists
- Fleeting Notes
- Other
    - Articles
    - MOCs
    - References
    - Atomics</code></pre>
<p>Other than templates and fileClasses, I rarely use the Toolbox.</p>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>I hope I have adequately conveyed some of the advantages of building Knowledge Trees. Maybe you noticed that the word “tree” is actually a misnomer. The branches of real trees don’t reconnect, but ours can. What we really have is a Knowledge Network. Bookmarks allow us to leverage Obsidian’s NoSQL features to free our Second Brain.</p>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>Obsidian</category>
  <guid>https://biscotty.online/blogs/obsidian/obsidian-bookmarks/</guid>
  <pubDate>Tue, 05 Sep 2023 06:00:00 GMT</pubDate>
  <media:content url="https://biscotty.online/blogs/obsidian/obsidian-bookmarks/tn-metadata-menu.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>Obsidian: The mechanics of Graph View</title>
  <dc:creator>Brian Carey</dc:creator>
  <link>https://biscotty.online/blogs/obsidian/graph-view-deets/</link>
  <description><![CDATA[ 





<p>Core functionality in Obsidian seems to be somewhat overlooked. I have written in other articles about using Search, Bookmarks, and Unique Notes for Freeing Your Thinking. In these videos, I demonstrate the functionality of another core component, Graph View.</p>
<p>A graph is a specific data structure consisting of nodes and edges. Obsidian consists of notes which are linked together. This type of data can be stored in a non-relational database. With links and metadata, Obsidian is a non-relational database.</p>
<p>For these reasons, graph view is a powerful way to visualize your data. Graph view is a force directed graph drawing. Where Obsidian search is the best way to find information, graph view is the best way to visualize information and discovering relationships which have not been defined, such as orphans.</p>
<p>These videos go through the details of the graph view functionality in the hope that you will begin to use it to visualize data.</p>
<hr>
<section id="part-1" class="level2">
<h2 class="anchored" data-anchor-id="part-1">Part 1</h2>
<iframe src="https://fast.wistia.net/embed/iframe/fy4yt8o2q3?seo=false&amp;videoFoam=false" title="GV-Deets-Pt1 Video" allow="autoplay; fullscreen" allowtransparency="true" frameborder="0" scrolling="no" class="wistia_embed" name="wistia_embed" msallowfullscreen="" width="750" height="422">
</iframe>
<script src="https://fast.wistia.net/assets/external/E-v1.js" async=""></script>
<hr>
</section>
<section id="part-2" class="level2">
<h2 class="anchored" data-anchor-id="part-2">Part 2</h2>
<iframe src="https://fast.wistia.net/embed/iframe/m04ic0bdnu?seo=false&amp;videoFoam=false" title="GV-Deets-Pt2 Video" allow="autoplay; fullscreen" allowtransparency="true" frameborder="0" scrolling="no" class="wistia_embed" name="wistia_embed" msallowfullscreen="" width="750" height="422">
</iframe>
<script src="https://fast.wistia.net/assets/external/E-v1.js" async=""></script>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>Obsidian</category>
  <category>Graphs</category>
  <guid>https://biscotty.online/blogs/obsidian/graph-view-deets/</guid>
  <pubDate>Thu, 31 Aug 2023 06:00:00 GMT</pubDate>
  <media:content url="https://biscotty.online/blogs/obsidian/graph-view-deets/GVFull.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>Obsidian: A Second Brain?</title>
  <dc:creator>Brian Carey</dc:creator>
  <link>https://biscotty.online/blogs/obsidian/second-brain/</link>
  <description><![CDATA[ 





<section id="obsidian-a-second-brain" class="level1">
<h1>Obsidian: A Second Brain?</h1>
<p>Obsidian is sometimes called a second brain. This is because the structure of a vault, with notes connected by links, is the way a neural network is structured, with notes as nodes and links as edges. Such data structures are typically represented by <a href="https://en.wikipedia.org/wiki/Graph_(abstract_data_type)">graphs</a>, and Obsidian has a built-in Graph View for this purpose.</p>
<p>In this video, I visually explore the concept of Obsidian as a second brain.</p>
<iframe src="https://fast.wistia.net/embed/iframe/0e9un8obut?seo=false&amp;videoFoam=false" title="2nd Brain Video" allow="autoplay; fullscreen" allowtransparency="true" frameborder="0" scrolling="no" class="wistia_embed" name="wistia_embed" msallowfullscreen="" width="750" height="422">
</iframe>
<script src="https://fast.wistia.net/assets/external/E-v1.js" async=""></script>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>Obsidian</category>
  <category>Graphs</category>
  <guid>https://biscotty.online/blogs/obsidian/second-brain/</guid>
  <pubDate>Wed, 30 Aug 2023 06:00:00 GMT</pubDate>
  <media:content url="https://biscotty.online/blogs/obsidian/second-brain/GVFull.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>Syncing your Thinking with Syncthing</title>
  <dc:creator>Brian Carey</dc:creator>
  <link>https://biscotty.online/blogs/obsidian/syncing-your-thinking-syncthing/</link>
  <description><![CDATA[ 





<p>Obsidian loses a lot of power if you can’t take notes from anywhere at anytime on any device you are using. Obsidian offers a subscription syncing service about which I’ve seen no complaints.</p>
<p>But there is an awesome <em>free, open source</em> project called <a href="https://syncthing.net">Syncthing</a> which is ideal for Obsidian. It’s easy to install on any OS or device, with almost instantaneous syncing, and it’s 100% private.</p>
<section id="device-to-device-sync" class="level1">
<h1>Device-to-Device Sync</h1>
<p>Most people are familiar with synchronization approaches which involve a central server, or at least a central, usually cloud-based, directory. This approach is commonly used to keep both multiple people and potentially multiple directories, and even development environments, synchronized.</p>
<p>In Obsidian we don’t need something so fancy. If you aren’t sharing (collaborating) on your vault, and if you don’t use two devices simultaneously 😉, the device-to-device synchronization is what you need. It is rapid, secure and private. Your information never sits anywhere other than on your own devices.</p>
<p>Device-to-device connections use a protocol called Universal Plug and Play, or UPnP. These do use a central server, but only for the purposes of locating and connecting devices, not for file transfer. When a device with Syncthing running connects to the internet it announces it’s location to the server and retrieves the location of your other on-line devices, to which they make a direct connection.</p>
<p>Once connected the devices share data directly with each other. Synchronization is very rapid. For example, sometimes I like to dictate my notes on my phone. I can have the note open on both my phone and my computer, dictate into my phone, and the text appears almost instantly in the note open on my computer.</p>
</section>
<section id="setup" class="level1">
<h1>Setup</h1>
<p>Syncthing is available on all common operating systems. I use a Linux operating system with an Android phone, but setup should be the same on any devices. On Linux the easiest and probably best way is with the flatpak. Most distros have <code>flatpak</code> installed by default, so:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">flatpak</span> install flathub com.github.zocker_160.SyncThingy</span></code></pre></div>
<p>On other OSs and devices you can use the normal installation process by going to their <a href="https:%20syncthing.net">website</a>. (Isn’t Linux easier?)</p>
<p>Getting you vault synchronized is a two-step process:</p>
<ol type="1">
<li>Connecting the devices</li>
<li>Sharing the directories</li>
</ol>
<section id="connecting-devices" class="level2">
<h2 class="anchored" data-anchor-id="connecting-devices">Connecting Devices</h2>
<p>Devices are connected by exchanging Device IDs, which are long alphanumeric strings. The connection can be initiated from either the computer or the phone. Syncthing will display a QR code containing the Device ID, so the most convenient way is to display the computer’s code, scan it with a phone and initiate the connection from the phone.</p>
<p>The Syncthing interface can be accessed using your web browser (localhost:8384). From the browser interface, show the QR code on the computer.</p>
<p><img src="https://biscotty.online/blogs/obsidian/syncing-your-thinking-syncthing/SyncthingShowQR.jpg" class="img-fluid"></p>
<p>On the phone, in the devices tab, click on the <code>+</code> to add a device, and then the QR symbol to scan the code. After that, give the device a meaningful name and save the new device. <img src="https://biscotty.online/blogs/obsidian/syncing-your-thinking-syncthing/ST-Phone-Device.png" class="img-fluid"></p>
<p>Back on your computer you will see an alert asking if you want to add the phone device. Accept this and give the device a name.</p>
<p><img src="https://biscotty.online/blogs/obsidian/syncing-your-thinking-syncthing/ST-add-device-1.jpg" class="img-fluid"></p>
<p>After accepting the device and after a short period the devices will display connected. This may take a few minutes the first time, but don’t worry…if you scanned the QR code nothing can really go wrong.</p>
</section>
<section id="sharing-directories" class="level2">
<h2 class="anchored" data-anchor-id="sharing-directories">Sharing Directories</h2>
<p>The first thing to do is create a directory on your phone for your Obsidian vault.</p>
<p>Once the devices are connected you can start to share directories. Since this is an Obsidian tutorial we only need to share the vault directory, but you can use the same process to share, for example, your photo or image directories on your phone so that you automatically get copies on your computer.</p>
<p>When we add (and delete) Syncthing directories, we aren’t really adding or removing any directories or files. We are adding an identifier which points to a directory on your device or system. So deleting a Syncthing directory is an entirely safe process.</p>
<p>That said, go ahead and add a Syncthing directory on your computer. Give the directory a specific name (Obsidian, maybe) and point it to the directory on your computer which contains your vault. <img src="https://biscotty.online/blogs/obsidian/syncing-your-thinking-syncthing/SyncthingAddFolders2-1.jpg" class="img-fluid"></p>
<p>In the sharing tab, select your phone or other device. <img src="https://biscotty.online/blogs/obsidian/syncing-your-thinking-syncthing/SynthingLappyAddDevice-1.jpg" class="img-fluid"></p>
<p>As when we added a device earlier, an alert will appear, this time on your phone. Accept to add the offered directory, and you will be prompted to give the directory a name and location. The name may or may not be the same as the one on the computer, since Syncthing is actually using the long, auto-generated string in the middle which you left alone, right?</p>
<p>Then select the new directory we created earlier as the location, and that’s it. Depending on the size of the files in the directory the initial sync can take a while. Since Obsidian files are just text files even the initial sync should be rapid. If you are syncing your phone images, the initial sync can take hours. Once they are synced, though, images from your phone will appear on your computer in seconds.</p>
</section>
<section id="closing-thoughts" class="level2">
<h2 class="anchored" data-anchor-id="closing-thoughts">Closing Thoughts</h2>
<p>From the wonderful world of FOSS we have a synchronization tool ideal for keeping directories in sync across personal devices. Perfect for Obsidian!</p>


</section>
</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>Obsidian</category>
  <category>Linux</category>
  <guid>https://biscotty.online/blogs/obsidian/syncing-your-thinking-syncthing/</guid>
  <pubDate>Mon, 28 Aug 2023 06:00:00 GMT</pubDate>
  <media:content url="https://biscotty.online/blogs/obsidian/syncing-your-thinking-syncthing/SyncThing.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>Obsidian Basics - Headers</title>
  <dc:creator>Brian Carey</dc:creator>
  <link>https://biscotty.online/blogs/obsidian/obsidian-headers/</link>
  <description><![CDATA[ 





<p>Besides the actual content of a note, the most important elements in notes are the headers. More than just enhancing visual presentation of your information, headers give access to a variety of useful functionality. In this article, I will discuss the value of headers as well as the mechanics of using them.</p>
<section id="creating-headers" class="level1">
<h1>Creating Headers</h1>
<p>A Header is created by starting a line with from 1 to 6 pound signs (<code>#</code>) followed by a space. (When you enter your first <code>#</code> sign, Obsidian will think you are entering a tag and will present you with a drop-down suggesting tags. Just ignore this, type <code>Space</code> or another <code>#</code>, and it will go away.)</p>
<p>There are six levels of headers available, determined by how many # signs you use. Headers can be nested, allowing them to function like an outline. They create sections in your document.</p>
<p>As an example, an outline like:</p>
<pre><code>I. Main Subject
  A. First topic
    1. Point 1
    2. Point 2
  B. Second topic
    1. Point 1
    2. Point 2</code></pre>
<p>would be represented in your note with Headers like this:</p>
<pre><code># Main Subject
## First topic
### Point 1
### Point 2
## Second topic
### Point 1
### Point 2</code></pre>
<p>If you are familiar with html, this is the same as</p>
<pre><code>&lt;h1&gt;Main Subject&lt;/h1&gt;
&lt;h2&gt;First topic&lt;/h2&gt;
&lt;h3&gt;Point 1&lt;/h3&gt;
&lt;h3&gt;Point 2&lt;/h3&gt;
&lt;h2&gt;Second topic&lt;/h2&gt;
&lt;h3&gt;Point 1&lt;/h3&gt;
&lt;h3&gt;Point 2&lt;/h3&gt;</code></pre>
<p>NB. Obsidian can read HTML just fine. Try entering the HTML above into a note and, in Read or Preview Mode, you will see that the result is the same as when using the pound signs.</p>
</section>
<section id="value-of-headers" class="level1">
<h1>Value of Headers</h1>
<p>The mechanics of using Headers are pretty simple, but I’d like to explain what Headers are good for besides just looking pretty. They provide:</p>
<ol type="1">
<li><strong>Structure</strong></li>
<li><strong>Navigational aid</strong> via an auto-generated table of contents</li>
<li><strong>Folding</strong> as a way to easily hide sections of text</li>
<li><strong>Reference hooks</strong> which can be directly linked to from other notes</li>
</ol>
<section id="structure" class="level2">
<h2 class="anchored" data-anchor-id="structure">Structure</h2>
<p>Headers allow you to divide your note in logical sections. You can use them like you would an outline, as described above. Every note should, at a minimum, a level one header at the beginning with a title for the note.</p>
<p>Obsidian helps me organize my thoughts. A note often “starts life” as a sentence or two that I “jotted down” when the thought came to me. When I return to the note, if I still find it interesting, the first thing I do is give it a title (level one header). It summarizes the purpose of the note succinctly, and for a simple, atomic note, that may be all I need, although I might want to include some reference information, in which case I create two level-two headers, one for content, one for references. And so on…</p>
<p>However, for more complex notes which are not atomic, developing the note almost always involves breaking down the idea into parts. This is the purpose of headers. If you’re one of those people who like to start with an outline, start a new document with a bunch of headers. Even if you don’t, as you work on documents you will naturally need to break things down into smaller ideas…headers help you structure your thinking.</p>
</section>
<section id="navigation" class="level2">
<h2 class="anchored" data-anchor-id="navigation">Navigation</h2>
<p>If you open your right sidebar and click on the Outline icon, you will see the table of contents panel with an outline created by your headers. Clicking on any item will take you to that section of the document. Subsections can be folded in the panel by clicking on the down arrow to the left of the section. This is very useful for long documents.</p>
</section>
<section id="folding" class="level2">
<h2 class="anchored" data-anchor-id="folding">Folding</h2>
<p>If you move your cursor over a header in your document, you will see a down arrow to the left of the header. This is a toggle which allows you to collapse (hide) or expand (show) a section’s content.</p>
<p>A section includes all content up to the next Header of the same level or higher. So a level 3 section would include all content up until the next level 3 Header, or a level 2 or 1 Header. This can be confusing to explain, but if you experiment a little it should be clear.</p>
<p>There are commands that allow you to work more easily with folds. If you go into the command palette (Ctrl-P) you will see four commands which allow you to expand and collapse folds.</p>
<p><img src="https://biscotty.online/blogs/obsidian/obsidian-headers/ScreenForHeaders.png" class="img-fluid"></p>
<p>These commands are really only useful if you assign them hotkeys. If you do so you will find that navigating long documents becomes very quick, assuming that Headers are well-used.</p>
</section>
<section id="hooks-for-links" class="level2">
<h2 class="anchored" data-anchor-id="hooks-for-links">Hooks for Links</h2>
<p>The final aspect of headers I’d like to mention is their use as reference hooks for links. When linking to another note, you can directly link to a header and therefore to a section. When creating a link, directly after the name of the note and inside the square brackets, you can type <code>#</code> and you will get a drop-down list of all the headers in the note. You can select one of these headers. Then the embedded document will only display that section in your current note. Similarly, hovering over the link and pressing <code>Ctrl</code> (if using the Hover Editor plugin) will display that section. More advanced plugins like dataview can also reference Headers.</p>
<p>NB. You can also link directly to paragraphs by using <code>#^</code> after the note’s name.</p>
</section>
</section>
<section id="closing-thoughts" class="level1">
<h1>Closing Thoughts</h1>
<p>Headers are simple yet powerful. They help me organize and structure my thoughts and ideas. They are the first step in working with Obsidian.</p>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>Obsidian</category>
  <guid>https://biscotty.online/blogs/obsidian/obsidian-headers/</guid>
  <pubDate>Sun, 27 Aug 2023 06:00:00 GMT</pubDate>
  <media:content url="https://biscotty.online/blogs/obsidian/obsidian-headers/tn-metadata-menu.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>What does it mean that is a NoSQL Database?</title>
  <dc:creator>Brian Carey</dc:creator>
  <link>https://biscotty.online/blogs/obsidian/obsidian-no-sql-database/</link>
  <description><![CDATA[ 





<section id="sql-and-nosql" class="level1">
<h1>SQL and NoSQL</h1>
<p>There are two different types of databases, relational and non-relational. Relational databases are the kind most people usually think about. Data is kept in tables, with columns for fields and rows for values. The tables have special columns which relate (link) them to other tables. A well-formed table in a spreadsheet is a database. If two are linked by a common column, that is a relational database.</p>
<p>Obsidian is obviously not a relational database.</p>
<p>SQL stands for Structured Query Language, and it is the syntax which was designed to work with relational databases. The association of the syntax and data structure is so strong that relational databases came to be referred to as SQL databases, even though SQL, the language, can be used with any type of database.</p>
<p>An SQL query should look familiar to you if you have used Dataview:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span> name <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> users <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">WHERE</span> location <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> “Earth” <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ORDER</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">BY</span> age;</span></code></pre></div>
<p>It’s just like Dataview queries, yet Obsidian is not an “SQL database”. My point is that we can use SQL queries to access our data even if it isn’t a relational database.</p>
<p>The other type of database, a non-relational database, is unfortunately called a NoSQL database. SQL, the language, can still be used to query data in a NoSQL database. If I’ve adequately confused you, let’s proceed.</p>
<p>Rather than storing data in tables, NoSQL databases store data in documents. Documents are text files written in a standard format, usually JSON (JavaScript Object Notation) but frequently YAML, which is the syntax used in frontmatter in Obsidian.</p>
<p>In a NoSQL database, documents contain information and metadata in key/value pairs. The metadata can be used to make relationships (links) between data (information). NoSQL databases are flexible and new key/value pairs can be added to a document without modifying a whole table. None of the relationships need be pre-defined, nor need they be hierarchical. NoSQL databases are ideal for data structures which consist of nodes (documents) and edges (links). Does any of this sound familiar?</p>
<p>Obsidian is a NoSQL database.</p>
</section>
<section id="on-ontologies" class="level1">
<h1>On Ontologies</h1>
<p>Commonly used organizational systems often focus on ontological relationships. Four relationships exist: parent, child, sibling, and friend. First, note that the first three are essentially the same since when a parent is defined, child and sibling relationships are logically specified. So we really only have two categories, which could just as easily be called “directly related” and “indirectly related”. Also, notice that in file-based hierarchical, ontological data structures a note (usually) has, rather unnaturally, only one parent.</p>
<p>Obsidian offers core functionality that allows me to ignore files and focus on information. I’m referring to Search, Bookmarks and Unique Notes. The latter is effectively invisible in articles and videos, and the other two rarely come up. This is especially surprising with regard to Search because that’s the most efficient and powerful way to find information in your vault. Most presenters use Quick Switcher or the Navigator to create and access files in order to create or access information. This is an extra step, wasting time and energy and impeding the flow of thought.</p>
<p>SQL databases rely on hierarchy. NoSQL databases don’t. By thinking in hierarchical, ontological terms, we tie ourselves to a table-based way of thinking. By thinking instead about direct and indirect relationships, a note can have multiple “parents” because it can naturally relate directly to more than one topic. (We all have at least two parents in life, and often have other people who fill the role as well.) These articles, for example, have two main topics, two direct relationships: Obsidian and Personal Knowledge Management. I don’t have to choose one or the other. I might decide to write about information processing, in which case these articles could be given another “parent”, the new topic.</p>
</section>
<section id="interacting-with-nosql-databases" class="level1">
<h1>Interacting with NoSQL Databases</h1>
<p>The word graph is commonly used to refer to many different types of charts, such as bar charts or line graphs. It has a more specific meaning, however, which is the specific type of graph produced by Graph View. This is the normal way that these data structures are visualized, which is why Graph View is the ideal way to visually explore our vault. This is also the way neural networks are visualized.</p>
<p>Getting information from NoSQL databases is done through queries, not by opening documents. Filters in Obsidian Search have all the capabilities of Dataview queries, with a somewhat simpler syntax.</p>
</section>
<section id="final-words" class="level1">
<h1>Final words</h1>
<p>I hope I have explained what it means to say that Obsidian is a NoSQL and the implications of that. Everything we write, every word, becomes part of a database, and we can use the power of databases to retrieve information. Stop using Obsidian as a file manager!</p>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>Obsidian</category>
  <guid>https://biscotty.online/blogs/obsidian/obsidian-no-sql-database/</guid>
  <pubDate>Thu, 24 Aug 2023 06:00:00 GMT</pubDate>
  <media:content url="https://biscotty.online/blogs/obsidian/obsidian-no-sql-database/fyt-cover.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>Regular Expressions for In-Line Fields</title>
  <dc:creator>Brian Carey</dc:creator>
  <link>https://biscotty.online/blogs/obsidian/regex-search-in-line-metadata/</link>
  <description><![CDATA[ 





<p>If you are like me and use in-line (double colon) fields more than YAML, the improvements to metadata management (Properties) wasn’t much of a help. The new filter syntax, <code>["key":value]</code>, and the glob version, <code>["key":]</code>, don’t search in-line fields.</p>
<p>Of course, this isn’t unexpected. Obsidian, for what I’m sure are good reasons, resists embracing in-line metadata, even though it is very widely used. Oh well, hope springs eternal… Nevertheless, though I’ve tried many times, I can’t give up on the convenience of in-lines.</p>
<p>Because in-line fields use two colons, which do not appear together in ordinary writing, it is easy to filter for them. For a glob filter like <code>["key":]</code> in the new Properties, you can simply use <code>"key:: "</code> to achieve the same effect, querying in-line metadata instead of YAML.</p>
<p>Filtering for specific values is a little trickier, because we must take into account multi-value fields. Fortunately, Obsidian allows us to use regular expressions in filters, and a simple one will achieve our goal. To use regular expressions, use the slash, <code>/</code>, as a delimiter instead of <code>"</code>. (In the example above, we actually could have used <code>/key:: /</code> instead of <code>"key:: "</code>.)</p>
<p>In regular expressions, a period, <code>.</code>, matches any character, and an asterisk, <code>*</code>, indicates that there can be 0 or more of a character. By putting the combination <code>.*</code> before the value that we are filtering, we are saying that there may or may not be other characters between the field name and the value being searched. In other words, there may be multiple values.</p>
<p>So, even if the value we are looking for is one among many, to search for a specific key/value, you can use <code>/key:: .*value/</code>, which does the same as <code>["key":value]</code> does for YAML.</p>



<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>Obsidian</category>
  <guid>https://biscotty.online/blogs/obsidian/regex-search-in-line-metadata/</guid>
  <pubDate>Wed, 23 Aug 2023 06:00:00 GMT</pubDate>
  <media:content url="https://biscotty.online/blogs/obsidian/regex-search-in-line-metadata/tn-metadata-menu.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>Optimal Notes with Obsidian</title>
  <dc:creator>Brian Carey</dc:creator>
  <link>https://biscotty.online/blogs/obsidian/optimal-notes-with-obsidian/</link>
  <description><![CDATA[ 





<section id="optimal-notes-with-obsidian" class="level1">
<h1>Optimal Notes with Obsidian</h1>
<blockquote class="blockquote">
<p>…a tale in the spirit of Euripides</p>
</blockquote>
</section>
<section id="motivation" class="level1">
<h1>Motivation</h1>
<p>Learning and creativity involve gathering information through our senses and then discovering relationships, mundane or novel, between all those bits of information. The neural network that is our brain is very powerful at relationships, so-so on information storage, and very poor at information retrieval. Over time our brain becomes filled with more and more information which becomes effectively less and less accessible. A number of great thinkers have said that they never remember something that can easily be looked up.</p>
<p>Obsidian is often referred to as a second brain. This is because it does not work like a database, spreadsheet, or any other typical storage system. It is itself structured more like a neural network. It efficiently and quickly handles information storage and retrieval, and does so in a way that mimics a neural network and facilitates the creative process of identifying relationships between thoughts. A picture is worth a thousand words, so here is an example of a collection of notes (called a vault in Obsidian) with lines which indicate relationships. These linkages develop over time as a vault becomes more mature.</p>
</section>
<section id="the-tragedy-of-notes" class="level1">
<h1>The Tragedy of Notes</h1>
<p>I never learned how to take notes. When I was a young student I had a “casual” relationship with note-taking. In high school I organized my notes chronologically, ie. I put them on top of a pile 😉. In college I adopted the innovative approach of seperating my notes by subject matter. I did start taking much more detailed notes in Math and Science classes though, thinking that I would want to refer back to this information in future classes.</p>
<p>When I started my masters program I realized I needed to get serious about my note-taking. Throughout my classes I took meticulous notes on the lectures. I had very experienced doctors and teachers sharing their personal knowledge and clinical experience and I didn’t want to miss a scintilla. By the end of the program I aced my classes and had many binders full of notes. I was ready to move into my profession armed with this awesome resource 😃.</p>
<p>Reality bites. From time to time a client would present with an unusual group of symptoms and I would remember a teacher suggesting a particular herb or formula for this unusual condition. Happily I’m sure I wrote it down and it’s in my notes. So I just need to find it… somewhere… people are waiting…</p>
<p><strong>Where? Which notebook?</strong></p>
<p>Somewhere in all those notes is the one piece of information that I need. Somewhere, in all those beautiful, organized binders full of valuable notes painstakingly gathered over years, now, effectively useless. Sadness and dispair set in 😢.</p>
</section>
<section id="deus-ex-machina" class="level1">
<h1>Deus Ex Machina</h1>
<p>When I started studying probability and statistics, data analysis and R programming I realized that I needed a radically different approach to my note-taking. I needed a system where I could quickly retrieve discrete pieces of information which may have been gleaned from a variety of sources. I needed dedicated note-taking software. Lot’s of data science students and professionals were/are moving to Obsidian away from more traditionally structured note-taking applications like Notewise, and of course I checked it out. It turned out it is popular not only among data scientists but by all manner of students, teachers, researchers and writers. In fact, anyone concerned with managing personal information.</p>
<p><strong>And, wow! Obsidian is revolutionary.</strong></p>
<p>Obsidian is free software unlike any other, focused as much on retrieval of information as on storage of information, although it’s pretty slick there too. In addition Obsidian offers many ways to relate notes through links and add metadata to enrich notes. (Did I mention it’s free?)</p>
<p>Obsidian provides:</p>
<ul>
<li>A feature-rich editor for text files (in Markdown syntax)</li>
<li>Powerful indexing: every word in every note can be quickly found</li>
<li>Flexible structure for your information which need not be predefined but evolves naturally over time</li>
<li>A variety ways to apply and reference metadata, both standard and custom</li>
<li>No databases or other backend or proprietary formats, just text files</li>
</ul>
<p>Let’s look at these points in a bit of detail.</p>
</section>
<section id="working-in-obsidian" class="level1">
<h1>Working in Obsidian</h1>
<p>Obsidian provides a disarmingly simple but powerful editing experience. The user interface is of modern design. It uses Markdown, a standardized markup language similar to but much simpler than html. With easily-learned syntax you can create beautiful formatted documents enriched with visual elements such as drawings, charts, images, videos and pdf files. Many different themes are available to fit your taste, and if you know some CSS you can fully customize the appearance of notes. (Programmers can even embed JavaScript.)</p>
<p>Obsidian’s functionality can be extended through the use of the hundreds of community plugins available. For example, I use a program called Todoist for task management. A plugin allows me to create these tasks from within Obsidian and report on them (query them) in my notes. In order to easily consume web content I use a plugin called Surfing, which allows me to open a web page in Obsidian and convert the page to a Markdown text file. I can then easily “clip” parts with a right-click, and these snippets provide the basis and reference for notes I make on the material I’m reading.</p>
<section id="fast-powerful-search" class="level2">
<h2 class="anchored" data-anchor-id="fast-powerful-search">Fast, Powerful Search</h2>
<p>This is where Obsidian directly addresses the Tragedy of Notes. Literally every word in every note can be immediately retrieved thanks to a blazingly fast indexing system. Start typing a word or phrase and you will see all the notes that contain those words or phrases along with their context. With a little practice you can make sophisticated searches involving multiple conditions. Usually just a few words will find the information you are looking for.</p>
<p>So in the scenario above I could have found the answer to my question in seconds.</p>
</section>
<section id="structure-emerges-naturally" class="level2">
<h2 class="anchored" data-anchor-id="structure-emerges-naturally">Structure Emerges Naturally</h2>
<p>When think of keeping notes beyond a bunch of Word documents we naturally think of spreadsheets or databases. The structure of our data can be arbitrary in the case of spreadsheets or must be pre-defined for databases. Changing the structure later involves a lot of effort. But for quick retrieval of information you need a database, right?</p>
<p>Well remember we already dealt with that above. (We don’t need no stinkin’ database.) What we have instead in Obsidian are “backlinks”, which are references from one note to another. This gives us the opportunity for a structure which evolves “organically”. As you make notes and develop them you will begin to connect ideas in one note with another note. A quick search can find all occurences of similar ideas, and relevant notes can be linked to. This cross-linking of information is the neural network, the second brain referred to above.</p>
</section>
<section id="information-about-information" class="level2">
<h2 class="anchored" data-anchor-id="information-about-information">Information About Information</h2>
<p>Metadata has entered the awareness of most people these days through controversies around the Government’s access to phone records. In these cases, the FBI doesn’t (usually) have access to the actual data, the conversations. What they do have is the metadata. This information includes dates, times, who called whom, where the people were, how long the conversation lasted, etc. Investigators say that they can often learn as much from the metadata than from the actual content.</p>
<p>Obsidian allows for the flexible and customizable application of metadata to notes, and this metadata can serve many puposes. For example, if I were writing an article which incorporated a series of observations taken over time (in seperate notes), using metadata I can easily pull the information I need into my article. I could use metadata to easily create a list of references for my article. I could use metadata to track the status of my project (draft, in review, final, published).</p>
</section>
<section id="creativity-beyond-information-retrieval" class="level2">
<h2 class="anchored" data-anchor-id="creativity-beyond-information-retrieval">Creativity: Beyond Information Retrieval</h2>
<p>So far I’ve really focused on information retrieval. And I’ve given a practical example of the usefulness of that quick retrieval. But there is another great value of Obsidian, which is to facilitate the creation of new works.</p>
<p>Obsidian is ideal for a note-taking approach called Zettelkasten, which is German for a box of index cards. In a zettelkasten system notes are “atomic”, meaning they are independent, self-contained pieces of information which are then coded and correlated for easy retrieval. This is how Carl Linnaeus was able to create the biological classification system we still use today. Another oft-cited example is the sociologist Niklas Luhmann who produced around 70 books and 400 academic papers. He apparently had 90,000 notes in his Zettelkasten.</p>
<p>This approach to note-taking is widely practiced in Europe but not so in the USA. Obsidian facilitates all kinds of writing, not just academic writing. The recently deceased Joan Rivers, a comedian, author and talk show host, had 60,000 notes. Other famous comediens like Bob Hope and George Carlin did the same.</p>
<p>Zettelkasten through the centuries</p>
<div class="columns">
<div class="column" style="width:50%;">
<section id="th-century" class="level4">
<h4 class="anchored" data-anchor-id="th-century">17th Century</h4>
<p><img src="https://biscotty.online/blogs/obsidian/optimal-notes-with-obsidian/17thCZ.jpg" class="img-fluid"></p>
</section>
</div><div class="column" style="width:50%;">
<section id="th-century-1" class="level4">
<h4 class="anchored" data-anchor-id="th-century-1">20th century</h4>
<p><img src="https://biscotty.online/blogs/obsidian/optimal-notes-with-obsidian/20thCZ.jpg" class="img-fluid"></p>
</section>
</div>
</div>
<section id="st-century" class="level4">
<h4 class="anchored" data-anchor-id="st-century">21st century</h4>
<p><img src="https://biscotty.online/blogs/obsidian/optimal-notes-with-obsidian/GraphView.png" class="img-fluid"></p>
</section>
</section>
<section id="freedom-and-privacy" class="level2">
<h2 class="anchored" data-anchor-id="freedom-and-privacy">Freedom and Privacy</h2>
<p>Finally I’ll mention one more aspect of Obsidian. All of your notes are just text files stored on your own computer. They don’t get transmitted or stored anywhere else (unless you want to). Since they are text files they can be opened and read by any editor like Notepad, LibreOffice or Word. You back up your notes in the same way you back up everything else on your system (which you do, right?). Noone is tracking your notes or any other information about you.</p>
<p>Obsidian is about Personal Information. It’s your brain!</p>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>I hope that I have convinced you to download Obsidian and explore it’s potential. Personally I can’t imagine taking notes any other way now. Obsidian is easy to use, and there are many on-line resources to help you out including the Guides on this site. I’ve listed a few below. Resources</p>
<p>A shout out to these folks who helped me get started:</p>
<ul>
<li>From Sergio</li>
<li>Linking Your Thinking with Nick Milo</li>
<li>Zsoldt’s Visual Personal Knowledge Management</li>
<li>Nicole van der Hoeven</li>
</ul>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>Obsidian</category>
  <category>PKM</category>
  <guid>https://biscotty.online/blogs/obsidian/optimal-notes-with-obsidian/</guid>
  <pubDate>Sat, 05 Aug 2023 06:00:00 GMT</pubDate>
  <media:content url="https://biscotty.online/blogs/obsidian/optimal-notes-with-obsidian/tn-metadata-menu.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>Data Science</title>
  <link>https://biscotty.online/blogs/data-science/data-science.html</link>
  <description><![CDATA[ 









<div class="quarto-listing quarto-listing-container-default" id="listing-listing">
<div class="list quarto-listing-default">
<div class="quarto-post image-right" data-index="0" data-categories="R0lTJTJDUHl0aG9uJTJDRGF0YSUyMFNjaWVuY2U=" data-listing-date-sort="1740466800000" data-listing-file-modified-sort="1744128070087" data-listing-date-modified-sort="NaN" data-listing-reading-time-sort="20" data-listing-word-count-sort="3999">
<div class="thumbnail">
<p><a href="../../blogs/data-science/python-movingpandas-speed-segments/index.html" class="no-external"></a></p><a href="../../blogs/data-science/python-movingpandas-speed-segments/index.html" class="no-external">
<p><img loading="lazy" src="https://biscotty.online/blogs/data-science/python-movingpandas-speed-segments/tda3_3.png" class="thumbnail-image"></p>
</a><p><a href="../../blogs/data-science/python-movingpandas-speed-segments/index.html" class="no-external"></a></p>
</div>
<div class="body">
<h3 class="no-anchor listing-title">
<a href="../../blogs/data-science/python-movingpandas-speed-segments/index.html" class="no-external">Speed, Simplification and Segments</a>
</h3>
<div class="listing-subtitle">
<a href="../../blogs/data-science/python-movingpandas-speed-segments/index.html" class="no-external"></a>
</div>
<div class="listing-categories">
<div class="listing-category" onclick="window.quartoListingCategory('R0lT'); return false;">
GIS
</div>
<div class="listing-category" onclick="window.quartoListingCategory('UHl0aG9u'); return false;">
Python
</div>
<div class="listing-category" onclick="window.quartoListingCategory('RGF0YSUyMFNjaWVuY2U='); return false;">
Data Science
</div>
</div>
<div class="listing-description">
<a href="../../blogs/data-science/python-movingpandas-speed-segments/index.html" class="no-external">Working with MovingPandas</a>
</div>
</div>
<div class="metadata">
<a href="../../blogs/data-science/python-movingpandas-speed-segments/index.html" class="no-external">
<div class="listing-date">
Feb 25, 2025
</div>
<div class="listing-author">
Brian Carey
</div>
</a>
</div>
</div>
<div class="quarto-post image-right" data-index="1" data-categories="RGF0YSUyMFNjaWVuY2UlMkNHSVMlMkNQeXRob24=" data-listing-date-sort="1738566000000" data-listing-file-modified-sort="1744126594474" data-listing-date-modified-sort="NaN" data-listing-reading-time-sort="16" data-listing-word-count-sort="3022">
<div class="thumbnail">
<p><a href="../../blogs/data-science/python-movingpandas-points-paths/index.html" class="no-external"></a></p><a href="../../blogs/data-science/python-movingpandas-points-paths/index.html" class="no-external">
<p><img loading="lazy" src="https://biscotty.online/blogs/data-science/python-movingpandas-points-paths/ny6.png" class="thumbnail-image"></p>
</a><p><a href="../../blogs/data-science/python-movingpandas-points-paths/index.html" class="no-external"></a></p>
</div>
<div class="body">
<h3 class="no-anchor listing-title">
<a href="../../blogs/data-science/python-movingpandas-points-paths/index.html" class="no-external">Points to Paths in Python</a>
</h3>
<div class="listing-subtitle">
<a href="../../blogs/data-science/python-movingpandas-points-paths/index.html" class="no-external"></a>
</div>
<div class="listing-categories">
<div class="listing-category" onclick="window.quartoListingCategory('RGF0YSUyMFNjaWVuY2U='); return false;">
Data Science
</div>
<div class="listing-category" onclick="window.quartoListingCategory('R0lT'); return false;">
GIS
</div>
<div class="listing-category" onclick="window.quartoListingCategory('UHl0aG9u'); return false;">
Python
</div>
</div>
<div class="listing-description">
<a href="../../blogs/data-science/python-movingpandas-points-paths/index.html" class="no-external">Creating trajectories in MovingPandas</a>
</div>
</div>
<div class="metadata">
<a href="../../blogs/data-science/python-movingpandas-points-paths/index.html" class="no-external">
<div class="listing-date">
Feb 3, 2025
</div>
<div class="listing-author">
Brian Carey
</div>
</a>
</div>
</div>
<div class="quarto-post image-right" data-index="2" data-categories="R0lTJTJDUHl0aG9uJTJDRGF0YSUyMFNjaWVuY2U=" data-listing-date-sort="1709103600000" data-listing-file-modified-sort="1744121426505" data-listing-date-modified-sort="NaN" data-listing-reading-time-sort="11" data-listing-word-count-sort="2149">
<div class="thumbnail">
<p><a href="../../blogs/data-science/gpx-gps-data/index.html" class="no-external"></a></p><a href="../../blogs/data-science/gpx-gps-data/index.html" class="no-external">
<p><img loading="lazy" src="https://biscotty.online/blogs/data-science/gpx-gps-data/pr2.png" class="thumbnail-image"></p>
</a><p><a href="../../blogs/data-science/gpx-gps-data/index.html" class="no-external"></a></p>
</div>
<div class="body">
<h3 class="no-anchor listing-title">
<a href="../../blogs/data-science/gpx-gps-data/index.html" class="no-external">Trail Mapping with Python</a>
</h3>
<div class="listing-subtitle">
<a href="../../blogs/data-science/gpx-gps-data/index.html" class="no-external"></a>
</div>
<div class="listing-categories">
<div class="listing-category" onclick="window.quartoListingCategory('R0lT'); return false;">
GIS
</div>
<div class="listing-category" onclick="window.quartoListingCategory('UHl0aG9u'); return false;">
Python
</div>
<div class="listing-category" onclick="window.quartoListingCategory('RGF0YSUyMFNjaWVuY2U='); return false;">
Data Science
</div>
</div>
<div class="listing-description">
<a href="../../blogs/data-science/gpx-gps-data/index.html" class="no-external">Using your GPX data with geopandas</a>
</div>
</div>
<div class="metadata">
<a href="../../blogs/data-science/gpx-gps-data/index.html" class="no-external">
<div class="listing-date">
Feb 28, 2024
</div>
<div class="listing-author">
Brian Carey
</div>
</a>
</div>
</div>
</div>
<div class="listing-no-matching d-none">
No matching items
</div>
</div><a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <guid>https://biscotty.online/blogs/data-science/data-science.html</guid>
  <pubDate>Thu, 10 Apr 2025 16:52:03 GMT</pubDate>
</item>
</channel>
</rss>
