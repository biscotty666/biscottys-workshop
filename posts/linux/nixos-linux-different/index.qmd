---
title: "NixOS: the Linux different"
subtitle: Grokking NixOS
description: Exploring the concepts behind the unique Linux distribution
date: 06-10-2024
categories: [Linux, Distributions]
id: Linux Different
author: Brian Carey
image: NixosWinter.png
Published: false
---

NixOS is a Linux distribution with a radically different design from any other. The NixOS approach solves many problems in the design of other Linux systems. However, since the NixOS paradigm relies on ideas foreign to many people such as graphs and functional programming, it carries a particularly steep learning curve. Switching from Ubuntu to Fedora is painless. Switching to NixOS is not.

I feel strongly that it is worth the learning curve, which in my experience isn't really so bad. You can really use NixOS without understanding immutability, graphs or functional programming. But, to understand why NixOS is a cut above all the rest, some understanding of the design is helpful.

Here is a first attempt at a general description of NixOS and why it is so different. 

## How different? Really different.

After you've been working with with Linux long enough, you realize that all distributions are pretty much the same. Different but similar package managers and different but similar package repositories, and different default desktop environments. Some kernel tweaks as well perhaps, but given a command line it is almost trivial to move from one distribution to another.

Not so with NixOS. Want to see what software is installed? You won't find anything in `/usr/bin`, or any other typical `bin` or `opt` directory. Want to add an alias to `/etc/hosts`? That file, indeed much in `/etc`, turns out to be read-only, even to root. Add a user with `useradd`? Nope. Install some software in a gui "App Store", or even with a command like `apt install`? These don't exist. In fact, many of your basic system administration skills seem useless with NixOS not adhering to FHS (file heirarchy standard) or having the ability to edit configuration files.  But, don't be sad, your Linux skills are still important, because...

## It's still Linux

NixOS is, never-the-less, Linux just as much as is Fedora or Debian. It runs a Linux kernel with all the GNU api tools (or their Rust alternatives). It has a large package repository, the largest of any, in fact. It even uses SystemD ðŸ˜ž. You can add any software that runs on Linux, and to an ordinary "end user", the daily experience is the same as on any other distro. They might remark how stable and snappy it is, but their day to day workflow would not be different.

Under the hood, though, everything is different on a fundamental level. Given the learning curve, which make is seem like a completely new operating system rather than just another Linux distribution, the obvious question is: why bother? There are many reasons, but one is that, once the Nix way is grokked, all of these admin tasks I mentioned become much simpler and straight-forward, more robust, easier to rollback, and fully reproducible. I guess that's more than one reason.

## Getting a little personal

For me, NixOS is a sort of the culmination of why I turned to Linux decades ago. When Windows first came out, compared to DOS, it was cool and all, but I felt like a veil had been drawn over the OS, which then became hidden and mysterious. Apple computers seemed even worse in this aspect. For some types of work, the graphical user interface was a great step forward. But for other things, the gui just obscured the underlying workings of the computer and made anything outside of typical usage more difficult. On top of that was the irritating instability. With every system crash, I wanted to understand what was really going on so I could fix it.

Then I discovered Linux, and more specifically Slackware, which uses a terminal and vi (elvis at the time) for all administrative tasks. The ability to understand exactly what my computer was doing, to configure it with text files, to install, and if necessary, build, software from the command line, was just what I was looking for. I even compiled my own kernels back then. When I started using other distributions, I never took more than a quick glance at their graphical admin tools like app stores and such. Give me the command line any day, and every distribution is basically the same.


## Aging systems and other problems

As experienced Linux users know, there are many issues which arise over time on any Linux system, such as software upgrades which create library version conflicts, problems which are made worse on shared systems. Cruft accumulates as uninstalls are rarely clean, especially with regard to program data files and directories. If you install and uninstall many programs, after a certain amount of time, it is difficult to be sure exactly what lingers in /etc, /usr/share, ~/.local, or anywhere else, for that matter. After a year of installing, uninstalling and configuring software, how can you be sure what is actually there? And when your new computer arrives, or you finally decide to do a clean install instead of a version upgrade, how much effort will it take to set it up exactly how you like it?

Enter NixOS, where I can declare the entire operating system with text files! I can write down what I want, and know that that will be all that there is on my system, despite what may have been there before. I can, for example, simply grep my configs to see everything installed and all configurations, without needing a special package manager tool. In fact, with NixOS, nothing is every really installed, upgraded, or uninstalled, not in the traditional sense anyway. Any of these activities generates a brand, spankin' new system image which entirely replaces the old one.

## Embrace the difference

Here be dragons, but they are auspicious Chinese dragons, not scary European ones. The singular power of NixOS lies in the differences, so they are worth exploring. They involve ideas such as declarative, functional programming vs imperative, procedural programming, graphs vs stacks, immutable systems, atomic upgrades and ephemeral packages. Also, Nix/NixOS isn't just one thing, it is a programming language (Nix), package manager (Nix), repository (nixpkgs), and operating system (NixOS).

Exploring all these topics would be overwhelming in one article, so it is my intention to write an occasional series on each. None of these will be tutorials, rather they are intended as an introduction to the ideas useful to understanding NixOS. As a practical matter, Nix the package manager and language can be installed on any computer and be experimented with, or even used as a primary package manager for your current system. NixOS also runs nicely in a virtual machine. To learn NixOS you'll need to get your hands dirty, and for me at least, getting used to NixOS and configuring my system from the comfort of Fedora made the eventual switch to metal completely painless, as I just needed to copy the configs I had created to the new partition and build it, not repeat my work.

NixOS is not for everyone. The imperative paradigm has worked reasonably well for decades, and has the virtue of familiarity, so there is no strong motivation to change for most users. On the other hand, if, like me, you are a programmer or data scientist, for example, and you prize stability, clarity, and simplicity, if you find change and learning new ways to be stimulating, and if you know that the most interesting things in life are on the roads less traveled, you will be delighted by NixOS.

To get started, [here](../nix-docker-fhs/index.qmd) is an article on the File Heirarchy Standard, which NixOS abandoned for a graph structure. In so doing, Nix sidesteps the need for containers such as Docker, Distrobox or Flatpaks.
